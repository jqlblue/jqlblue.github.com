<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Debug Hacks]]></title>
  <link href="http://jqlblue.github.io/atom.xml" rel="self"/>
  <link href="http://jqlblue.github.io/"/>
  <updated>2017-01-10T23:37:58+08:00</updated>
  <id>http://jqlblue.github.io/</id>
  <author>
    <name><![CDATA[jqlblue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[深入理解双因子认证]]></title>
    <link href="http://jqlblue.github.io/2017/01/05/2fa-a-programmers-perspective/"/>
    <updated>2017-01-05T12:03:00+08:00</updated>
    <id>http://jqlblue.github.io/2017/01/05/2fa-a-programmers-perspective</id>
    <content type="html"><![CDATA[<p>去年年初，让ops在服务器上开启了基于google-authenticator的双因子认证。最近花了点时间进行深入了解，记录如下。</p>

<!-- more -->


<h1>双因子认证的相关概念</h1>

<p>双因子认证（Two-factor authentication，也叫2FA），是一种通过组合两种不同的验证方式进行用户身份验证的机制。Google在2011年3月份，宣布在线上使用双因子认证，MSN和Yahoo紧随其后。</p>

<p>双因子认证，除了需要验证用户名密码外，还要结合另外一种实物设备，如Rsa令牌，或者手机。</p>

<p>如果我们把传统的用户名密码验证称为单因子认证（1FA），那么对比双因子认证（2FA），他们的区别如下：</p>

<blockquote><p>1FA &ndash; What you know (e.g. a password, a pin)</p>

<p>2FA &ndash; What you have (e.g. a phone, a hardware token)</p>

<p>3FA &ndash; What you are (e.g. your fingerprints, you retina)</p></blockquote>

<p>双因子认证的产品大致可以分成两类：</p>

<ul>
<li>可以产生token的硬件设备</li>
<li>智能手机的app</li>
</ul>


<p>手机短信验证码，登录微信公众号时的扫码确认都可以称为双因子认证。</p>

<p>双因子认证，还会结合一个只有你有的硬件设备。只要这个专属的硬件设备不丢失（察觉这个设备丢失，比用户名密码泄露，会容易很多），就可以大大地提升账号的安全性。</p>

<h1>双因子认证的实现</h1>

<p>双因子认证的流程如下：
<img src="http://jqlblue.github.io/images/2fa/flow.png" title="Two-factor authentication flow" ></p>

<p>认证过程中涉及的token，一般会使用一次性密码(<a href="https://en.wikipedia.org/wiki/One-time_password">One-time password</a>)，相关实现有：</p>

<ul>
<li>HOTP: 基于次数的一次性密码（<a href="https://tools.ietf.org/html/rfc4226">HMAC-Based One-Time Password</a>）</li>
<li>TOTP: 基于时间的一次性密码（<a href="https://tools.ietf.org/html/rfc6238">Time-Based One-Time Password</a>）</li>
</ul>


<p><code>HOTP</code>和<code>TOTP</code>的实现都基于<a href="https://tools.ietf.org/html/rfc2104">HMAC-SHA-1</a>算法。</p>

<p><code>HOTP</code>的生成算法如下</p>

<pre><code>HOTP(K,C) = Truncate(HMAC-SHA-1(K,C))
</code></pre>

<p>其中：</p>

<ul>
<li><code>C</code>是一个8-byte的自增变量。对于客户端，每生成一次性密码，其值加1。对于服务端，每次成功认证客户端产生的一次性密码，其值加1。在<code>HOTP</code>生成（客户端）和验证（服务端）过程中，C的值必须同步。</li>
<li><code>K</code>是客户端和服务端使用的共享密钥，每个客户端的<code>K</code>应该都是唯一的。</li>
</ul>


<p>生成步骤如下：</p>

<pre><code>Step 1: 使用HMAC-SHA-1算法，利用C和K，生成一个长度为20-byte的40个十六进制字符，即：HS = HMAC-SHA-1(K,C)
Step 2: 根据前面产品的字符串`HS`，生成一个长度为4-byte的8个十六进制字符，即：Sbits = DT(HS)，DT是根据HS，动态产生Sbits的方法，后面的示例中会提到
Step 3: 根据前面的Sbits，计算一个HOTP的值，一般为6位数字。
</code></pre>

<blockquote><p>2 nibbles (2 hex characters) = 1-byte</p></blockquote>

<p><code>TOTP</code>可以当做是<code>HOTP</code>算法的一个变种，可以将<code>TOTP</code>的生成算法定义为：</p>

<pre><code>TOTP = HOTP(K, T)
</code></pre>

<p><code>K</code>同<code>HOTP</code>算法中<code>K</code>的定义，是客户端和服务端使用的共享密钥，<code>T</code>是一个整数，定义如下：</p>

<pre><code>T = floor((Current Unix time - T0) / X)
</code></pre>

<p>其中：</p>

<ul>
<li><code>T0</code>是起始的Unix Time，默认为0</li>
<li><code>X</code>是<code>T</code>增长的步长，默认为30</li>
</ul>


<p>即<code>T</code>是以30为步长，当前的Unix Time距初始的Unix Time<code>T0</code>增长的数量。</p>

<p>如果<code>T0</code>=0，<code>X</code>=30，那么当此刻的Unix time是59时，<code>T</code>=1，当此刻的Unix time为60时，<code>T</code>=2。<code>TOTP</code>算法生成的一次性密码，就会每30s变更一次。</p>

<h1>一次性密码的生成过程</h1>

<p>本文以HMAC-SHA-1算法生成的字符串<code>HS</code>的值是<code>0215a7d8c15b492e21116482b6d34fc4e1a9f6ba</code>为例，介绍一次性密码的生成过程。</p>

<p>如果使用<code>TOTP</code>算法进行双因子认证，要让用户在30s内输入40个十六进制的字符，这是一件很难想象的事情。所以我们需要想个办法，将<code>HS</code>转换地更加便于输入，而又不失安全性。这就是前面提到的DT（Dynamic Truncation）的处理过程。</p>

<p>为了更清晰地展示生成过程，用下图表示<code>HS</code>：</p>

<p><img src="http://jqlblue.github.io/images/2fa/hotp_step1.png" title="Two-factor authentication step1" ></p>

<p>前面的图中包含40个字符，每个字符都占4-bits（有16个可能的值0-15），被分成了20组单独的字符串。</p>

<p>我们先去找<code>HS</code>的低4位（最后一个字符），作为截取字符串的起始位置。在我们的例子里，最后一个字符是<code>a</code>：</p>

<p><img src="http://jqlblue.github.io/images/2fa/hotp_step2.png" title="Two-factor authentication step2" ></p>

<p>将十六进制的字符<code>a</code>转成十进制数是<code>10</code>。</p>

<p>我们将第1组字符串的偏移量用<code>0</code>表示，以此类推，如下：</p>

<p><img src="http://jqlblue.github.io/images/2fa/hotp_step3.png" title="Two-factor authentication step3" ></p>

<p>然后，从字符串<code>HS</code>的第<code>10</code>个偏移量开始，截取<code>4</code>组字符串（或者是接下来的31-bits）。</p>

<blockquote><p>这样截取的最大偏移量是15+4=19，刚好没有越界</p></blockquote>

<p>因此，我们通过DT（Dynamic Truncation）处理，将<code>HS</code>转换后得到的字符串是<code>6482b6d3</code>：</p>

<p><img src="http://jqlblue.github.io/images/2fa/hotp_step4.png" title="Two-factor authentication step4" ></p>

<p>将十六进制的<code>6482b6d3</code>转成十进制数是<code>1686288083</code>。</p>

<p>因为我们需要一个6位的数字，所以和<code>1000000</code>进行取模运算：</p>

<pre><code>1686288083 modulo 1000000
</code></pre>

<p>最后的结果是：</p>

<pre><code>288083
</code></pre>

<h1>使用google-authenticator，开启服务器双因子认证</h1>

<p>首先，去你喜欢的android应用市场，或者apple的appStore去安装：“Google Authenticator（google身份验证器）”。</p>

<p>然后登录要开启双因子认证登录的服务器，进行下面的操作。</p>

<p>安装依赖</p>

<pre><code>yum -y install gcc gcc-c++ make wget pam-devel
</code></pre>

<p>安装Google Authenticator</p>

<pre><code>wget http://google-authenticator.googlecode.com/files/libpam-google-authenticator-1.0-source.tar.bz2
tar jxvf libpam-google-authenticator-1.0-source.tar.bz2
cd libpam-google-authenticator-1.0
make
sudo make install
</code></pre>

<p>配置SSH登录时调用google-authenticator模块</p>

<p>编辑文件<code>/etc/pam.d/sshd</code>，添加：</p>

<pre><code>auth       required     pam_google_authenticator.so
</code></pre>

<p>编辑文件<code>/etc/ssh/sshd_config</code>，在文件中查找<code>ChallengeResponseAuthentication</code>和<code>UsePAM</code>，修改为如下内容：</p>

<pre><code>ChallengeResponseAuthentication yes
UsePAM yes
</code></pre>

<p>重启ssh</p>

<pre><code>sudo service ssh restart
</code></pre>

<p>下面是配置Google Authenticator的相关步骤。</p>

<p>如果要为用户<code>zhangsan</code>添加ssh登录时的双因子认证，执行如下命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>su - zhangsan
</span><span class='line'>google-authenticator</span></code></pre></td></tr></table></div></figure>


<p>会出现一串问题，让你选<code>y</code>或者<code>n</code>。</p>

<pre><code>Do you want authentication tokens to be time-based (y/n) y
https://www.google.com/chart?chs=200x200&amp;chld=M|0&amp;cht=qr&amp;chl=otpauth://totp/zhangsan@ali%3Fsecret%3DWKHM6UVJNTPYSPTQ
Your new secret key is: WKHM6UVJNTPYSPTQ
Your verification code is 434260
Your emergency scratch codes are:
30287010
70585905
68748337
15176712
38041521
</code></pre>

<p>上面的这一步，会生成一个base32编码的共享密钥<code>WKHM6UVJNTPYSPTQ</code>，即前面的<code>K</code>，用于在客户端进行绑定（如果可以翻墙的话，实际上会看到一张二维码，使用Google Authenticator app扫码即可以完成绑定）。</p>

<p>共享密钥使用base32而非base64的原因如下：</p>

<ul>
<li>base32编码的字符串，包含了大写英文字母和数字2-7。不会因字体显示问题，把1，8，0和&#8217;I&#8217;,&lsquo;B&rsquo;, &lsquo;O&#8217;混淆，更利于输入。</li>
<li>base32编码的字符串，出现在url中时，可以不用进行url编码处理（encode），便于直接使用生成二维码的web服务。</li>
</ul>


<p>同时，基于当前的Unix time，生成了一个动态验证码<code>434260</code>，可用于测试。并生成了5个应急备用验证码（上面的emergency scratch codes），可以在绑定设备丢失的情况下使用（每个应急码只能使用一次）。</p>

<p>剩下的问题，没有特殊癖好，可以都选<code>y</code>。</p>

<pre><code>Do you want me to update your "/home/zhangsan/.google_authenticator" file (y/n) y

Do you want to disallow multiple uses of the same authentication
token? This restricts you to one login about every 30s, but it increases
your chances to notice or even prevent man-in-the-middle attacks (y/n) y

By default, tokens are good for 30 seconds and in order to compensate for
possible time-skew between the client and the server, we allow an extra
token before and after the current time. If you experience problems with poor
time synchronization, you can increase the window from its default
size of 1:30min to about 4min. Do you want to do so (y/n) y

If the computer that you are logging into isn't hardened against brute-force
login attempts, you can enable rate-limiting for the authentication module.
By default, this limits attackers to no more than 3 login attempts every 30s.
Do you want to enable rate-limiting (y/n) y
</code></pre>

<p>之后，ssh登录服务器时，会看到类似这样的提示：</p>

<pre><code>verification code:
</code></pre>

<p>这时，打开手机上的google身份验证器App，输入对应的code，如下：</p>

<p><img src="http://jqlblue.github.io/images/2fa/google-authenticator.png" title="google 验证器 flow" ></p>

<p>reference：</p>

<p>[^1] <a href="https://pthree.org/2014/04/15/time-based-one-time-passwords-how-it-works/">https://pthree.org/2014/04/15/time-based-one-time-passwords-how-it-works/</a></p>

<p>[^2] <a href="https://garbagecollected.org/2014/09/14/how-google-authenticator-works/">https://garbagecollected.org/2014/09/14/how-google-authenticator-works/</a></p>

<p>[^3] <a href="https://www.blackmoreops.com/2014/06/26/securing-ssh-two-factor-authentication-using-google-authenticator/">https://www.blackmoreops.com/2014/06/26/securing-ssh-two-factor-authentication-using-google-authenticator/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的2016和很多书写体验]]></title>
    <link href="http://jqlblue.github.io/2016/12/31/writing-in-2016-of-mine/"/>
    <updated>2016-12-31T23:05:00+08:00</updated>
    <id>http://jqlblue.github.io/2016/12/31/writing-in-2016-of-mine</id>
    <content type="html"><![CDATA[<p>我是一个善于遗忘的人，经过后天的努力，渐渐练就了选择性记忆。所以当不安的时候，我就会开始写，尝试让我的文字，去触碰我内心那些最深，最真的地方。</p>

<!--more-->


<p>年初，我继续加入了一家创业公司，带着我作为一个互联网从业人员的执念。我期盼着通过我们的技术，去改变一个行业，改善我们的生活，make live easier。</p>

<p>到现在回顾起来，那些让人欣慰的事情包括：</p>

<ul>
<li>推送消息时，服务器不再宕机</li>
<li>商城，可以随意部署，随意修改</li>
<li>周会终于可以自循环起来了</li>
<li>又在要升级到php5.5的当儿，一口气升到了php7</li>
</ul>


<p>虽然花不少精力组建了一个最小化的数据团队。也一起构画了一个很理想的picture，连demo和可执行的实施计划都搞定了，但是，最终还是搁置了。</p>

<p>如果说第一次加入创业公司的经历，是帮我开了一扇窗；那这段经历，就是真真切切地丰富了我的体验。</p>

<p>我终于发现，程序员的世界，和现实世界，本就不在同一个空间。</p>

<p>现实世界，并不是非黑即白。并不能简单地通过cap，或者几个9去评价一件事情是否靠谱。</p>

<p>虽然我一直在致力于透明化产品的研发进程，但是，仍然会遇到一些黑暗的事情。或许，会被当做一个里外都不是人的角色。</p>

<p>作为一个leader，一方面，要以公司利益为重；另一方面，还要和同你一起并肩作战的兄弟们站在一起，也要照顾到他们的利益，这本来就很难两全其美。</p>

<p>此处，我要引用德兰修女的箴言。虽然我不是一个虔诚的基督教徒，但是这段文字，自上大学起，就一直在给我勇气和希望，让我要不忘初心。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>人们经常是不讲道理的、没有逻辑的和以自我为中心的
</span><span class='line'>不管怎样，你要原谅他们
</span><span class='line'>即使你是友善的，人们可能还是会说你自私和动机不良
</span><span class='line'>不管怎样，你还是要友善
</span><span class='line'>当你功成名就，你会有一些虚假的朋友
</span><span class='line'>和一些真实的敌人
</span><span class='line'>不管怎样，你还是要取得成功
</span><span class='line'>即使你是诚实的和率直的，人们可能还是会欺骗你
</span><span class='line'>不管怎样，你还是要诚实和率直
</span><span class='line'>你多年来营造的东西
</span><span class='line'>有人在一夜之间把它摧毁
</span><span class='line'>不管怎样，你还是要去营造
</span><span class='line'>如果你找到了平静和幸福，他们可能会嫉妒你
</span><span class='line'>不管怎样，你还是要快乐
</span><span class='line'>你今天做的善事，人们往往明天就会忘记
</span><span class='line'>不管怎样，你还是要做善事
</span><span class='line'>即使把你最好的东西给了这个世界
</span><span class='line'>也许这些东西永远都不够
</span><span class='line'>不管怎样，把你最好的东西给这个世界
</span><span class='line'>你看，说到底，它是你和上帝之间的事
</span><span class='line'>而决不是你和他人之间的事</span></code></pre></td></tr></table></div></figure>


<p>或许是步入中年危机，被生活所迫。生理洁癖和心里洁癖，都改善了很多。</p>

<p>可以在被闺女和她的小朋友们作过的床上，照常入睡。也可以在给闺女喂完早饭后，淡然地吃掉一碗发胖的面条。</p>

<p>正视被背叛，被欺骗，被利用；接受和这样的人共事。</p>

<p>前几天又回顾了和EMO的交流，发现我最大的优势就是责任心很强，任何事情都可以放心地交给我。对于一个靠谱的人而言，如果有能力，有资源，想做，去做就好，这是你自己的事情，和别人无关。</p>

<p>这一年，陪闺女的时间多了一些，很享受和闺女在一起的那些时刻：</p>

<ul>
<li>早上推门进来，躺在被窝和你一起用kindle看父与子</li>
<li>出门或者分别时，对你说出那句稚嫩的再见</li>
<li>睡醒时迷迷糊糊地叫你一声爸爸</li>
<li>抱着她在电视上看铁甲钢拳，或者在手机上看神偷奶爸</li>
<li>陪她去上早教课，看着她一点点成长。终于可以坐到圆圈时间结束，会自己去安慰哭闹的小朋友。</li>
<li>拉着她的小手带她去超市。一路上对你说：“吃棒棒糖掉牙”，看到棒棒糖时又却迈不开腿。</li>
</ul>


<p>这一年，blog落下了，饭局也少了。</p>

<p>要在技术的道路上走地更远，的确需要耐地住寂寞，但是，也需要经营自己的影响力。</p>

<p>技术改变生活，这不是场一个人的战斗。</p>

<p>前几天遇到了小白，发现他变瘦变帅了。</p>

<p>我又想起了自己参加TA时宣言 &mdash; 我是一个主动，激情，有活力的男人。</p>

<p>世事，或许会总不如我愿。</p>

<p>未来，或许还有更糟的经历和体验。</p>

<p>用心，尽力做好自己能做的，旦行好事，莫问前程。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac终端穿墙技术汇总]]></title>
    <link href="http://jqlblue.github.io/2016/11/17/mac-terminal-cross-gfw/"/>
    <updated>2016-11-17T18:32:39+08:00</updated>
    <id>http://jqlblue.github.io/2016/11/17/mac-terminal-cross-gfw</id>
    <content type="html"><![CDATA[<p>作为一个互联网从业人员，要想在天朝愉快地工作，生活，目前必须正视墙（gfw）的存在。
本文涉及的翻墙方法，主要针对mac系统。但大部分内容，同样适用于window和linux。也可以自行寻找相关替代品。</p>

<!--more -->


<h1>土豪的方法</h1>

<p>如果你是一个使用mac系统的土豪，那么，访问这个网站 <a href="http://nssurge.com/">http://nssurge.com/</a> 就够了。</p>

<h1>others</h1>

<p>实际上，这才是本文的重点。</p>

<h2>准备工作</h2>

<p>我们需要先搭建一个ss（Shadowsocks）服务器，或者买个账号（<a href="https://shadowsocks.com/%EF%BC%89%E3%80%82">https://shadowsocks.com/%EF%BC%89%E3%80%82</a></p>

<h3>搭建ss server</h3>

<ul>
<li>买个海外的云主机，各大云的香港或者海外节点，应该都能满足需求。</li>
<li>安装 ss server
在云主机的命令行下，执行如下命令</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pip install shadowsocks</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/shadowsocks/shadowsocks.git
</span><span class='line'>cd shadowsocks
</span><span class='line'>python setup.py</span></code></pre></td></tr></table></div></figure>


<ul>
<li>配置
创建配置文件，如<code>/etc/shadowsocks.json</code>，示例内容如下</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>    "server":"my_server_ip",
</span><span class='line'>    "server_port":8388,
</span><span class='line'>    "local_port":1080,
</span><span class='line'>    "password":"barfoo!",
</span><span class='line'>    "timeout":600,
</span><span class='line'>    "method":"table",
</span><span class='line'>    "auth": true
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<blockquote><p>配置文件是json格式，注意最后一行没有<code>,</code></p></blockquote>

<ul>
<li>启动ss server
<code>ssserver -c /etc/shadowsocks.json -d start</code></li>
<li>停止ss server
<code>
ssserver -c /etc/shadowsocks.json -d stop
</code></li>
</ul>


<h3>安装ss 客户端</h3>

<p>推荐 <a href="https://github.com/shadowsocks/ShadowsocksX-NG">ShadowsocksX-NG</a>，因为 <a href="https://github.com/shadowsocks/shadowsocks-iOS/releases">ShadowsocksX</a>已无法正常更新pac文件。</p>

<p>至此，使用浏览器的话，就可以自由地在互联网上遨游了。当然，你会发现更好用的翻墙技术。</p>

<h2>终端(terminal)翻墙</h2>

<h3>亲测可用的方案</h3>

<p>下载软件 <a href="https://www.proxifier.com/download.htm">proxifier</a>，仅支持windows和mac，收费软件。</p>

<p>如果是学生的话，可以给我留言，我共享个注册码给你。其他人建立购买，在这物价横飞的时代，几百块，分分钟就花没了。</p>

<p>shadowsocks代理属于socks5代理，通俗的理解，socks5只是局部代理。使用Proxifier把shadowsocks代理转全局代理，类vpn。所以，该方案实际上不局限于终端翻墙。</p>

<h3>其他方案</h3>

<p><a href="https://eliyar.biz/proxy-for-mac-terminal/">proxychains-ng</a>
<a href="https://mba811.gitbooks.io/web-study/content/fq/fq3.html">tsocks</a></p>

<h1>reference</h1>

<p>[^1] <a href="https://shadowsocks.org/">https://shadowsocks.org/</a></p>

<p>[^2] <a href="https://github.com/shadowsocks">https://github.com/shadowsocks</a></p>

<p>[^3] <a href="https://shadowsocks.com/">https://shadowsocks.com/</a></p>

<p>[^4] <a href="https://www.dou-bi.co/ss-jc7/">https://www.dou-bi.co/ss-jc7/</a></p>

<p>[^5] <a href="http://www.voidcn.com/blog/shenshouer/article/p-6254512.html">http://www.voidcn.com/blog/shenshouer/article/p-6254512.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用charles在移动设备上捕获https数据包]]></title>
    <link href="http://jqlblue.github.io/2016/07/01/charles-https/"/>
    <updated>2016-07-01T00:38:16+08:00</updated>
    <id>http://jqlblue.github.io/2016/07/01/charles-https</id>
    <content type="html"><![CDATA[<p>对于互联网从业人员而言，掌握抓包，是必备技能。</p>

<!--more-->


<p><code>Charles</code>是一个http代理，工作模式如下图：</p>

<p><img src="http://jqlblue.github.io/images/mobile/http_proxy.png" title="'抓包'" ></p>

<p>但是默认只能抓http协议的数据包，要捕获https的数据包，需要进行相关配置。</p>

<p>下文以<code>IOS</code>移动设备为例，讲述配置步骤（<code>android</code>设备类似）：</p>

<ul>
<li>在移动设备安装ssl证书</li>
</ul>


<p>Charles ssl证书的下载地址如下：</p>

<p><a href="http://www.charlesproxy.com/getssl">http://www.charlesproxy.com/getssl</a></p>

<p>在移动设备的浏览器中打开上述<code>Url</code>，即可进行安装。</p>

<ul>
<li>安装http代理<code>Charles</code></li>
</ul>


<p>软件下载地址如下：
<a href="http://www.charlesproxy.com/latest-release/download.do">http://www.charlesproxy.com/latest-release/download.do</a></p>

<ul>
<li>启用http代理</li>
</ul>


<p>打开<code>Charles</code>软件，默认会启动一个监听本地8888端口的http代理， 也可以在<code>Charles</code>的设置中修改相关端口。</p>

<ul>
<li>配置<code>Charles</code>支持https</li>
</ul>


<p>在<code>Charles</code>中打开：</p>

<pre><code>Proxy -&gt; SSL Proxying Settings
</code></pre>

<p>勾选</p>

<pre><code>Enable SSL Proxying
</code></pre>

<p>然后在下方的<code>Locations</code>中点击</p>

<pre><code>Add
</code></pre>

<p>添加需要抓https接口的域名。</p>

<p>例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Host:www.baidu.com
</span><span class='line'>Port:443</span></code></pre></td></tr></table></div></figure>


<ul>
<li>在移动设备上修改代理</li>
</ul>


<p><img src="http://jqlblue.github.io/images/mobile/ios_http_proxy.png" title="'ios设置代理'" ></p>

<p>其中，<code>服务器</code>是安装了<code>Charles</code>软件的电脑的<code>IP</code>，端口是<code>Charles</code> http代理开启的端口。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的2015]]></title>
    <link href="http://jqlblue.github.io/2016/01/01/2015-of-mine/"/>
    <updated>2016-01-01T22:51:00+08:00</updated>
    <id>http://jqlblue.github.io/2016/01/01/2015-of-mine</id>
    <content type="html"><![CDATA[<p>我不是一个善于规划的人，当这新的一年已经到来的时候，我觉得自己做一些改变，以更好地让自己来面对这个阶段的人生，也让自己的生活有所不同。</p>

<!-- more -->


<p>为了让我的内容可以衬地上我的标题，我需要先从2014年说起。</p>

<p>2014年，我从数字离职，加入了一家创业公司。从居民楼搬到写字楼，和你们一起奋斗的日子，历历在目，感谢在有生之年，可以遇到你们。</p>

<p><img src="http://jqlblue.github.io/images/2015-of-mine/zq.jpg" title="住趣" ></p>

<h1>工作方面</h1>

<ul>
<li>2015年，我工作的重心，从之前的自coding，变成了团队建设。当然，写代码这门手艺不能丢。明年需要拿下react，rust，或者golang。</li>
<li>2015年，我的工作环境也从之前的fedora＋windows xp虚拟机，换成了new macbook＋4k显示器。</li>
</ul>


<h1>家庭生活方面</h1>

<ul>
<li>今年我的闺女满1岁了，我会尽我的能力，支撑她健康，开心，快乐，善良地成长。</li>
<li>现在的自己，渐渐地有了架子，对老婆的意见越来越多了。但是，我及时发现了这个问题。现在我老婆要动手的时候，我基本上可以做到变身成沙袋模式；每个月，都会给老爸老妈打几次电话。这应该离不开我闺女对我的影响。从小到大，我都很羡慕一个和睦的家庭。现在的我，要尽我所能，为我闺女营造一个和睦的家庭氛围。</li>
<li>今年，给我和我闺女办了护照（她妈妈已经办好护照了）。等合适的时候，想去台湾或者日本转转。</li>
<li>今年，成功办理了工作居住证。伤心的是，没有在新单位续上 :(</li>
</ul>


<h1>教育学习</h1>

<ul>
<li>终于赶在2015年结束之前，拿到了驾照。</li>
<li>在我的emo的支持下，参加了上海同泰在北京的EP培训，在上海参加了领袖素质1阶段的培训，在深圳参加了领袖素质2阶段的培训。</li>
</ul>


<h1>人际关系</h1>

<ul>
<li>托挺哥的福，又认识了一个棒棒哒的dba。</li>
<li>托老王的福，认识了一个前端大牛，只可惜还没怎么配合呢。</li>
<li>和it168的老同事门聚了聚。</li>
<li>和七七吃了顿饭。</li>
<li>在住趣和艾米，又认识了一波90后小鲜肉。</li>
<li>已经答应要吃饭的包括：老胡，玄悲，旭辉，家柱，冠华，小虎队的。。。</li>
</ul>


<h1>身体健康</h1>

<ul>
<li>今年在梵音办了40次的次卡，但是使用了不到10次。</li>
<li>今年买了囚徒健身，但是仅断断续续地练到了第二式。</li>
</ul>


<h1>心灵成长</h1>

<ul>
<li>这一年，我的emo，mily帮我打开了一扇窗，让我看到了自己的封闭，被动，以及除技术之外的其他东西。所以，我要做一个主动，激情，有活力的男人</li>
<li>这一年，我信守了我加入住趣时对自己的承诺，坚持到和老板卖完最后一张桌子。但是在加入住趣的1年多时间里面，我可以做更多。这是自己要加入下家公司时，需要去实践的事情。</li>
</ul>


<h1>休闲娱乐</h1>

<ul>
<li>今年，学到了除数七和成语接龙之外的第三个游戏。</li>
<li>今年虽然没有去电影院，但是热映电影中的50%，基本上都有在手机上看过。</li>
</ul>


<h1>金钱财务</h1>

<ul>
<li>今年没有年终奖了，明年好好努力。</li>
</ul>


<p>最后，祝你们一切都好！</p>

<p>马上要从天天艾米离开了，怀念一下那个让我有点感动的场景。</p>

<p><img src="http://jqlblue.github.io/images/2015-of-mine/ime.png" width="365"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[奶爸攻略]]></title>
    <link href="http://jqlblue.github.io/2015/12/15/guide-of-kid-gang/"/>
    <updated>2015-12-15T22:51:00+08:00</updated>
    <id>http://jqlblue.github.io/2015/12/15/guide-of-kid-gang</id>
    <content type="html"><![CDATA[<p>有一天，当你早上出门时，有一个会小孩摇摇晃晃地走到门口，对你伸开怀抱；对你晚上推开家门时，他／她手里拿着玩具，无邪地开心对你笑，用稚嫩的声音叫你一声爸爸。</p>

<!-- more -->


<p>当这么一个小孩降临到这个世上，来到你身边时，也会因为生病让你揪心，哭闹让你烦躁。</p>

<p>作为一个不称职的奶爸，汇总了小孩成长过程中的一些点滴，希望对初为人父的你有所帮助。</p>

<h1>新生儿所需物品清单</h1>

<ul>
<li>小剪刀</li>
</ul>


<blockquote><p>小孩皮肤稚嫩，指甲长了，容易把自己抓伤。</p></blockquote>

<p><img src="http://jqlblue.github.io/images/kid-gang/jiandao.png" title="小剪刀" ></p>

<ul>
<li>屁屁油</li>
</ul>


<blockquote><p>我们家小孩经常红屁屁，机缘巧合中发现了下面这个，强烈推荐。</p></blockquote>

<p><img src="http://jqlblue.github.io/images/kid-gang/pipiyou.png" title="屁屁油" ></p>

<ul>
<li>温度计</li>
</ul>


<blockquote><p>初生儿怕热，屋里挂个温度计，经常看看，不要让屋里温度过高。</p></blockquote>

<p><img src="http://jqlblue.github.io/images/kid-gang/wenduji.png" title="温度计" ></p>

<ul>
<li>小夜灯</li>
</ul>


<blockquote><p>方便晚上给小孩喂奶，换尿布。</p></blockquote>

<p><img src="http://jqlblue.github.io/images/kid-gang/xiaoyedeng.png" title="小夜灯" ></p>

<ul>
<li>爽身粉</li>
</ul>


<blockquote><p>小孩新生代谢旺盛，需要保持腋窝等部位的干燥。</p></blockquote>

<p><img src="http://jqlblue.github.io/images/kid-gang/songhuafeng.png" title="爽身粉" ></p>

<ul>
<li>婴肤霜</li>
</ul>


<blockquote><p>基本上每个小孩都要长湿疹，下面这个婴肤霜不错。</p></blockquote>

<p><img src="http://jqlblue.github.io/images/kid-gang/yingfushuang.png" title="婴肤霜" ></p>

<h1>尿不湿的选择</h1>

<blockquote><p>选择尿不湿的不二法门就是：没有最好，只有更适合。</p></blockquote>

<p>我们家小孩使用过的尿不湿品牌如下：</p>

<p><img src="http://jqlblue.github.io/images/kid-gang/niaobushi1.png" title="尿不湿" ></p>

<p><img src="http://jqlblue.github.io/images/kid-gang/niaobushi2.png" title="尿不湿" ></p>

<p><img src="http://jqlblue.github.io/images/kid-gang/niaobushi3.png" title="尿不湿" ></p>

<blockquote><p>如果小孩红屁屁比较严重，可以换成尿布试试。</p></blockquote>

<p><img src="http://jqlblue.github.io/images/kid-gang/niaobu.png" title="尿布" ></p>

<h1>FAQ</h1>

<ul>
<li>母乳喂养or not</li>
</ul>


<p>这个社区医院的大夫都会讲。</p>

<p>我们家小孩是母乳喂养，半岁之前，基本上没生病。</p>

<blockquote><p>母乳喂养期间，妈妈要多喝汤，不要太重口，保持好心情。</p></blockquote>

<ul>
<li>小孩出疹子怎么办</li>
</ul>


<p>出疹子，好像是一岁之前的大部分小孩都要经历的，在出疹子之前，会先持续高烧。烧退了就出疹子（身上长小红疙瘩），一般都会自行消退。</p>

<p>发烧期间，是很揪心的，要美林和物理降温齐上。</p>

<ul>
<li>小孩打嗝怎么办</li>
</ul>


<p>小孩的消化系统不健全，所以经常会见他／她专注地打嗝。</p>

<p>一般情况下，喝点水或者喝点奶就压下去了。</p>

<p>要嗝地太厉害，一般方法不管用时，可以把他／她弄哭，大哭一场之后就好。</p>

<blockquote><p>这个方法有点残忍，但是很凑效。</p></blockquote>

<ul>
<li>发烧和呕吐注意事项</li>
</ul>


<p><img src="http://jqlblue.github.io/images/kid-gang/fare.jpg" title="发烧" ></p>

<p><img src="http://jqlblue.github.io/images/kid-gang/out.jpg" title="呕吐" ></p>

<ul>
<li>其他需要注意的事项</li>
</ul>


<p>当个小孩不容易，作为老爸，尽量多抽时间陪陪小孩。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0821EP培训－去发现醒觉的力量]]></title>
    <link href="http://jqlblue.github.io/2015/08/24/0821-the-road-of-awakening/"/>
    <updated>2015-08-24T13:29:00+08:00</updated>
    <id>http://jqlblue.github.io/2015/08/24/0821-the-road-of-awakening</id>
    <content type="html"><![CDATA[<p>有部电影里说，我们知道很多道理，但是依旧过不好这一生。</p>

<!--more-->


<p>两天半的培训结束了，有收获，也有遗憾。</p>

<p>前半天的培训，我更像个旁观者，仅仅是看着大家一个个上去自我介绍，然后我应付地上去做了个介绍。后面的游戏环节，虽然我很早意识到了需要多个组配合才能完成游戏，但是，我并没有为团队贡献太多，看着场上混乱的场景，我只是和另外一个组员去给别人拼图（拼好后被别的组拿走了）。在回家的路上，我决定第二天做两件自己不想做的事情。</p>

<p>第二天的培训，自己的固有思维一直处于上风。我没有主动发言（曾经争取过一次机会，因为老师没有看到，就放弃了）。在最后的两队选队长pk环节，我也没有主动去争取。在找学员说伤心往事时，我的心门也没有完全打开。</p>

<p>最后一天，我在组内主动分享我的感悟和经历，我奋力去冲破障碍。拿出自己的活力，很有信心地单腿跳着跨过毕业线。主动找助教合影，找别的组的学员索取联系方式。当我从学员身边走过，我感觉很轻松。当我坐车离开酒店时，心里暖暖地。</p>

<p>这两天半的课程，或许不会马上对我所有改变，有所提升。但是，一些可以打破我固有思维模式的种子，已经种下。</p>

<p>让自己打开心扉，卸下防御；让自己加强自己的进取心，加强那份求胜的渴望；让自己尝试做一些改变；去平衡事业，家庭，身体健康，金钱财物，心灵成长，教育学习，人际关系，休闲娱乐。这些，我已经意识到了。</p>

<p>我已经不想一直安静地做一个技术男了，我可以去尝试小龙虾，可以去尝试各种稀奇古怪的美食，让我的生活有所不同。</p>

<p>遗憾是，课堂中，我并没有去争取可以锻炼自己的机会，我还是会很在乎别人的眼光。</p>

<p>接下来，自己会制订相关计划。至少，每天会坚持做两件自己之前没有尝试过的事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再见360]]></title>
    <link href="http://jqlblue.github.io/2015/07/01/mark-360/"/>
    <updated>2015-07-01T16:18:00+08:00</updated>
    <id>http://jqlblue.github.io/2015/07/01/mark-360</id>
    <content type="html"><![CDATA[<p>离开360有一年的时间了。虽然老周的手机目前没了消息。但是再次去看这家在经历3Q，3B大战后，依然能活跃在互联网风头浪尖的公司，还是有不少感悟。</p>

<!--more-->


<h1>360的历史</h1>

<p><img src="http://jqlblue.github.io/images/360_timeline.jpg" title="'history of 360" ></p>

<p>360的前身是奇虎，现在也叫<code>奇虎360</code>。奇虎当时有3个业务方向：</p>

<ul>
<li>奇虎搜索</li>
<li>社区口碑营销</li>
<li>360</li>
</ul>


<p>当时，主要的人力都投入了奇虎搜索。360属于一个边缘业务，其前身是<code>流氓克星</code>，用于干掉其它浏览器插件，并在浏览器上推荐奇虎搜索插件。</p>

<p>大家最早所知道的360叫<code>360安全卫士</code>，被定位成“口碑项目”，即：</p>

<ul>
<li>不求商业利益</li>
<li>开放源代码</li>
<li>任何时候都可交给第三方运营</li>
</ul>


<p>在06年反流氓软件的大潮中，360的项目负责人在民间组织了一个叫<code>360督导委员会</code>的实体讨论组。其承诺是：不以盈利为目的、只为打击流氓软件，并保证360自己不做流氓软件。</p>

<p>后来，360安全卫士的总安装量达到了几千万，每天就有几十万的新安装量，而其它两条业务线，依然没有太大起色。到08年的时候，老周痛下决心，全力做360。</p>

<h1>360的用户观</h1>

<p>了解360的人都知道，<code>用户利益至上</code>，是老周在任何场合基本上都会强调的，这主要体现其强有力的运营体系。</p>

<ul>
<li>每一款上线的产品，基本都有<code>意见反馈</code>入口</li>
<li>每一款开始运营的产品，在<code>360bbs</code>上都有相关板块。</li>
</ul>


<p><img src="http://jqlblue.github.io/images/360_bbs.jpg" title="'bbs of 360" >
<img src="http://jqlblue.github.io/images/360_bbs_zhushou.jpg" title="'bbs of 360 zhushou" ></p>

<ul>
<li>用户提交的任何反馈，都能在24小时内得到运营人员的反馈。</li>
</ul>


<p>记得有一年十一假期，正在家里配置我的<a href="http://jqlblue.github.io/2014/02/28/emacs24-on-mac-and-linux/">emacs</a>，突然接到运营的反馈，说助手id化服务出了问题，有用户反馈经验值降了，还有截图。</p>

<p>我vpn登录公司网络，查看服务<a href="http://jqlblue.github.io/2014/10/01/use-graphite-and-alter-build-monitor-system/">监控和报警</a>，都在正常运行，于是第一时间联系了dba。</p>

<p>然后就得到了一个很悲惨的消息，dba在维护数据期间，将id化服务的redis实例回滚到了2天之前，正在想办法恢复，不过没有最新的数据备份。我只好将这个噩耗反馈给了运营，并答应尽快恢复。</p>

<p>挂了电话没多久，就收到了运营发的邮件，有故障的相关描述，用户的联系方式，目前的处理进度和责任人，并且cc了一大堆人。</p>

<p>突然感觉压力山大，感觉整个假期都要废掉了。</p>

<p>好在和同事沟通后，通过重放服务器访问日志，将丢失的经验值又给增加了回去。</p>

<h1>360的产品观</h1>

<p>360现在的产品，已经覆盖了<code>PC</code>，<code>手机</code>，<code>智能硬件</code>以及<code>海外市场</code>。</p>

<p><img src="http://jqlblue.github.io/images/360_product.jpg" title="'product of 360" ></p>

<p>在产品方面，老周经常会说的一个词叫<code>小白用户</code>。其<code>小白哲学</code>不仅体现在360的产品在功能和交互层面，让普通小白用户都可以轻易上手使用，还抓住了普通用户<code>宁信其有、不信其无</code>的心态。</p>

<p>例如，借鉴ipad界面交互的<code>360安全桌面</code>，曾经每天有好几千万的活跃用户。而<code>360安全卫士</code>的红色弹窗，也会很自然让<code>小白用户</code>积极地使用360安全卫士给windows系统打补丁，修复漏洞。</p>

<p>老周经常提及的另外一个词叫<code>小步快跑</code>。</p>

<p>在360内部，有很多产品都是由一个产品经理，拉上两个研发，开发一两周，然后随着某一个beta版对外发布。发布后持续关注相关<code>统计数据</code>和<code>用户反馈</code>，不断放量或者进行功能改进。</p>

<p>第一版<code>手机游戏wap站</code>，就是在没有前端开发人员的情况下，由三个后端在不到一周的情况下完成了后台数据的整理入库和前端产品上线。</p>

<h1>360的人才观</h1>

<p>最近360股价不是很给力，所以有些重金挖过来的人才，又去投奔了新的东家。</p>

<p>但是，铁打的营盘，流水的兵。业务和产品总是要向前发展，各条线上，不乏中流砥柱。</p>

<p>纵观现在在一些关键岗位上的人员，有不少都是校招过来的。</p>

<p>这或许就是曾经要成立360学院的初衷。</p>

<p><img src="http://jqlblue.github.io/images/360_xueyuan.jpg" title="'institute of 360" ></p>

<h1>一些历史事件</h1>

<h3>3q大战始末</h3>

<p><img src="http://jqlblue.github.io/images/3q_event.jpg" title="'the war of 360 and qq" ></p>

<p>我没有第一时间接触到3q大战的始末，但是我加入360的时候，公司是不允许安装qq的。</p>

<p>3q大战过去这么久，作为当时国内第一大桌面客户端qq和第二大桌面客户端360安全卫士对战的利益冲突点，似乎已经不那么重要。</p>

<p>当时sns在国内还没有完全兴起，在短短几天的时间内，如何去引爆几千万客户端参与这场战斗，这依然离不开强大的运营。其中包括：</p>

<ul>
<li>在360成名之前，就通过督导版等一系列策略，沉淀了一批忠实用户</li>
<li>健全的产品更新策略，又包括<code>用户主动拉取的更新</code>和<code>推送给用户的更新</code>（即被神秘化的v3）</li>
<li>畅通的用户反馈渠道和数据分析能力</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习卓有成效（转自彼得德鲁克《卓有成效的管理者》读书笔记）]]></title>
    <link href="http://jqlblue.github.io/2015/04/30/study-to-effective/"/>
    <updated>2015-04-30T22:49:00+08:00</updated>
    <id>http://jqlblue.github.io/2015/04/30/study-to-effective</id>
    <content type="html"><![CDATA[<p>学习如何卓有成效。</p>

<!--more-->


<h1>《卓有成效的管理者》读书笔记</h1>

<p>先看了德鲁克的《卓有成效的管理者》，觉得写得真好。就反过去找来他的《管理的实践》，大略的看完了。后面这本书可以算是管理学的百科全书，极为详尽，说事论理非常透彻，假如要研习管理学，这本书应该可算是必读书；不过也因为太过详尽了点，对于只想浅尝辄止的人就不是特别适合了。</p>

<p>适合的应该是这本《卓有成效的管理者》，讲的并不是如何管理一个组织的方方面面，而是一个人如何能够成为有效的管理这个组织的管理者的方法。而按照德鲁克的讲法，所有从事知识工作的人，他本身所从事的工作，即便是他并不在一个明显的管理者的位置上，其实也是在做管理。所以从这个角度说，这本书就是所有从事知识工作的人的必读书。</p>

<ul>
<li><p>知识工作的有效性与体力劳动不同。对于后者，一般有很明确的“对的事情”的定义，要做的只是把这些已经明了的对的事情最好。而对于知识工作，尽管也许我们知道要达到的目标（甚至有时候目标也是不明确的），在一开始我们却总是不知道什么才是达到目标“对的事情”&mdash;这种对于如何做事必须进行规划的要求，正是知识工作本身需要管理的本质原因所在。对于体力劳动，勤奋总是有助于效率；而对于知识工作，假如对“如何去做”这个问题考虑不清楚，勤奋可能适得其反。</p></li>
<li><p>授权。错误的认识：我的工作应该由别人来做；充分授权之后，最闲散的经理人便是最好的经理人。正确认识：把可以别人做的事情交给别人，这样才能做真正应该自己做的事情。其实我一直相信“最闲散的经理人便是最好的经理人”这个有关授权的错误认识，认为一个组织良好的机构，管理者可以撒手而组织运行良好。这固然不是没有任何道理，一个设计优良的组织应该有抗单个节点失效（即便这个节点是最高管理者）的鲁棒性，然而，如果一个管理者可以从组织中消失而不引起任何不良后果，那这个管理者本身在组织中就是冗余的－他本来就不需要在那里。</p></li>
<li><p>零碎的时间和整块的时间不同，即便加起来的总量相同。对于严肃的思考工作，必须有大块的不受打扰的时间才可以，零碎的时间再多也难以进行富有成效的使用。</p></li>
<li><p>所谓会议，顾名思义，是靠集会来商议，是组织缺陷的一种补救措施。一个结构设计理想的组织，应该没有任何会议。这一点有其深意。</p></li>
<li><p>重视贡献，就是重视有效性。这里是说，有效性是以目标导向的。重视所能够做出的贡献，并为了这些贡献而做努力，是通往有效性的必然途径。</p></li>
<li><p>管理工作所看的，只是一个人的优点。这是所有不掺杂私人关系的社会关系中所应该看重的东西。一个人的缺点重要，仅当这个人跟你有私人关系，你关心他的个人成长的时候才重要。</p></li>
</ul>


<h1>[箴言]彼得．德鲁克：管理者，就必须卓有成效</h1>

<ul>
<li><p>有效的管理者在用人所长的同时，必须容忍人之所短。</p></li>
<li><p>一个重视贡献的人，为成果负责的人，不管他职位多么卑微，仍属于“高层管理者”。</p></li>
<li><p>有效的管理者用人，是着眼于机会，而非着眼于问题。</p></li>
<li><p>有效的决策人，首先要辨明问题的性质:这是一再发生的经常性问题呢，还是偶然的例外?</p></li>
<li><p>有效的管理者不做太多的决策。他们所做的，都是重大的决策。</p></li>
<li><p>应该将行动纳入决策当中，否则就是纸上谈兵。</p></li>
<li><p>有效的管理者要的是决策所产生的影响，而非技巧;他们要的是合理有效的决策，而非乖巧的决策。</p></li>
<li><p>有效的管理者都知道，一项决策不是从搜集事实开始的，他们首先都有自己的见解。</p></li>
<li><p>我们该知道运用自己上司的长处，这也正是下属工作卓有成效的关键。</p></li>
<li><p>管理者，就必须卓有成效。</p></li>
<li><p>卓有成效是一种习惯，是通过不断训练达成的。</p></li>
<li><p>“认识你的时间”，只要你肯，这就是一条卓有成效之路。</p></li>
<li><p>管理者的一项具体任务，就是要把今天的资源投入到创造未来中去。</p></li>
<li><p>有效的管理者坚持把重要的事放在前面做，每次只做好一件事。</p></li>
<li><p>“专心”是一种勇气，就是敢于决定真正该做和真正先做的工作。</p></li>
</ul>


<p>reference：</p>

<p>[^1] <a href="http://www.jianshu.com/p/358ff4e67931">http://www.jianshu.com/p/358ff4e67931</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[互联网创业公司是否需要后端工程师]]></title>
    <link href="http://jqlblue.github.io/2015/03/30/does-startup-company-need-backend-development-engineer/"/>
    <updated>2015-03-30T18:05:00+08:00</updated>
    <id>http://jqlblue.github.io/2015/03/30/does-startup-company-need-backend-development-engineer</id>
    <content type="html"><![CDATA[<p>随着LeanCloud等<code>baas</code>云服务的兴起，对于一个互联网创业公司而言，是否还需要专门的后端工程师？</p>

<!-- more -->


<p>一个典型的web app的架构如下：</p>

<p><img src="http://jqlblue.github.io/images/baas/app_struct.png" title="web app典型架构" ></p>

<p>客户端或者浏览器调用后端服务，进行数据的写入和读取。让用户通过互联网，完成信息的交换。</p>

<p>以一个b-s结构的web服务为例，其前后端基本架构大致如下：</p>

<p><img src="http://jqlblue.github.io/images/baas/simple_web_struct.png" title="web 服务的前后端基本架构" ></p>

<p>前端主要负责用户界面的布局和交互处理，后端包括：</p>

<pre><code>1. 后端业务逻辑处理
2. 与前端用户界面进行相关交互
</code></pre>

<p>而一个要运行在生产环节下的后端服务架构，应该大致是下面这个样子：</p>

<p><img src="http://jqlblue.github.io/images/baas/web_struct.png" title="web web服务后端架构" ></p>

<p>后端服务并不是直接对数据库进行写入和查询操作，每一次到达后端服务的请求，都附带着自身的业务逻辑。</p>

<p>虽然我们可以剥离某些与业务不是强关联的模块，增加一层公共服务。但是由于每个公司商业模式和运营需求的限制，业务逻辑的<code>领域</code>特性，会一直存在。</p>

<p>而现在的<code>baas</code>等服务，主要提供的是数据存储、实时消息、统计分析以及扩展组件等基础公共服务。有了这些服务，的确满足业务需求的情况下，降低后端服务的开发成本。</p>

<p>互联网的核心价值是：</p>

<pre><code>平等，共享，透明，高度化的信息对称
快速和善变，强烈的交互式客户体验
</code></pre>

<p><code>信息</code>（数据）和<code>交互体验</code>（前端ui）都很重要。</p>

<p>当然，随着<code>baas</code>服务的发展，对于业务逻辑不是很复杂的互联网应用，的确可以完全使用<code>baas</code>服务替代现有的后端服务。但是这样就会把后端逻辑变成一个黑盒。出了问题只能等待baas服务提供商解决。</p>

<p>对于创业公司而言，在选择类似的服务时，需要根据自身的业务形态和人员配备等，在前期的人员投入，后期的维护成本以及业务的最终形态，系统的扩展性，数据的安全性等方面，进行权衡。</p>

<p>而身处创业公司的后端工程师，也需要积极了解行业动态，如果使用<code>baas</code>服务能满足业务需求的，也就没有必要再去重复开发。</p>

<blockquote><p>baas（Backend as a Service）</p></blockquote>

<p>即软件即服务，如APICloud，LeanCloud。</p>

<blockquote><p>paas（Platform as a Service）</p></blockquote>

<p>即平台即服务，如google的gae，sina的sae。</p>

<blockquote><p>laas（Infrastructure as a Service）</p></blockquote>

<p>即基础设施即服务，如亚马逊的aws，阿里云，腾讯云，linode。</p>

<blockquote><p>saas（Software as a Service）</p></blockquote>

<p>即软件即服务，如云盘。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[那个套模版的，放开你的F5]]></title>
    <link href="http://jqlblue.github.io/2015/02/28/release-f5-for-template-engineer/"/>
    <updated>2015-02-28T18:29:00+08:00</updated>
    <id>http://jqlblue.github.io/2015/02/28/release-f5-for-template-engineer</id>
    <content type="html"><![CDATA[<p>老江说过：“科学技术是第一生产力”。技术的魅力在于通过改善相关流程或者提供相关工具，对人们的生活进行改善，make live esaier。</p>

<!-- more -->


<p><em>对于自喻为模版工程师的同行们，套模版的流程大抵是：</em></p>

<pre><code>写代码，保存

打开浏览器，按F5刷新页面，检查相关前端效果
</code></pre>

<p>我记得<a href="http://weibo.com/yjf10">轩脉刃</a>曾经写过一个统计鼠标按键的小工具。如果对模版工程师工作时键盘的按键进行统计，那么F5的使用率肯定不容忽视。</p>

<p>倘若能在代码保存后就自动刷新浏览器，那不仅能解放模版工程师的F5按键，也能提升他们的开发效率。突然感觉非常美妙。</p>

<p>我记得有人说过，这个世界上不缺乏原创的idea，缺的只是一双能发现它的眼睛。</p>

<p>正如<code>livereload</code>所说的－“The Web Developer Wonderland”。</p>

<p>使用<code>livereload</code>，<em>通过如下几个步骤</em>，就可以做到当我们保存代码后，自动刷新浏览器中相关页面内容。</p>

<blockquote><p>安装livereload浏览器扩展</p></blockquote>

<p>相关浏览器扩展的下载地址如下：</p>

<p><a href="http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions">browser extensions</a></p>

<blockquote><p>安装livereload server端</p></blockquote>

<p>安装python环境，然后在终端执行</p>

<pre><code>pip install livereload
</code></pre>

<p>或者</p>

<pre><code>easy_install livereload
</code></pre>

<blockquote><p>启动livereload server端</p></blockquote>

<p>假设我的代码目录在<code>/home/galendy/code/demo</code>，在终端执行</p>

<pre><code>livereload /home/galendy/code/demo
</code></pre>

<blockquote><p>点击浏览器扩展</p></blockquote>

<p><code>livereload</code>的基本原理是：</p>

<pre><code>livereload server端会启动本地的socket服务（默认开放本地的35729端口），当监听的目录下的文件内容有变化时，向该socket写入数据

livereload浏览器扩展会连接本地的35729端口，当有新消息到来时，会在浏览器中插入一段js代码，刷新当前页面
</code></pre>

<p>实际上，前端工程师还会使用<code>livereload</code>完成css，js等文件的合并和压缩。想要了解更多，请参考：</p>

<p><a href="http://livereload.com/">livereload</a></p>

<p><a href="http://livereload.readthedocs.org/en/latest/">python livereload</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[互联网信息分类方法]]></title>
    <link href="http://jqlblue.github.io/2015/01/25/categorize-web-information/"/>
    <updated>2015-01-25T19:12:00+08:00</updated>
    <id>http://jqlblue.github.io/2015/01/25/categorize-web-information</id>
    <content type="html"><![CDATA[<p>目前，虽然搜索已经代替分类目录（google颠覆yahoo模式）成为人们获取信息的主要途径，但是没有好的信息分类，再好的搜索也是白搭。只有信息足够格式化，标准化，搜索才有效。即分类提升展示逻辑，搜索输出内容结果。</p>

<!--more-->


<h1>如何判定分类的好坏</h1>

<p>一个好的分类方法需要做到如下几点：</p>

<ul>
<li>能够涵盖集合中的所有元素</li>
<li>类和类之间不能重叠</li>
<li>能够比较容易地为每一个元素找到其对应的分类</li>
</ul>


<h1>常见的分类方法</h1>

<h2>分类之前的准备工作</h2>

<p>在对信息进行分类之前，可以先做如下几件事：</p>

<h5>1. 明确如下问题</h5>

<p>信息如何产生？如何组织关联？通过什么渠道传播？</p>

<h5>2. 观察别人</h5>

<p>可以去一家真正的商店看看，或者参观一座图书馆，还可以拜访竞争对手的商店。</p>

<h5>3. 研究竞争对手</h5>

<p>访问竞争对手的网站。他们是怎样组织信息的？要对多种组织方案加以比较。存在哪些相似之外？又有哪些区别？要尽量明确竞争对手为什么做出那样的选择。这是失误还是明智之举？你甚至可以对他们的网站做可用性测试，从而发现其组织方案中哪些方面奏效，哪些部分没有意义。</p>

<h2>常见的分类方法</h2>

<h5>1. 主题分类法</h5>

<p>主题分类法的特征是选择某一个主题作为一阶类目，在一阶类目下又可分若干二阶类目，二阶类目下再分若干三阶类目，形成一个大的树形结构。同阶的类目按照字顺排序。</p>

<p>由于网络资源数不胜数，所以一般会选取14-24个热点事物作为一阶分类，分类的阶数为3到6级。</p>

<p>其优点是可以将事物相关的内容全部集中在一起。如汽车大类下可包含汽车制造，交易，保养，维修，赛车等等子类目。但是容量较小，对网络资源的覆盖率有限。</p>

<h5>2. 分面分类法</h5>

<p>分面分类法是根据实物都具有多维度的特征而建立的。可以将信息分成定义明确、互斥的区域。常见的是按字母顺序、按年表、按地理位置等分类。也可按照如下类型进行分类：</p>

<ul>
<li>按主题；设计时需要定义好内容的范围，注意涵盖面的广度</li>
<li>按任务；将内容和应用程序组织成流程、功能或工作的集合。最常见的是电商网站</li>
<li>按用户；如果用户群可以界定的比较清楚，可以提供很好的个性化服务，但模糊性依然存在，对系统“猜测”的要求很高</li>
<li>按隐喻；多用于游戏</li>
<li>混用以上类型</li>
</ul>


<h5>3. 卡片分类法</h5>

<p>卡片分类就是把类似的东西放在一起。</p>

<ul>
<li>把你收集的各种信息整理出来写在卡片上。(如果没有，可以用一堆CD或者照片代替，可以是任何东西，只要数量足够多，可以零乱散落在地板上)</li>
<li>把所有卡片从盒子里倒在地板上。</li>
<li>把所有卡片从盒子里倒在地板上。</li>
<li>现在开始分组。如果你看到某些东西与另外一些东西相像，就把它们放在一起。</li>
<li>最后，当分组完毕时，再拿一些背面有胶的便条标出每一个堆的名称，分类完毕。</li>
</ul>


<h5>4. 公众分类法</h5>

<p>所谓&#8221;公众分类法&#8221;，就是由公众来为信息贴加标签（tagging），被使用最多的标签就最能说明这条信息的特点。</p>

<p>使用标签分类，非常的便捷，而且易于组合，但是也存在一些问题：</p>

<ul>
<li>不同的用户对相同的标签，往往有不同的理解，比如在&#8221;工具&#8221;标签下，可能会发现彼此完全没有关系的内容。</li>
<li>同义词问题。用户可能使用同义词作为标签，比如&#8221;tv/television&#8221;，&#8221;Holland/Netherlands/Dutch&#8221;，&#8221;超级女生/超女&#8221;。英语中，还存在复数问题。</li>
<li>词的多义性问题。比如&#8221;china&#8221;这个标签，到底指中国，还是指瓷器。</li>
<li>用户的标签五花八门，可能会产生大量&#8221;噪音&#8221;，加重系统负担，降低分类的准确性。</li>
</ul>


<p>所以，最好的解决方法应该是，自上而下的目录分类法与标签式的公众分类法相结合，然后对能够用作标签的词汇进行控制（controlled vocabulary），不能什么词都用来当标签。</p>

<h1>实施建议</h1>

<ul>
<li>尝试按照主题分类和分面分类发进行分类</li>
<li>试试卡片分类</li>
<li>使用2的标准去判定分类是否合理</li>
<li>如果单纯的分类无法解决问题，考虑下打标签（公众分类法）</li>
</ul>


<p>reference：</p>

<p>[^1] <a href="http://zhanglichuan.me/resolve-ia">http://zhanglichuan.me/resolve-ia</a></p>

<p>[^2] <a href="http://www.ruanyifeng.com/blog/2007/01/categories.html">http://www.ruanyifeng.com/blog/2007/01/categories.html</a></p>

<p>[^3] <a href="http://www.uegeek.com/reading/web_ia_note">http://www.uegeek.com/reading/web_ia_note</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年总结－但行好事，莫问前程]]></title>
    <link href="http://jqlblue.github.io/2014/12/31/user-nginx-proxy-cache-mirror-website/"/>
    <updated>2014-12-31T10:28:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/12/31/user-nginx-proxy-cache-mirror-website</id>
    <content type="html"><![CDATA[<p>2014年，是特别的一年。对于码农而言，这一年的过去，可以当作是第二个千年的结束。当然，也将是新千年的开始，期待ing。</p>

<!-- more -->


<p>这一年，有个同学博士毕业，还有一个同学荣升副教授。最重要的是，乘着2014的小尾巴，我们迎接到了一个新生命的降临。hello world！</p>

<p>这本是一篇技术博文，但是相对于技术而言，有些东西会更重要一些。</p>

<p>科技改变生活，技术本来就是为了让生活更美好，让大家能活着更容易些，莫忘初心。</p>

<p>分享点技术之外的东西，希望能走地更远，不管是在技术的道路上，还是非技术的道路上。</p>

<p>虽然在有生之年，可以很难达到那种境界，但是尽力去向那个境界靠拢。</p>

<p>但行好事，莫问前程。</p>

<p>谋事在人，成事在天，尽力就好，人能做的，大抵只能如此。</p>

<blockquote><p>以下内容，摘自特兰修女箴言 － From Mother Theresa</p></blockquote>

<p>人们经常是不讲道理的、没有逻辑的和以自我为中心的
不管怎样，你要原谅他们</p>

<pre><code>People are often unreasonable, illogical and self-centered; Forgive them anyway.
</code></pre>

<p>即使你是友善的，人们可能还是会说你自私和动机不良
不管怎样，你还是要友善</p>

<pre><code>If you are kind, people may accuse you of selfish, ulterior motives; Be kind anyway.
</code></pre>

<p>当你功成名就，你会有一些虚假的朋友
和一些真实的敌人
不管怎样，你还是要取得成功</p>

<pre><code>If you are successful, you will win some false friends And some true enemies; Succeed anyway.
</code></pre>

<p>即使你是诚实的和率直的，人们可能还是会欺骗你
不管怎样，你还是要诚实和率直</p>

<pre><code>If you are honest and frank, people may cheat you; Be honest and frank anyway.
</code></pre>

<p>你多年来营造的东西
有人在一夜之间把它摧毁
不管怎样，你还是要去营造</p>

<pre><code>What you spend years building, Someone could destroy overnight; Build anyway.
</code></pre>

<p>如果你找到了平静和幸福，他们可能会嫉妒你
不管怎样，你还是要快乐</p>

<pre><code>If you find serenity and happiness, they may be jealous; Be happy anyway.
</code></pre>

<p>你今天做的善事，人们往往明天就会忘记
不管怎样，你还是要做善事</p>

<pre><code>The good you do today, people will often forget tomorrow; Be good anyway.
</code></pre>

<p>即使把你最好的东西给了这个世界
也许这些东西永远都不够
不管怎样，把你最好的东西给这个世界</p>

<pre><code>Give the world the best you have, And it may never be enough; Give the world the best you have anyway.
</code></pre>

<p>你看，说到底，它是你和上帝之间的事
而决不是你和他人之间的事</p>

<pre><code>You see, in the final analysis, it is between you and God; It is never between you and them anyway.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一周打造支付系统]]></title>
    <link href="http://jqlblue.github.io/2014/11/23/build-payment-system-in-one-week/"/>
    <updated>2014-11-23T14:34:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/11/23/build-payment-system-in-one-week</id>
    <content type="html"><![CDATA[<p>获取食物的最佳方式就是处于食物链的顶端，以捕食该链条之下的所有动植物。不言而喻，搭建处于资金流顶端的支付系统，伴随资金的转移过程，也是积累财富的绝佳手段。</p>

<!-- more -->


<h1>一般网购流程</h1>

<p><img src="http://jqlblue.github.io/images/payment/shopping_flow.png" title="shopping flow" ></p>

<p>一般的网购流程如上图：</p>

<ul>
<li>商品筛选</li>
<li>将选中的商品添加到购物车（顾名思义，推着车去购物。如果只卖一个商品的话，可以省略这步）</li>
<li>确认要购买物品，去结算</li>
<li>下订单，即提交要结算物品的清单</li>
<li>网上支付该订单</li>
</ul>


<h1>支付流程</h1>

<p><img src="http://jqlblue.github.io/images/payment/flow.jpg" title="payment flow" ></p>

<p>一个典型的支付流程如上图。</p>

<p>用户下单时，订单系统需要和产品库交互，生成支付连接。支付系统对请求地址进行验签之后，调用第三方平台的支付接口进行支付，然后更新订单状态。在订单成功支付之后，更新产品库存信息。</p>

<p>属于支付系统的功能有：</p>

<ul>
<li>请求参数验签</li>
<li>第三方支付接口对接</li>
<li>订单系统对接</li>
</ul>


<blockquote><p>只要完成与第三方支付接口的对接，即可解决搭建支付系统中最难啃的一块硬骨头。</p></blockquote>

<h1>第三方支付平台</h1>

<p>目前比较流行的第三方支付平台主要有：</p>

<ul>
<li>支付宝</li>
<li>财付通</li>
<li>快钱</li>
<li>网银在线</li>
<li>微信支付</li>
</ul>


<p>对于网银支付，可以调用银联的接口，或者直接对接银行（可以降低手续费，支持大额等个性化支付方法。但是实现成本较高）。</p>

<p>虽然支付宝的手续费不是最实惠的，但是支付宝本身对接了个大银行的网银支付，而我们的目标是一周打造支付系统，当然选择最省事的。</p>

<p>对接支付宝支付接口的流程如下：</p>

<p><img src="http://jqlblue.github.io/images/payment/zhifubao.jpg" title="支付宝对接" ></p>

<p>完成<code>技术集成</code>之前的工作，理论上需要8-10个工作日，所以需要提前申请。</p>

<p>最好找商务部的同事出马，不要怕麻烦boss。有问题，及时向组织反馈。</p>

<h1>支付宝接口</h1>

<p>与支付宝接口的交互流程如下</p>

<p><img src="http://jqlblue.github.io/images/payment/zhifubao_flow.jpg" title="支付宝接口交互流程" ></p>

<p>支付宝提供的sdk，主要包含如下文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alipay_core.function.php -- 支付宝接口公用函数，是请求、通知返回两个文件所调用的公用函数核心处理文件
</span><span class='line'>alipay_md5.function.php  -- MD5加密
</span><span class='line'>alipay_notify.class.php  -- 支付宝通知处理类，处理支付宝各接口通知返回
</span><span class='line'>alipay_submit.class.php  -- 支付宝各接口请求提交类，构造支付宝各接口表单HTML文本，获取远程HTTP数据</span></code></pre></td></tr></table></div></figure>


<p><em>要调用的方法</em></p>

<ul>
<li>提交订单时，调用<code>alipay_submit.class.php</code>中的<code>buildRequestUrl</code>方法，同时，需要注册通知回调<code>return_url</code>和<code>notify_url</code>。</li>
</ul>


<p>其中：</p>

<pre><code>return_url是同步回调，一般用于在支付成功后，调转至支付成功页。
notify_url是异步回调，一般用于更新订单状态等等（支付宝有相关队列服务运行异步回调，回调失败后，会以不定的间隔进行重试）。
</code></pre>

<ul>
<li>在通知回调时，都需要调用<code>alipay_notify.class.php</code>中的<code>verifyReturn</code>验证回调的合法性。</li>
</ul>


<h1>ssl证书</h1>

<p>俗话说，没有买卖就没有杀戮。凡是涉及利益的地方，就不会很安全。使用采用http进行数据通讯，难免发生如下问题：
<img src="http://jqlblue.github.io/images/payment/http_flow.jpg" title="中间人攻击" ></p>

<p>但是换成https，会有如下好处：</p>

<p><img src="http://jqlblue.github.io/images/payment/https_2.jpg" title="http ssl" ></p>

<p><img src="http://jqlblue.github.io/images/payment/https_3.jpg" title="https flow" ></p>

<p>申请ssl证书，推荐数字公司使用的<a href="http://www.wosign.com/price.htm">WoSign超真 SSL</a>。</p>

<p><img src="http://jqlblue.github.io/images/payment/ssl.jpg" title="ssl" ></p>

<h1>请求验签</h1>

<p>请求参数签名，需要使用可逆加密算法。其中又分为：</p>

<ul>
<li>对称加解密算法</li>
<li>非对称加解密算法</li>
</ul>


<p>对称加解密算法，在加密和解密时都使用一个密钥，加解密性能较好。但安全性较低（密钥只要被拿到，就gameover）。</p>

<p>非对称加解密算法，一般使用私钥加密，公钥解密。其安全性较好（只要保存好私钥就行），但是性能较差。</p>

<p>所以可以使用对称加解密算法加密请求参数。但加解密时，不使用同一个密钥。相关密钥，通过非对称加解密算法加密后，在请求参数中传递。</p>

<p>解密流程如下：</p>

<pre><code>1. 在请求参数中获取使用非对称加解密算法加密的密钥ekey
2. 使用非对称加解密算法解密密钥ekey为dkey
3. 使用对称加解密算法和dkey，解密请求参数
</code></pre>

<h1>订单</h1>

<p>我们用一周打造的支付系统，不能是一个远在云端的架构，而要是一个可运行的系统。那么，订单自然也少不了。</p>

<p>订单是按照如下对应关系产生的：</p>

<pre><code>用户 -&gt; 商品 -&gt; 订单
</code></pre>

<p>在整个支付过程中，一般要存在两个订单号：</p>

<ul>
<li>用于在内部系统（订单，支付，个人中心）中流通的订单号 <code>order_no</code>，在每一次下单时产生。</li>
<li>用于支付的订单号 <code>pay_order_no</code>，由 <code>order_no</code> ＋ 时间戳 ＋ salt等，在每一次支付时产生。</li>
</ul>


<h1>联调部署</h1>

<p>开发阶段涉及的模块可做如下划分：</p>

<ul>
<li>产品页</li>
<li>支付页</li>
<li>支付</li>
<li>订单</li>
<li>个人中心</li>
<li>测试，部署上线</li>
</ul>


<p>衡量一个互联网的标准有：功能，交互，ui。</p>

<p>因为我们的目标是一周内打造支付，那么，优先是完成支付和订单。至于是否要在产品页添加购物车，是否要在订单支付页面保存配送地址，是否要在个人中心对接物流，以及退款等等，都可以暂时砍掉。</p>

<p>互联网产品，唯快不破。快速上线，快速迭代。</p>

<h1>The Hole</h1>

<p>开发过程中，难免会遇到不少坑，特此纪录，希望帮助有缘人。</p>

<ul>
<li>产品金额存储</li>
</ul>


<p>为了避免因退款，对账时，和银行或者第三方支付平台产生因为数据精度而舍入等问题，可以将产品金额以<code>分</code>为单位存储，前台展示时除以100。</p>

<ul>
<li>需要两个订单号</li>
</ul>


<p>支付宝等第三方平台，对订单号有验证，一个订单号只能支付一次。所以系统中需要存在两个订单号，一个用于内部系统流通，一个用于支付，每次支付时都产品一个最新的（与内部系统流通的订单号有对应关系）。</p>

<ul>
<li>权限验证</li>
</ul>


<p>下单，或者支付完成后，在个人中心等位置，一般可以查看订单状态。此时需要注意，需要增加权限验证。否则会产生平行权限安全漏洞（可查看别人的订单等信息）</p>

<ul>
<li>系统安全性</li>
</ul>


<p>在支付和个人中心等页面，因为存在前后端交互。所以需要排查，是否存在sql注入或者xss等安全漏洞。推荐<code>XSScrapy</code>和<code>SqlMap</code>。</p>

<ul>
<li>日志</li>
</ul>


<p>在整个交易过程中，需要有完善详尽的日志记录。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用graphite和cabot搭建监控服务]]></title>
    <link href="http://jqlblue.github.io/2014/10/01/use-graphite-and-alter-build-monitor-system/"/>
    <updated>2014-10-01T09:43:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/10/01/use-graphite-and-alter-build-monitor-system</id>
    <content type="html"><![CDATA[<p>说起监控，我们一般会首先想到<code>zabbix</code>，<code>nagios</code>，<code>ganglia</code>等等。但是对于非<code>ops</code>开发人员而言，这些东西，多多少少让人感到陌生。所以本文将从一个<code>服务端开发人员</code>的视角，介绍如何通过<code>graphite</code>，<code>cabot</code>，加一个<code>shell</code>定时脚本，搭建监控报警服务。</p>

<!-- more -->


<h1>python环境安装</h1>

<p>虽然linux系统上一般都有python环境，但是默认的python版本较低。而且<code>yum</code>等系统工具，都依赖于默认的python。所以推荐的做法是再安装一个python，并使用<code>virtualenv</code>等工具，分项目进行环境管理，并与系统默认的python环境进行隔离。</p>

<p>以python2.7.3为例，介绍python环境的安装。</p>

<h2>安装步骤</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo yum install bzip2-devel.x86_64
</span><span class='line'>sudo yum install sqlite-devel.x86_64
</span><span class='line'>sudo yum install readline-devel.x86_64
</span><span class='line'>sudo yum install openssl-devel.x86_64
</span><span class='line'>
</span><span class='line'>wget http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2
</span><span class='line'>tar jxvf Python-2.7.3.tar.bz2
</span><span class='line'>cd Python-2.7.3
</span><span class='line'>./configure --prefix=/usr/local/python2.7.3
</span><span class='line'>make && sudo make install
</span><span class='line'>
</span><span class='line'>cd ..
</span><span class='line'>wget https://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz --no-check-certificate
</span><span class='line'>tar zxvf distribute-0.6.49.tar.gz
</span><span class='line'>cd distribute-0.6.49
</span><span class='line'>sudo /usr/local/python2.7.3/bin/python setup.py install
</span><span class='line'>sudo /usr/local/python2.7.3/bin/easy_install pbr
</span><span class='line'>
</span><span class='line'>cd ..
</span><span class='line'>wget https://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.10.1.tar.gz --no-check-certificate
</span><span class='line'>tar zxvf virtualenv-1.10.1.tar.gz
</span><span class='line'>cd virtualenv-1.10.1
</span><span class='line'>sudo /usr/local/python2.7.3/bin/python setup.py install
</span><span class='line'>sudo /usr/local/python2.7.3/bin/easy_install virtualenvwrapper</span></code></pre></td></tr></table></div></figure>


<blockquote><p>如果遇到 [FATAL] Failed to create text with cairo, this probably means cairo cant find any fonts. Install some system fonts and try again。可以尝试安装bitmap font。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo yum install bitmap.x86_64
</span><span class='line'>sudo yum install bitmap-fonts-compat.noarch</span></code></pre></td></tr></table></div></figure>


<h2>相关配置</h2>

<ul>
<li>创建管理python环境的用户</li>
</ul>


<p>为了便于环境的统一管理，创建一个普通用户进行新创建python环境的管理和相关python扩展的安装。同时，向数字公司的<code>addops</code>们致敬。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>useradd appops</span></code></pre></td></tr></table></div></figure>


<ul>
<li>创建python环境安装目录</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mkdir -p /data/server/python-envs
</span><span class='line'>sudo chown -R appops.appops /data/server</span></code></pre></td></tr></table></div></figure>


<ul>
<li>配置新安装的python2.7.3环境</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo su appops -c 'vim ~/.bashrc'</span></code></pre></td></tr></table></div></figure>


<p>添加如下内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export WORKON_HOME=/data/server/python-envs
</span><span class='line'>export VIRTUALENVWRAPPER_PYTHON=/usr/local/python2.7.3/bin/python
</span><span class='line'>export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/python2.7.3/bin/virtualenv
</span><span class='line'>source /usr/local/python2.7.3/bin/virtualenvwrapper.sh</span></code></pre></td></tr></table></div></figure>


<h1>搭建graphite监控服务</h1>

<h2>安装步骤</h2>

<ul>
<li>创建安装目录</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mkdir /opt/graphite
</span><span class='line'>sudo chown -R appops.appops /opt/graphite</span></code></pre></td></tr></table></div></figure>


<ul>
<li>创建python虚拟环境</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo su appops
</span><span class='line'>source ~/.bashrc
</span><span class='line'>mkvirtualenv graphite</span></code></pre></td></tr></table></div></figure>


<ul>
<li>graphite安装</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pip install whisper
</span><span class='line'>pip install carbon
</span><span class='line'>pip install graphite-web
</span><span class='line'>pip install django==1.5
</span><span class='line'>pip install django-tagging
</span><span class='line'>pip install uwsgi
</span><span class='line'>pip install MySQL-python
</span><span class='line'>pip install daemonize</span></code></pre></td></tr></table></div></figure>


<p>graphite使用<code>cairo</code>进行绘图，由于系统自带的cairo版本较低（需要cairo1.10以上），使用pip安装cairo会出错，所以采用编译安装。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://cairographics.org/releases/pycairo-1.8.8.tar.gz
</span><span class='line'>tar zxvf pycairo-1.8.8.tar.gz
</span><span class='line'>python -c "import sys; print sys.prefix"
</span><span class='line'>cd pycairo-1.8.8
</span><span class='line'>./configure --prefix=/data/server/python-envs/graphite
</span><span class='line'>make
</span><span class='line'>make install</span></code></pre></td></tr></table></div></figure>


<ul>
<li>目录说明</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bin -- 数据收集相关工具
</span><span class='line'>conf -- 数据存储相关配置文件
</span><span class='line'>    carbon.conf -- 数据收集carbon进程涉及的配置
</span><span class='line'>    dashboard.conf -- Dashboard UI相关配置
</span><span class='line'>    graphite.wsgi -- wsgi相关配置
</span><span class='line'>    storage-schemas.conf -- Schema definitions for Whisper files
</span><span class='line'>    whitelist.conf -- 定义允许存储的metrics白名单
</span><span class='line'>    graphTemplates.conf -- 图形化展示数据时使用的模板
</span><span class='line'>examples -- 示例脚本
</span><span class='line'>lib -- carbon和twisted库
</span><span class='line'>storage -- 数据文件存储目录
</span><span class='line'>webapp -- 数据前端展示涉及程序</span></code></pre></td></tr></table></div></figure>


<h2>配置Graphite-web</h2>

<ul>
<li>初始化配置文件</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /opt/graphite/webapp/graphite
</span><span class='line'>cp local_settings.py.example local_settings.py
</span><span class='line'>cp /opt/graphite/conf/graphite.wsgi.example /opt/graphite/conf/graphite.wsgi
</span><span class='line'>cp /opt/graphite/conf/graphTemplates.conf.example /opt/graphite/conf/graphTemplates.conf
</span><span class='line'>cp /opt/graphite/conf/dashboard.conf.example /opt/graphite/conf/dashboard.conf</span></code></pre></td></tr></table></div></figure>


<p>修改或者增加如下配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TIME_ZONE
</span><span class='line'>DEBUG
</span><span class='line'>SECRET_KEY
</span><span class='line'>DATABASES</span></code></pre></td></tr></table></div></figure>


<p>示例配置文件<a href="https://gist.github.com/jqlblue/88f8a9b14bbe4bae3666">local_settings.py</a></p>

<ul>
<li>初始化数据库</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python manage.py syncdb</span></code></pre></td></tr></table></div></figure>


<ul>
<li>启动graphite-web</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>uwsgi --http localhost:8085 --master --processes 1 --home /data/server/python-envs/graphite --pythonpath /opt/graphite/webapp/graphite --wsgi-file=/opt/graphite/conf/graphite.wsgi --enable-threads --thunder-lock</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jqlblue.github.io/images/graphite/web.jpg" title="graphite web" ></p>

<h2>配置数据收集服务</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp /opt/graphite/conf/carbon.conf.example /opt/graphite/conf/carbon.conf
</span><span class='line'>cp /opt/graphite/conf/storage-schemas.conf.example /opt/graphite/conf/storage-schemas.conf
</span><span class='line'>cp /opt/graphite/conf/whitelist.conf.example /opt/graphite/conf/whitelist.conf</span></code></pre></td></tr></table></div></figure>


<p>编辑<code>/opt/graphite/lib/carbon/util.py</code>，将</p>

<pre><code>from twisted.scripts._twistd_unix import daemonize
</code></pre>

<p>替换成</p>

<pre><code>import daemonize
</code></pre>

<p>否则启动cabon时会遇到<code>ImportError: cannot import name daemonize</code>。</p>

<ul>
<li>配置存储白名单</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim /opt/graphite/conf/whitelist.conf</span></code></pre></td></tr></table></div></figure>


<p>添加</p>

<pre><code>^test\..*
^server\..*
</code></pre>

<p>即只存储以<code>test.</code>和<code>server.</code>开头的metrics。</p>

<ul>
<li>配置存储Schemas</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim /opt/graphite/conf/storage-schemas.conf</span></code></pre></td></tr></table></div></figure>


<p>添加</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[server]
</span><span class='line'>pattern = ^server\..*
</span><span class='line'>retentions = 60s:1d,5m:7d,15m:3y
</span><span class='line'>
</span><span class='line'>[default]
</span><span class='line'>pattern = ^test\..*
</span><span class='line'>retentions = 60s:1d,5m:7d</span></code></pre></td></tr></table></div></figure>


<p>上面的配置，会对于<code>test.</code>开头的metrics，以60秒为精度存储一天，以5分钟为精度存储7天。即查询一天内的数据时，可以精确到1分钟，查询7天内的数据时，只能精确到5分钟。</p>

<ul>
<li>启动cabon</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python /opt/graphite/bin/carbon-cache.py --config=/opt/graphite/conf/carbon.conf --debug start</span></code></pre></td></tr></table></div></figure>


<h1>收集监控数据</h1>

<p>etsy开源了一个叫<a href="https://github.com/etsy/statsd">statsd</a>的daemon，可用于将监控数据收集到graphite，但那玩意是nodejs写的。</p>

<p>为了保持方案的简单，采用<code>crontab</code>的方式，利用<a href="https://gist.github.com/jqlblue/c7473473f8a7357167b8">shell脚本</a>将要收集的数据通过udp协议直接发送至graphite。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>HOST=$(hostname | awk -F'.' '{print $1}')
</span><span class='line'>IDC="local"
</span><span class='line'>
</span><span class='line'>SYSTEM_LOAD=$(awk '{print $1}' /proc/loadavg)
</span><span class='line'>SYSTEM_MEMORY_FREE=$(free -m | grep 'buffers/cache' | awk '{print $NF}')
</span><span class='line'>SYSTEM_SWAP_USE=$(free -m | grep 'Swap' | awk '{print $(NF-1)}')
</span><span class='line'>SYSTEM_DISK_USED=$(df -h | grep '/' | awk 'BEGIN{_max=0}{len=length($5);i=substr($5,0,len-1);if(_max&lt;i){_max=i}}END{print _max}')
</span><span class='line'>
</span><span class='line'>TIMESTAMP=$(date +%s)
</span><span class='line'>
</span><span class='line'>### send to garphite through udp port 2003 ########
</span><span class='line'>echo -n "server.$IDC.$HOST.system.load $SYSTEM_LOAD $TIMESTAMP" &gt; /dev/udp/127.0.0.1/2003
</span><span class='line'>echo -n "server.$IDC.$HOST.system.memory_free $SYSTEM_MEMORY_FREE $TIMESTAMP" &gt; /dev/udp/127.0.0.1/2003
</span><span class='line'>echo -n "server.$IDC.$HOST.system.swap_used $SYSTEM_SWAP_USED $TIMESTAMP" &gt; /dev/udp/127.0.0.1/2003
</span><span class='line'>echo -n "server.$IDC.$HOST.system.disk_used $SYSTEM_DISK_USED $TIMESTAMP" &gt; /dev/udp/127.0.0.1/2003</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jqlblue.github.io/images/graphite/data-view.jpg" title="graphite monitor data view" ></p>

<p><em>监控数据收集和展示流图</em></p>

<p><img src="http://jqlblue.github.io/images/graphite/data-flow.jpg" title="graphite monitor data flow" ></p>

<h1>搭建cabot报警服务</h1>

<p><code>cabot</code>是一个轻量级的监控报警服务。其报警可以基于：</p>

<pre><code>graphite收集的监控数据
url的响应内容和状态码
jenkins编译任务的状态
</code></pre>

<ul>
<li>安装依赖</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem sources --remove http://rubygems.org/
</span><span class='line'>sudo gem sources -a http://ruby.taobao.org/
</span><span class='line'>sudo gem install foreman</span></code></pre></td></tr></table></div></figure>


<blockquote><p>因为foreman要求ruby版本需要在1.9.3以上，如果系统自带ruby版本过低，可以通过rvm安装ruby，再安装foreman。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo yum install npm
</span><span class='line'>sudo npm install -g coffee-script less@1.3 --registry http://registry.npmjs.org/</span></code></pre></td></tr></table></div></figure>


<ul>
<li>初始化目录</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo su appops
</span><span class='line'>mkdir /data/server/alter
</span><span class='line'>cd /data/server/alter
</span><span class='line'>mkvirtualenv cabot</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装cabot</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/arachnys/cabot.git
</span><span class='line'>cd cabot
</span><span class='line'>cp conf/development.env.example conf/development.env</span></code></pre></td></tr></table></div></figure>


<p>修改<a href="https://gist.github.com/jqlblue/165d50a949cd4aae2191">setup.py</a>，添加</p>

<pre><code>'MySQL-python==1.2.5',
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python setup.py install
</span><span class='line'>/bin/sh ./setup_dev.sh</span></code></pre></td></tr></table></div></figure>


<ul>
<li>配置cabot</li>
</ul>


<p>使用foreman启动cabot时，会先读取<code>.foreman</code></p>

<pre><code># vi: set ft=yaml :

procfile: Procfile.dev
env: conf/development.env
</code></pre>

<p><code>Procfile.dev</code>内容如下：</p>

<pre><code>web:       python manage.py runserver 0.0.0.0:$PORT
celery:    celery -A cabot worker --loglevel=DEBUG -B -c 8 -Ofair
</code></pre>

<p>其中定义了启动cabot-web和celery任务队列时使用的命令，针对不同的环境，可以酌情修改<code>.foreman</code>和对应的<code>procfile</code>及<code>env</code>。</p>

<p>对于邮件报警，需要修改<a href="https://gist.github.com/jqlblue/a6329a7649be16e92df4">conf/development.env</a>中的如下内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DATABASE_URL -- 数据库配置
</span><span class='line'>TIME_ZONE -- 时区
</span><span class='line'>ADMIN_EMAIL
</span><span class='line'>CABOT_FROM_EMAIL
</span><span class='line'>CELERY_BROKER_URL -- celery任务队列配置
</span><span class='line'>SES_HOST -- smtp host
</span><span class='line'>SES_USER -- 发送邮件的用户
</span><span class='line'>SES_PASS -- 发送邮件用户的密码
</span><span class='line'>SES_PORT -- smtp port</span></code></pre></td></tr></table></div></figure>


<ul>
<li>启动cabot</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nohup foreman start 2&gt;&1 &gt; /dev/null &</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jqlblue.github.io/images/graphite/cabot_service.jpg" title="cabot service" ></p>

<p><img src="http://jqlblue.github.io/images/graphite/cabot_service_check.jpg" title="cabot service check" ></p>

<p><img src="http://jqlblue.github.io/images/graphite/cabot_service_check_detail.jpg" title="cabot service check detail" ></p>

<p>reference：</p>

<p>[^1] <a href="http://graphite.readthedocs.org/en/latest/overview.html">http://graphite.readthedocs.org/en/latest/overview.html</a></p>

<p>[^2] <a href="http://cabotapp.com/qs/quickstart.html">http://cabotapp.com/qs/quickstart.html</a></p>

<p>[^3] <a href="https://gist.github.com/jirutka/8636572">https://gist.github.com/jirutka/8636572</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[电商相关概念整理]]></title>
    <link href="http://jqlblue.github.io/2014/09/22/e-commerce-idea-collection/"/>
    <updated>2014-09-22T10:24:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/09/22/e-commerce-idea-collection</id>
    <content type="html"><![CDATA[<h2>电子商务模式</h2>

<p>电子商务模式是指企业运用互联网，通过基于一定技术基础的商务运作方式开展经营取得营业收入的基本方式。</p>

<!-- more -->


<p>主要可以分为以下四种类型：</p>

<ul>
<li>B2C（Business to Consumer），即企业与消费者之间的电子商务，如京东。</li>
<li>B2B（Business to Business），即企业与企业之间的电子商务，如阿里巴巴</li>
<li>C2C（Consumer to Consumer），即消费者与消费者之间的电子商务，如淘宝。</li>
<li>O2O（Online To Offline），即线下商务与互联网之间的电子商务，如美乐乐，其O2O模式具体表现为线上家具网与线下体验馆的双平台运营。</li>
</ul>


<p>C2C商务平台就是通过为买卖双方提供一个在线交易平台，使卖方可以主动提供商品上网拍卖，而买方可以自行选择商品进行竞价。</p>

<p>O2O模式下，线下服务就可以用线上来揽客，消费者可以用线上来筛选服务，还有成交可以在线结算，很快达到规模。该模式最重要的特点是：推广效果可查，每笔交易可跟踪</p>

<h2>电商网站解决方案</h2>

<p>电商网站中 C 端用户操作路径大致如下：</p>

<pre><code>商品浏览 -》 下单 -》支付 -》订单查看 -》退货
</code></pre>

<p>结合 B 端用户的操作，整套电商系统会涉及：</p>

<h3>前台系统</h3>

<ul>
<li>产品展示</li>
<li>个人中心（支付，订单，购物车，积分系统）</li>
<li>搜索，推荐</li>
<li>用户反馈交流（客服系统，社区）</li>
</ul>


<h3>运营管理后台</h3>

<ul>
<li>商品管理</li>
<li>商户管理</li>
<li>库存管理</li>
<li>支付管理</li>
<li>订单管理</li>
<li>配送物理管理</li>
<li>用户权限管理</li>
<li>数据统计分析</li>
<li>营销推广管理，如SEO，促销，广告</li>
<li>前台内容管理系统</li>
</ul>


<h3>基础服务</h3>

<ul>
<li>数据存储（日志，图片，商品信息）</li>
<li>监控报警</li>
<li>日志收集</li>
<li>消息系统</li>
<li>队列服务</li>
</ul>


<p>会员通过推荐，搜索，分类检索等功能，进行商品的浏览。通过浏览，会员将感兴趣的商品加入购物车，并进行支付处理。</p>

<p>会员在个人中心可以查看相关订单的处理状态，如：是否支付成功，是否配送等信息。对于不满意的商品，可以进行退换货处理。</p>

<p>在B 端的管理后台，有相关权限的管理员，可以进行商品管理，对订单进行处理。结合统计分析和营销推广，评出热销商品等等。</p>

<h3>可供参考的系统架构示例</h3>

<p><img src="http://jqlblue.github.io/images/e-commerce/e_1.png" title="电商平台基础技术架构" >
<img src="http://jqlblue.github.io/images/e-commerce/e_2.png" title="电商平台技术架构" ></p>

<p><img src="http://jqlblue.github.io/images/e-commerce/e_3.png" title="电商平台系统图" ></p>

<h2>技术架构非功能性指标</h2>

<h3>1. 系统效率</h3>

<ul>
<li>空间换时间（多级缓存，静态化，索引）</li>
<li>并行与分布式计算（map-reduce，多线程，多进程）</li>
</ul>


<h3>2. 可扩展性</h3>

<ul>
<li>系统无状态</li>
<li>拆分（分库，分表（水平，垂直））</li>
</ul>


<h3>3. 安全性</h3>

<ul>
<li>数据存储安全，如增量，全量备份，异机备份。</li>
<li>数据传输安全，ssl/tls，加解密（对称，非对称）。</li>
<li>网络安全，数据库与外网隔离，确保不被恶意攻击</li>
<li>安全审计、操作日志记录。</li>
</ul>


<h3>4. 可用性</h3>

<ul>
<li>负载均衡（lvs，keepalived）</li>
<li>多写分离，主从切换，failover</li>
<li>应急预案和系统预警</li>
<li>系统降级（功能和品质）</li>
<li>系统限流（过载保护）</li>
</ul>


<h2>电商的特点</h2>

<h3>环境</h3>

<p>人们不受时间的限制，不受空间的限制，不受传统购物的诸多限制，可以随时随地在网上交易。通过跨越时间、空间，使我们在特定的时间里能够接触到更多的客户，为我们提供了更广阔的发展环境。</p>

<h3>市场</h3>

<p>在网上这个世界将会变得很小，一个商家可以面对全球的消费者，而一个消费者可以在全球的任何一家商家购物。一个商家可以去挑战不同地区、不同类别的买家客户群，在网上能够收集到丰富的买家信息，进行数据分析。</p>

<h3>优势</h3>

<p>电子商务减少了商品流通的中间环节，节省了大量的开支，从而也大大降低了商品流通和交易的成本。通过电子商务，企业能够更快的匹配买家，实现真正的产-供-销一体化，能够节约资源，减少不必要的生产浪费。</p>

<h3>劣势</h3>

<p>服务质量参差不齐。配送、安装、产品退换货、维修等客服环节需要完善。</p>

<h2>电商的本质</h2>

<p>电商首先重在“商”，而不在“电”。</p>

<p>这意味着电商还是企业经济学，电商还是要讲效益，讲利润，讲责任。但另一方面更重要，电商有自己的特点，它是信息化技术的重新架构，它成就的不仅仅是渠道，而是一种管理模式，甚至是一种战略规则，其未来基本形态或最高形态，不应是单纯的销售，而是点对点的服务，通过企业直接面对单个消费者，提供个性化的服务，从而开启企业发展的新时代。</p>

<h3>首先，电商应重新确立消费者地位</h3>

<p>消费者是品牌的上帝，但如何真正把这理念通过一定方法来实现，却一直没有找到更直接更完备的答案。信息化为这个问题带来了新曙光。通过电商窗口，消费者可进行自我颜色设计、款式设计以及搭配设计；在生产过程中，也可以进一步和消费者沟通；而这本身就是一个巨大的营销过程。消费者穿在身上的服装，绝不会再撞衫，它是独一的，代表着自己心境和思想的，是最受消费者欢迎的。</p>

<h3>其次，电商应重新塑造产业生态</h3>

<p>低价是不可持续的，企业必须有相对充足利润，并促进上下游乃至生态的良好发展。靠资本投资打价格战，一时可以，不可一世；靠截取供应商利润，一次可以，不可永续；一个电商靠价格战可以，但一个行业这样则不正常。笔者认为，通过企业点对点的服务，可以获得相对高的利润，这不仅可以加速电商本身的创新，更重要的是让上下游企业有良好的利润来源，一旦这样的生态链条生成，那么其竞争力则是巨大的、持续的、有良好的前景的。</p>

<h3>再次，电商应重新构建经济理论和品牌法则</h3>

<p>现在流行的经济理论和品牌法则，大多诞生在传统经济时代或信息化萌芽之时，均是那个时代的产物，更大程度上适应那个时代发展条件。比如，如果采用大众化定制，消费者会更广泛，类别更复杂，消费心理也会发生巨大变化，如果还一味墨守原来的定位法则，想必一定就刻舟求剑了。所以要在新时代里，一定要探寻定位的新内涵，寻找适合信息化时代的新方法，适合自己的新方法，通过不断创新实践，为丰富和扩展企业理论和品牌法则做出新尝试。</p>

<p>总之，电商本身就是一种创造，本质要求提升商业形态和价值，如果只是打价格战，那就是南辕北辙了。</p>

<h2>相关业务战略架构</h2>

<h3>1. 服务对象</h3>

<p>企业战略规划从选择客户开始。如1号店成立之初，服务对象是超市人群中的网络人群，所以去家乐福等的线下人群才是相关核心主攻人群，而非泛人群。</p>

<h3>2. 价值提供</h3>

<p>确定顾客定位后，就要解决为什么顾客要从你这里购买而非竞争对手处购买的价值定位。</p>

<p>1号店成立之初，从多种价值里最后选择了3个顾客价值：</p>

<ul>
<li><p>优惠价格</p></li>
<li><p>良好用户体验</p></li>
<li><p>未满足的品类需求（提供食品饮料，母婴这些当时竞争对手都不涉及的产品线）</p></li>
</ul>


<p>选择定位时，一定需要按照：</p>

<ul>
<li><p>竞争对手不足</p></li>
<li><p>能消费者需求</p></li>
<li><p>对相关领域比较擅长，有优势，自身能做好</p></li>
</ul>


<p>将这三者结合，产生一个清晰的价值定位，就可以以小博大。1号店启动时候只用了非常有限的资金，但假设一开始就博大，业务、资金、时间都分散，就没有今天了。</p>

<h3>3. 输出结果为产品、信息和服务</h3>

<p>产品线定位确定之后，就要进行了收缩。</p>

<p>1号店业务初期先保留了食品饮料、母婴、美容和家居四类，剔除了图书、服装等产品线，聘用了大量的兼职大学生协助产品经 理完善商品在网上的表现力，同时于刚董事长异常重视用户体验反馈，每天通过公司系统中消费者反馈第一时间解决来自各个部门的问题，这也是1号店能快速成长的一个重要原因，因为有效的企业更多是通过和终端顾客对话来解决企业内部的部门问题，而非公司高管自己拍脑袋决策。</p>

<h3>4. 资源资产能力</h3>

<p>表现为知识和权利领域。</p>

<p>1号店通过人力经理的辛苦搜索，找到了各部门的领导者，所以成立初期，很快网络了一批各行业的人才来推动业务发展。组织资本上，申请大量的技术专利，对1号店品牌商标保护等。关系资本上，1号店迅速和行业合作伙伴建立战略合作关系，虽然当时业务很小，但创始人用公司的美好发展愿景和优秀团队两个武器和各个合作伙伴建立了战略合作关系，比如从上海的物流合作商特能处取得了行业最低的每单配送价格。</p>

<h3>5. 流程</h3>

<p>就是解决系统层面做什么。</p>

<p>1号店当时IT人员数量是各部门之最，开发了很多系统，管理上也是制度系统比人重要，各部门周二的KPI会议上负责人都用部门量化的KPI业绩来沟通业务的机会和挑战以及改进方案。这几年来，虽然1号店人员流失率颇高，但业务还是持续增长，这也是创始人对系统的重视是一个重要原因。</p>

<h3>6. 合作伙伴</h3>

<p>合作伙伴分为纵向和横向合作伙伴。</p>

<p>为业务直接带来业绩的为上下游的合作伙伴，上游供应商有宝洁等货品供应商，下游有平安客流伙伴，特能是物流伙伴，普洛斯园区则提供良好的仓储伙伴。</p>

<p>目前沃尔玛入股1号店，应该可以从很多方面提供1号店的运营能力。而横向合作伙伴，定义为可以帮助公司间接提高产品服务价值和维系良好客户关系的供应商，比如听说1号店2012年起聘专业的客户关系维系公司来帮助提升客户关系管理等措施就是良好运用横向伙伴技巧。不和风投随意洽谈，从一开始就找能给自己真正带来业务提升的战略投资者。</p>

<h3>7. 获利模式</h3>

<p>目前电商越大越亏损，因为还在圈地时期。一个不注重盈利也解释不清楚未来盈利模式都是违背商业本质。而真正好的利润是持续长久的，不是圈钱短视，否则必有后患，好的利润模式也不是眼球经济，而应可持续发展。</p>

<h3>8. 收入增长方式</h3>

<p>收入增长模式可以分为客户轴，产品轴和位置轴。</p>

<p>客户轴可以供应给个人消费者的有形产品外，1号店还提供了手机充值等无形服务产品来增加客户粘性，当然成立之初就实施的针对企业的团购也给1号店带来了一 定比例的收入。</p>

<p>产品轴是随着公司发展逐渐增加，各平台电商公司虽然都是从不同产品线起家，但最后基本会殊途同归，品类扩充是必由之路，但必须有节奏感和清晰的定位分析，否则会出现凡客去年的产品扩充问题。</p>

<p>最后是位置轴，全国布局一定是逐步实现，是规模做大的桥头堡，但需要资本背后支持。</p>

<p>reference：</p>

<p>[^1] <a href="http://mp.weixin.qq.com/s?__biz=MzA4ODI4NjMwMQ==&amp;mid=10000072&amp;idx=2&amp;sn=89dbb533dd9bfd0f0900fc2ad2504e6c&amp;3rd=MzA3MDU4NTYzMw==&amp;scene=6#rd">电子商务不得不了解的模式</a></p>

<p>[^2] <a href="http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5MzY2NTEyMw==&amp;appmsgid=10013152&amp;itemidx=1&amp;sign=6fa1962f942a1804368e3e22c393c934&amp;3rd=MzA3MDU4NTYzMw==&amp;scene=6#wechat_redirect">电商的本质</a></p>

<p>[^3] <a href="http://mp.weixin.qq.com/s?__biz=MzA4MTcxNzgzMQ==&amp;mid=200319772&amp;idx=5&amp;sn=d8e44444b80d633dbc56f5ee6ab5de5a&amp;3rd=MzA3MDU4NTYzMw==&amp;scene=6#rd">以1号店为例，解析企业电子商务8步业务战略架构</a></p>

<p>[^4] <a href="http://mp.weixin.qq.com/s?__biz=MjM5MjEwMTk1OQ==&amp;mid=200031802&amp;idx=1&amp;sn=fec76ef0b002c7d41c91d746a07ee0c9&amp;3rd=MzA3MDU4NTYzMw==&amp;scene=6#rd">电子商务模式下如何进行客户关系管理</a></p>

<p>[^5] <a href="http://blog.csdn.net/yangbutao/article/details/12242441">构建高并发高可用的电商平台架构实践</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在linux服务器之间同步用户账号]]></title>
    <link href="http://jqlblue.github.io/2014/08/02/synchronization-user-account-on-linux/"/>
    <updated>2014-08-02T17:26:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/08/02/synchronization-user-account-on-linux</id>
    <content type="html"><![CDATA[<p>最近负责运帷的同事离职了，原先由运帷可以一手搞定的事情，分摊到了几个研发同事的身上。但是多人公用一个账号，实在感觉不爽。</p>

<!-- more -->


<p>由于公司没有几台服务器上，所以可以逐一登录服务器创建新账号。但是对于一个码农而言，这不科学，它违背了<code>DRY</code>原则。</p>

<p>当然，也可以配置一个ldap服务器，修改linux用户登录使用ldap验证。但这让我有一种从火窟跳到冰窖的感觉。先不说是否能搞定配置的事情，引入的这个ldap，又会变成另外一个坑。</p>

<p>昨天听一个同事时，我们来上班，要对得起自己的良心。所以我不能让上班时间在纠结中度过，用土方法解决问题先。</p>

<h2>同步步骤</h2>

<p>因为目前有一台服务器是登录的跳板机，所以只需要在跳板机上创建好新账号，然后把用户账号同步到其他机器上就好。</p>

<blockquote><p>如果没有跳板机，也可以随便选一台服务器（A），在A服务器上创建账号，并同步到其他机器上。</p></blockquote>

<ul>
<li><p>在跳板机上创建用户账号</p></li>
<li><p>在要同步的服务器上创建账号，并将该用户在跳板机上如下文件中对于的条目追加到要同步到机器上</p></li>
</ul>


<p><code>/etc/passwd</code>， <code>/etc/group</code>, <code>/etc/shadow</code></p>

<p>以跳板机ip：<code>192.168.1.1</code>，要同步的服务器：<code>192.168.1.8</code>，新增用户名：<code>jqlblue</code>为例，登录跳板机执行：</p>

<pre><code>$ useradd jqlblue
$ ssh -l root -p 22 192.168.1.8 "useradd jqlblue"
$ grep jqlblue: /etc/group | xargs -I {} ssh -l root -p 22 192.168.1.8 "echo {} &gt;&gt; /etc/group"
$ grep jqlblue: /etc/passwd | xargs -I {} ssh -l root -p 22 192.168.1.8 "echo {} &gt;&gt; /etc/passwd"
$ grep jqlblue: /etc/shadow | xargs -I {} ssh -l root -p 22 192.168.1.8 "echo {} &gt;&gt; /etc/shadow"
</code></pre>

<p>上述操作，编写成脚本即可。当需要新增或者修改用户时，只需在跳板机上进行操作，同步问题，由脚本来完成。</p>

<p><em>上述脚本要在生产环境使用，需要注意如下问题：</em></p>

<pre><code>1 新增用户时，uid或者gid重复的问题
2 修改用户密码或者组信息后，产生多条记录的问题
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0012]]></title>
    <link href="http://jqlblue.github.io/2014/07/05/0012/"/>
    <updated>2014-07-05T13:59:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/07/05/0012</id>
    <content type="html"><![CDATA[<p>从小到大，我最不喜欢的就是离别。但这却是我们每天都要经历的事情，只是或长，或短。</p>

<!-- more -->


<p>前些天整理屋子时翻出刚毕业时的照片，老婆打趣地说：“你的青葱都去哪儿了？”。</p>

<p>我自然只能说：“都给你了啊！”。</p>

<p>老婆呵呵一笑说道：“你一天才陪我多会儿啊，你的青葱，都给了你的电脑，你的代码。一天就知道敲敲敲，赶紧去喝点水。家里快没米了，一会去超市拎袋米回来。。。”</p>

<h2>十年</h2>

<p>在休假的期间，去山东找了一趟儿时的大哥。</p>

<p>在不太拥挤的人群中，第一眼就找出了那个熟悉的身影。当年60米短跑健将的风采已然不再，零零星星的白发，也小成气候。</p>

<p>见面后，吃饭是少不了的。在我的强烈要求下，找了一家兰州拉面馆。份量的确实在，但却是另一种滋味。吃着我从北京带过去的五香花生米，聊着各自的境况。</p>

<p>本来想一起看看世界杯，找找儿时的感觉，可是因为电视线路发生了故障，于是晃悠到了一家网吧。原以为可以畅快淋漓地玩几把路人局，结果屡屡被虐。</p>

<p>回来的车上，想起来这个城市已经十年。</p>

<h2>在路上</h2>

<p>我是个胸无大志的人，所以每当别人问起我的梦想，问起我的三年，五年规划，只会让我更加茫然。</p>

<p>因为录取通知书中附带的地图显示，我们学校就在长城脚下，所以我就兴高采烈地来了帝都。我盼望着起早可以去长城跑步。</p>

<p>报到时，我就傻眼了：去长城不止得花钱，而且就算花一上午，我也不一定能跑地到。</p>

<p>做毕设时，无意被导师介绍到了她同学的公司，然后就顺利地留了下来，随之开启了我的码农之路。</p>

<p>期间不断遇到很好的上司，不错的同事，一直过地不好不坏。</p>

<h2>再见360</h2>

<p>我也不是一个睿智的人。虽然我老婆经常说：你没吃过猪肉，你还没见过猪跑吗？</p>

<p>我这样的人，或许就像一颗树芽。</p>

<p>在某个微风和煦的清晨，悄悄地探出头，努力一番，长成一片叶子。又在某个萧瑟的秋夜里，落在了地上，随着一场雨水，和在了泥土中。</p>

<p>轻轻地来，轻轻地走，不被任何人察觉。</p>

<p>虽然我注定是一片叶子，但是我曾努力去绽放成为一朵绚丽的花，这就已经足够。</p>

<p>再见360，希望你们一切都好。</p>

<p><img src="http://jqlblue.github.io/images/0012.jpg" title="card" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[手动刷入android 4.4.3 OTA 更新包]]></title>
    <link href="http://jqlblue.github.io/2014/06/08/manual-update-android-ota-update/"/>
    <updated>2014-06-08T06:35:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/06/08/manual-update-android-ota-update</id>
    <content type="html"><![CDATA[<p>今天上午，nexus4终于收到了google android 4.4.3 的ota更新包，但是从上午到晚上，愣是没有下载下来。这就像因为长智齿而牙龈肿痛的你被人请吃麻辣香锅那样难受。</p>

<!-- more -->


<p>作为一个吃货，怎么能受得了这份煎熬？就算用半边牙齿，也不能虚此行。</p>

<p>当然，作为码农。就算被铜墙铁壁包围，也要想办法越过长城，对世界说出那句“hello world”。</p>

<h1>诊断</h1>

<p>更新包为什么下不下来，这肯定是有原因的。对手机的网络请求进行抓包，应该可以查明原因。</p>

<p>如何对手机进行抓包，可以参见之前的博文“<a href="http://jqlblue.github.io/2013/08/04/guide-of-packet-mobile-capture/">移动应用无线抓包指南</a>”。
如果手机使用的是家里的wifi网络，那对手机进行抓包会非常easy。两步即可：</p>

<pre><code>1. 在电脑上对fiddle进行设置
2. 修改手机上的网络设置，设置代理，其中代理服务器的ip就是电脑的ip
</code></pre>

<blockquote><p>如何设置可参见博文<a href="http://jqlblue.github.io/2013/08/04/guide-of-packet-mobile-capture/">移动应用无线抓包指南</a>”</p></blockquote>

<p>设置完成后，再请求时发现更新包的无法下载。
<img src="http://jqlblue.github.io/images/mobile/android-4.4.3-update.png" title="android-4.4.3-update" ></p>

<p>这时有两种方案：</p>

<pre><code>1. 通过代理等途径，获取更新包域名的对应的ip，绑定host。
2. 因为已经抓包获取到了更新包的下载地址，可以通过代理等途径，下载更新包并手动刷入。
</code></pre>

<blockquote><p>因为在手机上设置的代理服务器是电脑的ip，所以只要在电脑上绑定host，手机上也会生效。</p></blockquote>

<p>由于更新包下载地址的域名是动态的，所以没法绑定host。于是只有选择下载更新包，手动刷入。</p>

<h1>下载4.4.3 OTA 更新号</h1>

<p>为了方便，已下载针对nexus4的android4.4.3的ota更新包。需要的，可直接通过如下地址下载<a href="http://pan.baidu.com/s/1mgjxxLA#dir/path=%2Fsoft%2Fandroid-4.4.3-update%2Fkitkat-4.4.3-update">android-4.4.3-ota</a>。</p>

<h1>使用adb手动刷入OTA更新包</h1>

<h2>手动刷入的准备工作</h2>

<p>在手动刷入更新包时，除了下载更新包，还需要做如下准备工作：</p>

<ul>
<li>在手机的<code>开发者选项</code>中，开启<code>USB调试</code>。</li>
</ul>


<blockquote><p>在<code>设置</code>，<code>关于手机</code>中，狂点<code>版本号</code>，可开启<code>开发者选项</code>。</p></blockquote>

<ul>
<li>在电脑上使用usb线连接手机</li>
</ul>


<p>手机上应该会出现如下画面。选择<code>允许</code></p>

<p><img src="http://jqlblue.github.io/images/mobile/android-usb-debug.png" title="安卓usb调试" ></p>

<p>使用usb连接手机后，电脑上可能会自动安装相关驱动程序，请耐心等待完成。</p>

<ul>
<li>下载adb</li>
</ul>


<p><code>adb</code>包含在android的sdk中，但是我们只需要<code>adb.exe</code>, <code>AdbWinApi.dll</code>, <code>AdbWinUsbApi.dll</code>。</p>

<p>如果不想去下载android的sdk，可以通过如下地址下载<a href="http://pan.baidu.com/s/1mgjxxLA#dir/path=%2Fsoft%2Fandroid-4.4.3-update%2Fadb">刷机adb</a>。</p>

<p>下载完成后，解压到某个目录，如<code>D:\soft\nexus4\Tools</code>，在命令行执行：</p>

<pre><code>cd D:\soft\nexus4\Tools
d:
adb.exe devices
</code></pre>

<p>如果看到下图，说明准备工作告一段落。如果没有，可能是相关驱动安装地有问题，可自行查阅解决。</p>

<p><img src="http://jqlblue.github.io/images/mobile/android-adb-devices.png" title="安卓adb devices" ></p>

<h2>开刷</h2>

<ul>
<li>关机，然后按住<code>音量下键</code>和<code>电源键</code>，进入fastboot模式：</li>
</ul>


<p><img src="http://jqlblue.github.io/images/mobile/android-fastboot.png" title="安卓fastboot" ></p>

<ul>
<li>通过按<code>音量上下键</code>进行切换，切换到<code>Recovery Mode</code>模式，按<code>电源键</code>选择进入：</li>
</ul>


<p><img src="http://jqlblue.github.io/images/mobile/android-recovery-mode.png" title="安卓recovery-mode" ></p>

<p>此时，你可以看到一个倒地的机器人：</p>

<p><img src="http://jqlblue.github.io/images/mobile/android-recovery-mode-2.png" title="安卓recovery-mode" ></p>

<ul>
<li>按<code>电源键</code>，然后再迅速按<code>音量上键</code></li>
</ul>


<blockquote><p>这一步比较艰难，需要多尝试几次</p></blockquote>

<p>直到看到如下界面：</p>

<p><img src="http://jqlblue.github.io/images/mobile/android-apply-update.png" title="安卓adb update" ></p>

<p>再按<code>音量上下键</code>进行切换，切换到<code>apply update from ADB</code>，按<code>电源键</code>选择进入：</p>

<p><img src="http://jqlblue.github.io/images/mobile/android-sideload.png" title="安卓sideload" ></p>

<ul>
<li>通过USB再次连接电脑和手机</li>
</ul>


<p>在命令行执行：</p>

<pre><code>adb.exe sideload kitkat-4.4.3.zip
</code></pre>

<p><img src="http://jqlblue.github.io/images/mobile/android-adb-sideload.png" title="安卓 adb sideload" ></p>

<p>手机上将会出现如下界面：</p>

<p><img src="http://jqlblue.github.io/images/mobile/android-update-ota-1.png" title="安卓 ota update" ></p>

<p>耐心等待，等ota更新包安装完成时，会出现如下界面，按<code>电源键</code>选择重启即可。</p>

<p><img src="http://jqlblue.github.io/images/mobile/android-update-ota-2.png" title="安卓 ota update" ></p>

<p>重启后，会对已安装的应用进行优化。通过<code>设置</code>，<code>关于手机</code>查看系统版本，发现已经是<code>4.4.3</code>。</p>

<p><img src="http://jqlblue.github.io/images/mobile/android-4.4.3-update-end.jpg" title="安卓 ota 更新完成" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再话tcpcopy的胞弟gryphon]]></title>
    <link href="http://jqlblue.github.io/2014/05/28/tcpcopy-gryphon-introduction/"/>
    <updated>2014-05-28T15:57:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/05/28/tcpcopy-gryphon-introduction</id>
    <content type="html"><![CDATA[<p>gryphon是由网易研发，能够模拟千万级别并发用户进行压力测试的一个软件，可用于网络消息推送服务方面的压力测试和传统web服务的压力测试。目前由网易的 <a href="http://weibo.com/tcpcopy">王斌</a>进行维护。更多介绍可参见<a href="https://github.com/wangbin579/gryphon">A powerful tool to simulate millions of concurrent users for loading testing</a></p>

<!-- more -->


<p>gryphon的安装和使用方法分为<code>传统架构方式</code>和<code>高级架构方式</code>。</p>

<h1>相关角色说明</h1>

<ul>
<li>gryphon客户端（/usr/local/bin/gryphon）</li>
<li>intercept拦截进程（/usr/local/bin/intercept）</li>
</ul>


<p>测试时，gryphon客户端读取录制的pcap文件（可以通过tcpdump产生），通过<code>Raw Socket</code>修改请求并发送到测试机。因为这些请求的来源ip可能是模拟的，为了连接的正常关闭，需要拦截测试机的响应包。</p>

<pre><code>在传统架构下：
1 netfilter-iptables在协议栈将数据包交给内核中的ip_queue模块
2 intercept在用户态通过netlink socket接收内核传来的数据报文
3 将处理后的报文以及对报文的处理意见（ACCEPT，DROP等）传递给内核协议栈
</code></pre>

<figure class='code'><figcaption><span>communication/tc_socket.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">tc_raw_socket_out_init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * On Linux when setting the protocol as IPPROTO_RAW,</span>
</span><span class='line'><span class="cm">     * then by default the kernel sets the IP_HDRINCL option and</span>
</span><span class='line'><span class="cm">     * thus does not prepend its own IP header.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">fd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_RAW</span><span class="p">,</span> <span class="n">IPPROTO_RAW</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>communication/tc_interception.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">tc_nl_event_process</span><span class="p">(</span><span class="n">tc_event_t</span> <span class="o">*</span><span class="n">rev</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span>            <span class="n">buffer</span><span class="p">[</span><span class="mi">65536</span><span class="p">];</span>
</span><span class='line'>    <span class="k">register</span> <span class="kt">int</span>    <span class="n">i</span><span class="p">,</span> <span class="n">pass_through_flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span>   <span class="n">packet_id</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tc_ip_header_t</span> <span class="o">*</span><span class="n">ip_hdr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">tc_nl_socket_recv</span><span class="p">(</span><span class="n">rev</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="mi">65536</span><span class="p">)</span> <span class="o">==</span> <span class="n">TC_ERROR</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">TC_ERROR</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ip_hdr</span> <span class="o">=</span> <span class="n">tc_nl_ip_header</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'>    <span class="n">packet_id</span> <span class="o">=</span> <span class="n">tc_nl_packet_id</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">ip_hdr</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* check if it is the valid user to pass through firewall */</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">srv_settings</span><span class="p">.</span><span class="n">passed_ips</span><span class="p">.</span><span class="n">num</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">srv_settings</span><span class="p">.</span><span class="n">passed_ips</span><span class="p">.</span><span class="n">ips</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">ip_hdr</span><span class="o">-&gt;</span><span class="n">daddr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">pass_through_flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">tot_resp_packs</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">pass_through_flag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="cm">/* pass through the firewall */</span>
</span><span class='line'>            <span class="n">dispose_netlink_packet</span><span class="p">(</span><span class="n">rev</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span> <span class="n">NF_ACCEPT</span><span class="p">,</span> <span class="n">packet_id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">tot_copy_resp_packs</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="n">router_update</span><span class="p">(</span><span class="n">srv_settings</span><span class="p">.</span><span class="n">old</span><span class="p">,</span> <span class="n">ip_hdr</span><span class="p">);</span>
</span><span class='line'>            <span class="cm">/* drop the packet */</span>
</span><span class='line'>            <span class="n">dispose_netlink_packet</span><span class="p">(</span><span class="n">rev</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span> <span class="n">NF_DROP</span><span class="p">,</span> <span class="n">packet_id</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">TC_OK</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>在高级架构下，是通过在测试机上配置静态路由规则，将响应路由到辅助服务器进行处理。
</code></pre>

<p><img src="http://jqlblue.github.io/images/gryphon/raw_socket.jpg" title="raw socket" ></p>

<h1>传统架构下安装并使用</h1>

<p>在传统架构下，<code>intercept拦截进程</code>需要运行在测试机上，用于拦截测试机的响应包。</p>

<h2>安装与使用</h2>

<h3>在测试机安装intercept拦截进程</h3>

<pre><code>git clone git://github.com/wangbin579/tcpcopy.git
cd tcpcopy
sh autogen.sh
./configure --prefix=/usr/local/tcocopy --enable-single
make
sudo make install
</code></pre>

<h3>安装gryphon客户端</h3>

<pre><code>git clone git://github.com/wangbin579/gryphon.git
cd gryphon
sh autogen.sh
./configure --prefix=/usr/local/gryphon --enable-single
make
sudo make install
</code></pre>

<h3>使用方法</h3>

<p>以<code>intercept拦截进程</code>安装在测试机<strong>10.16.15.118</strong>，应用端口是<strong>80</strong>，<code>gryphon客户端</code>安装在<strong>10.16.15.117</strong>为例，说明gryphon在传统架构下的基本使用方法。</p>

<ul>
<li>tcpdump抓包录制pcap文件</li>
</ul>


<p>可以在线上服务器抓包录制，并拷贝到<code>gryphon客户端</code>所在的服务器<strong>10.16.15.117</strong></p>

<pre><code>tcpdump -i eth0 port 80 -s 0 -w xxx.pcap
</code></pre>

<ul>
<li>拦截响应包</li>
</ul>


<p>在测试机<strong>10.16.15.118</strong>上操作</p>

<pre><code>modprobe ip_queue
iptables -I OUTPUT -p tcp --sport 80 -j QUEUE
/usr/local/tcpcopy/bin/intercept
</code></pre>

<blockquote><p>如果内核版本3.5，可以使用nfqueue</p></blockquote>

<ul>
<li>发送测试请求</li>
</ul>


<p>在<code>gryphon客户端</code>所在服务器<strong>10.16.15.117</strong>上操作</p>

<pre><code>/usr/local/gryphon/bin/gryphon -x 80-10.16.15.118:80 -f ./xxx.pcap -s 10.16.15.118 -u 1000 -a 2 -c 10.17.15.*
</code></pre>

<p>上述命令，从xxx.pcap抓包文件中提取出访问80端口的用户会话过程，模拟1000个用户，将请求复制到测试机<strong>10.16.15.118</strong>的<strong>80</strong>端口中去。其中用户ip地址的范围是10.17.15.*。</p>

<blockquote><p>-a参数用于加快数据包的发送速度。-a 2代表将数据包之间的发送间隔缩短一半，相当于加速2倍。也可和－i配合，如 －a 10 －i 2048</p></blockquote>

<p>gryphon拦截进程中各个基本参数的释义如下：</p>

<pre><code>gryphon -x historyServerPort-targetServerIP:targetServerPort -f &lt;pcapfile,&gt; -s &lt;intercept address&gt; -u &lt;user num&gt; -c &lt;ip range,&gt;
</code></pre>

<h2>调试步骤</h2>

<p><code>gryphon客户端</code>和<code>intercept拦截进程</code>运行时，会在当前工作目录生成<code>error_gryphon.log</code>，<code>error_intercept.log</code>日志文件，里面有相关运行信息。当测试过程不能正常工作时，可优先查看相关日志。</p>

<p>其次就是在测试机或者<code>gryphon客户端</code>所在的服务器上进行抓包。确保<code>gryphon客户端</code>发出请求，并且没有收到测试机的响应包，如：
<img src="http://jqlblue.github.io/images/gryphon/gryphon_tcpdump.png" title="gryphon tcpdump" ></p>

<h1>高级架构下安装并使用</h1>

<p>在高级架构下，<code>intercept拦截进程</code>需要运行在辅助服务上，用于拦截测试机的响应包。</p>

<h2>安装与使用</h2>

<h3>在测试机安装intercept拦截进程</h3>

<pre><code>git clone git://github.com/wangbin579/tcpcopy.git
cd tcpcopy
sh autogen.sh
./configure --prefix=/usr/local/adv-tcpcopy --enable-single  --enable-pcap --enable-advanced
make
sudo make install
</code></pre>

<h3>安装gryphon客户端</h3>

<pre><code>git clone git://github.com/wangbin579/gryphon.git
cd gryphon
sh autogen.sh
./configure --prefix=/usr/local/adv-gryphon --enable-single --enable-advanced
make
sudo make install
</code></pre>

<h3>使用方法</h3>

<p>以<code>intercept拦截进程</code>安装在辅助服务器<strong>10.16.15.116</strong>，<code>gryphon客户端</code>安装在<strong>10.16.15.117</strong>，测试机<strong>10.16.15.118</strong>的应用端口是<strong>80</strong>为例，说明gryphon在高级架构下的使用方法。</p>

<ul>
<li>tcpdump抓包录制pcap文件</li>
</ul>


<p>可以在线上服务器抓包录制，并拷贝到<code>gryphon客户端</code>所在的服务器<strong>10.16.15.117</strong></p>

<pre><code>tcpdump -i eth0 port 80 -s 0 -w xxx.pcap
</code></pre>

<ul>
<li>拦截响应包</li>
</ul>


<p>在测试机<strong>10.16.15.118</strong>上设置静态路由，将响应包路由到辅助服务器<strong>10.16.15.116</strong></p>

<pre><code>route add -net 10.17.15.0 netmask 255.255.255.0 gw 10.16.15.116
</code></pre>

<p>查看是否设置成功</p>

<pre><code>$ route
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
10.17.15.0      10.16.15.116    255.255.255.0   UG    0      0        0 eth0
10.16.14.0      *               255.255.254.0   U     0      0        0 eth0
169.254.0.0     *               255.255.0.0     U     0      0        0 eth0
default         10.16.14.1      0.0.0.0         UG    0      0        0 eth0
</code></pre>

<p>如果设置错了，可以删除并重新添加</p>

<pre><code>route del -net 10.17.15.0 netmask 255.255.255.0
</code></pre>

<p>在辅助服务器<strong>10.16.15.116</strong>上启动intercept拦截进程</p>

<pre><code>/usr/local/adv-tcpcopy/bin/intercept -F 'tcp and src port 80'
</code></pre>

<ul>
<li>发送测试请求</li>
</ul>


<p>在<code>gryphon客户端</code>所在服务器<strong>10.16.15.117</strong>上操作</p>

<pre><code>/usr/local/adv-gryphon/bin/gryphon -x 80-10.16.15.118:80 -f ./xxx.pcap -s 10.16.15.116 -u 1000 -c 10.17.15.*
</code></pre>

<p><strong> Reference </strong></p>

<p>[^1] <a href="http://www.ibm.com/developerworks/cn/linux/l-ntflt/index.html">http://www.ibm.com/developerworks/cn/linux/l-ntflt/index.html</a></p>

<p>[^2] <a href="http://www.ibm.com/developerworks/cn/linux/l-netlink/index.html">http://www.ibm.com/developerworks/cn/linux/l-netlink/index.html</a></p>

<p>[^3] <a href="http://www.tenouk.com/Module42a.html">http://www.tenouk.com/Module42a.html</a></p>

<p>[^4] <a href="http://blog.csdn.net/u010807313/article/details/9236581">http://blog.csdn.net/u010807313/article/details/9236581</a></p>
]]></content>
  </entry>
  
</feed>
