<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[atom.]]></title>
  <link href="http://jqlblue.github.io/atom.xml" rel="self"/>
  <link href="http://jqlblue.github.io/"/>
  <updated>2013-10-26T16:18:17+08:00</updated>
  <id>http://jqlblue.github.io/</id>
  <author>
    <name><![CDATA[jqlblue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在fedora上安装fcitx输入法和云拼音]]></title>
    <link href="http://jqlblue.github.io/blog/2013/10/26/fcitx-fedora/"/>
    <updated>2013-10-26T12:30:00+08:00</updated>
    <id>http://jqlblue.github.io/blog/2013/10/26/fcitx-fedora</id>
    <content type="html"><![CDATA[<p>从fedora18开始，ibus感觉渐渐不如以前好用了，尤其是在emacs下使用的时候，经过死机。restart input method是家常便饭。</p>

<p>一次发现同事的ubuntu上在使用google输入法，让我眼前一亮。但是在64位的fedora19上没有配置成功。于是尝试了下fcitx输入法，特此记录。</p>

<h3>安装步骤</h3>

<figure class='code'><figcaption><span>fcitx install step </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum install fcitx.x86_64
</span><span class='line'>yum install fcitx-configtool.x86_64
</span><span class='line'>yum install fcitx-gtk3.x86_64
</span><span class='line'>yum install fcitx-cloudpinyin.x86_64
</span><span class='line'>yum install fcitx-table-chinese.noarch
</span><span class='line'>yum intall fcitx-qt4.x86_64
</span></code></pre></td></tr></table></div></figure>


<h3>配置</h3>

<p>编辑~/.bashrc，添加：</p>

<pre><code>export GTK_IM_MODULE=fcitx
export QT_IM_MODULE=fcitx
export XMODIFIERS="@im=fcitx"
</code></pre>

<p>重启系统或者logout，使之生效。</p>

<pre><code>如果将im_module设置为xim，系统重启时可能会造成应用程序卡死。
此时可以通过键盘快捷键“CTRL+ALT+F2”，切换成tty2，
通过console模式登录系统杀死fcitx进程，再切回X window，或者直接重启。
</code></pre>

<h3>相关设置</h3>

<p>如下图所示：</p>

<pre><code>1. 在“input method”Tab，可以添加或者删除输入法
2. “Global Config”Tab，主要用于设置相关快捷键
3. “Appearance”列用于设置输入法弹出框的显示界面
4. 点击“Addon”Tab，通过Cloud Pinyin可以设置云拼音。即可以将谷歌拼音，搜狗，百度，QQ输入法的内容合并进来。
   下图的设置，是当输入第二个词的时候，将云拼音的结果合并到第二个位置。
</code></pre>

<p><img src="http://jqlblue.github.io/images/fcitx_config.png" title="'fcitx_config images'" >
<img src="http://jqlblue.github.io/images/fcitx_config_cloud_pinyin.png" title="'fcitx_config_cloud_pinyin images'" ></p>

<p>reference：</p>

<blockquote><p><a href="https://wiki.archlinux.org/index.php/Fcitx">Fcitx</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[九月[september]]]></title>
    <link href="http://jqlblue.github.io/blog/2013/08/31/september/"/>
    <updated>2013-08-31T09:09:00+08:00</updated>
    <id>http://jqlblue.github.io/blog/2013/08/31/september</id>
    <content type="html"><![CDATA[<h3>出生</h3>

<p>九月份，我出生来到了这个世界。</p>

<p>然后一天天地长大。</p>

<p>我遇到了很多人很多事；有好心的老师和同学，当然也有不好的人和事，但是一
切终究过去。</p>

<h3>北上</h3>

<p>九月份，我选择北上帝度。</p>

<p>拎着老爸买的行李箱，和老爸张罗给找的同伴一起出发。
至今，即将十年。</p>

<p>当时应该是满怀着梦想。在近20个小时的路途中，年轻的身板没有露出一点疲倦
的姿态。就这么一路坐着过去，貌似一眼就没合。结果在老爸同学的小车上睡着
了，第一次路过天安门时，我都没瞟一眼。</p>

<h3>漂</h3>

<p>梦想很丰满，现实很骨感。</p>

<p>四年的光阴，在弹指一挥之间，就如白驹过隙，叟地就结束了。然后就成为了码
农。</p>

<p>有时候想想，感觉还是子承父业。</p>

<p>老爸用转盖楼，我用代码搭建起来的互联网服务。</p>

<p>从领到第一份工资，到从这个公司离职，又那个公司继续上班。感觉自己渐渐
地迷失了。唯一留下的，是对coding的热爱，抑或是对社会的逃避。</p>

<p>相对于人而言，计算机是简单而且忠诚的。</p>

<p>只要你足够了解它，你想让它做的事情，它就一定能为你做到。而人不一样，就
算把和心和肝都掏出来给他/她。他/她也不一定会领你的情。</p>

<p>人有自主的思维，你无法完全控制他/她的那块cpu（写到这里，突然发现我可能
真的有些大男子主义）。</p>

<p>internet的出现，本来是要加强人与人之间的联系。但是随着网络基础建设的升
级以及智能设备的普及。每个人的确都成了网民（互联网这张大网上的一个独立
个体），每天趴在这张大网上。</p>

<p>有些时候，我蛮怀念大学的日子。很穷，很多东西都买不起。但是毕竟还有梦想。
还有燃烧的青春。那年轻的冲满荷尔蒙的身体，可以在网吧通宵后接着去教室上
课（课上是否呼呼大睡被老师批评另说），可以在傍晚的操场上轻松地跑完800
米，还可以很多。。。。</p>

<p>而现在，依然很多东西都买不起。而且，光鲜的外表下，好多器官或许都开始老化或者已经不能正常工作。哪天
的一个突发事件，就会让小心脏嘎嘣停止。</p>

<h3>厦门</h3>

<p>还是九月，我去了厦门。那是一个很干净的城市。</p>

<hr />

<p>又要到九月了。
突然发现九月对于我，是一个值得回忆和期待的数字。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[an introduction to systemtap]]></title>
    <link href="http://jqlblue.github.io/blog/2013/08/18/an-introduction-to-systemtap/"/>
    <updated>2013-08-18T10:07:00+08:00</updated>
    <id>http://jqlblue.github.io/blog/2013/08/18/an-introduction-to-systemtap</id>
    <content type="html"><![CDATA[<pre><code>SystemTap is a tool for the Linux Operating System
that allows developers and system administrators to deeply investigate
the behavior of the kernel and even user space applications
in order to discover error conditions, performance issues,
or just to understand how the system works, similarly to DTrace.
</code></pre>

<p>就像它的名字system（系统）tap（窃听），systemtap提供了底层的支持，以简
化系统在运行时的信息收集（包括用户态和内核态的信息）。通过对收集到的
信息进行分析，可以帮忙我们识别潜在的性能原因和功能问题。</p>

<pre><code>systemtap不会直接告诉你程序哪里出了问题。但是在你对代码熟悉的情况下，可以用一成的功力使出七八成的效果
</code></pre>

<p>以往在收集这些信息时，我们需要添加检测点，重新编译，安装，重启使之生效。
挺没意思的。。。</p>

<p>使用systemtap就不需要了，我们只要编写相关脚本，并让systemtap的命令
行接口stap（systemtap script translator/driver）进行调用就可以收集到用
户空间和内核空间的相关信息。</p>

<p>通过编写SystemTap脚本，我们就可以很容易地收集甚至篡改系统数据，这是普
通的linux系统工具所做不到的。</p>

<h3>相关背景知识</h3>

<p>在Solaris系统上，有一个大名鼎鼎的动态跟踪工具
<a href="http://en.wikipedia.org/wiki/DTrace">Dtrace</a>，这一个相当棒的工具（从
2001年10月开始开发，在2005年1月首次发布），曾
荣获《华尔街杂志》
<a href="https://blogs.oracle.com/swan/date/20070307">2006技术创新大奖中的金奖</a>
，和ZFS文件系统一样，DTrace一直都因版权问题而无法移植到Linux上，但
Oracle（SUN公司被Oracle收购）在2012年2月宣布发布DTrace for Linux beta
版，即将Solaris操作系统的动态跟踪工具移植到他们的Unbreakable
Enterprise Kernel(2.6.39)内，也就是说Linux人员终于也可以使用DTrace了。</p>

<p>在2005年1月开始，开源社区为linux操作系统开发了基于GPL许可的systemtap。</p>

<p>目前一般的Linux发行版，比如Fedora、OpenSuse、CentOS等，已经包含有systemtap的完整支持了。</p>

<h3>与其他trace工具比较</h3>

<ul>
<li>Dtrace：
dtrace不用多说了，systemtap的开发，就是用来替代dtrace的，但是他们还
是有以下几个明确的差异：

<ol>
<li>Dtrace不允许你任意地注入c代码，即在运行时修改系统数据，通过-g选项</li>
<li>Dtrace脚本是以虚拟机字节码的形式在内核中进行解释，而systemtap脚本
则是以本地二进制代码的形式被进行加载</li>
</ol>
</li>
<li>strace：
strace工作于用户态，只能用于处理系统调用</li>
<li>ltrace：
ltrace工作于用户态，只能用于处理用户态的函数</li>
<li>gdb：
gdb也工作于用户态，它的目标是进行交互式的调试</li>
</ul>


<p>更多信息请参见：<a href="http://sourceware.org/systemtap/wiki/SystemtapDtraceComparison">SystemtapDtraceComparison</a></p>

<p>而systemtap作为一个通用工具，通过追踪（tracing），可以了解：</p>

<pre><code>在一段时间内，某进程执行了哪些系统调用以及次数
一个函数执行了多长时间
进程函数调用栈并使用相关工具生成火焰图 (Flame Graph)
甚至可以使用systemtap脚本进行任意发挥
</code></pre>

<p>reference:
<a href="http://sourceware.org/systemtap/langref/SystemTap_overview.html#SECTION00021000000000000000">http://sourceware.org/systemtap/langref/SystemTap_overview.html#SECTION00021000000000000000</a>
<a href="http://raisama.net/talks/fisl10/kernel-hacking/stap.pdf">http://raisama.net/talks/fisl10/kernel-hacking/stap.pdf</a>
<a href="http://cheeselee.fedorapeople.org/systemtap-robin-20130817.pdf">http://cheeselee.fedorapeople.org/systemtap-robin-20130817.pdf</a>
<a href="http://agentzh.org/misc/slides/yapc-na-2013-flame-graphs.pdf">http://agentzh.org/misc/slides/yapc-na-2013-flame-graphs.pdf</a>
<a href="http://www.linuxfoundation.jp/jp_uploads/seminar20090225/obata.pdf">http://www.linuxfoundation.jp/jp_uploads/seminar20090225/obata.pdf</a>
<a href="http://dtrace.org/blogs/brendan/2011/10/15/using-systemtap/">http://dtrace.org/blogs/brendan/2011/10/15/using-systemtap/</a>
<a href="http://lenky.info/2013/02/04/systemtap%E5%88%9D%E8%AF%95%E7%94%A8/">http://lenky.info/2013/02/04/systemtap%E5%88%9D%E8%AF%95%E7%94%A8/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php 5.5 upgrade guide]]></title>
    <link href="http://jqlblue.github.io/blog/2013/08/10/php-5-dot-5-upgrade-guide/"/>
    <updated>2013-08-10T09:41:00+08:00</updated>
    <id>http://jqlblue.github.io/blog/2013/08/10/php-5-dot-5-upgrade-guide</id>
    <content type="html"><![CDATA[<p>前一阵子经常收到应用服务器的报警。登录服务器查看日志，netstat，strace
看不出问题（道行不够）。然后restart之后，一切又都正常。</p>

<p>面对打着补丁的5.2，我们决定升级到php5.5</p>

<h3>The reason</h3>

<p>左右事物发展变化的，除了自身的能力和品质，有时跟环境的变迁，也有着莫大
的关系。</p>

<p>作为一个在开发一线的互联网从业人员。优化，重构，这可能是我们要经常提及
的两个话题。</p>

<p>通过监控，度量，找出系统中那20%的瓶颈问题，一般就能让系统的性能有很大
的提升。这种优化算作自身能力的提升。</p>

<p>一个在线上运行的系统，实际上还依赖与服务器，带宽等硬件环境；操作系统，
程序编译器或者解释器等软件环境。这些环境，也在更新优化。</p>

<p>在自身能力不变的情况化，如果这些环境得以更新优化，我们的系统也会跑地更
快。</p>

<p>就像nike，同样的人，穿着nike会有飞一般的感觉。</p>

<h3>Step</h3>

<p>先引用鸟哥在 <a href="http://www.thinkinlamp.com/">thinkinlamp</a>演讲内容：
<img src="http://jqlblue.github.io/images/php-5.5-prefermance.png" title="'php-5.5-prefermance 'images'" ></p>

<p>理论上，从php5.2升级到php5.5，性能最少能提升30%。</p>

<p>当然，升级有风险，操作需谨慎。</p>

<p>下面是升级步骤：</p>

<h5>1. 安装php5.5</h5>

<figure class='code'><figcaption><span>php-5.5.0-install.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">PHP_VERSION</span><span class="o">=</span>5.5.0
</span><span class='line'>wget -c http://www.php.net/get/php-<span class="k">${</span><span class="nv">PHP_VERSION</span><span class="k">}</span>.tar.gz/from/this/mirror
</span><span class='line'>tar zxvf php-<span class="k">${</span><span class="nv">PHP_VERSION</span><span class="k">}</span>.tar.gz
</span><span class='line'><span class="nb">cd </span>php-<span class="k">${</span><span class="nv">PHP_VERSION</span><span class="k">}</span>
</span><span class='line'><span class="nv">PHP_PREFIX</span><span class="o">=</span>/usr/local/php-<span class="k">${</span><span class="nv">PHP_VERSION</span><span class="k">}</span>
</span><span class='line'>./configure <span class="se">\</span>
</span><span class='line'>--prefix<span class="o">=</span><span class="k">${</span><span class="nv">PHP_PREFIX</span><span class="k">}</span> <span class="se">\</span>
</span><span class='line'>--with-config-file-path<span class="o">=</span><span class="k">${</span><span class="nv">PHP_PREFIX</span><span class="k">}</span>/etc <span class="se">\</span>
</span><span class='line'>--disable-debug <span class="se">\</span>
</span><span class='line'>--enable-inline-optimization <span class="se">\</span>
</span><span class='line'>--disable-all <span class="se">\</span>
</span><span class='line'>--enable-fpm <span class="se">\</span>
</span><span class='line'>--enable-libxml <span class="se">\</span>
</span><span class='line'>--enable-session <span class="se">\</span>
</span><span class='line'>--enable-xml <span class="se">\</span>
</span><span class='line'>--enable-hash <span class="se">\</span>
</span><span class='line'>--enable-mbstring <span class="se">\</span>
</span><span class='line'>--with-layout<span class="o">=</span>GNU <span class="se">\</span>
</span><span class='line'>--enable-filter <span class="se">\</span>
</span><span class='line'>--with-pcre-regex <span class="se">\</span>
</span><span class='line'>--with-zlib <span class="se">\</span>
</span><span class='line'>--enable-json <span class="se">\</span>
</span><span class='line'>--enable-mysqlnd <span class="se">\</span>
</span><span class='line'>--enable-pdo <span class="se">\</span>
</span><span class='line'>--with-mysql<span class="o">=</span>mysqlnd <span class="se">\</span>
</span><span class='line'>--with-mysqli<span class="o">=</span>mysqlnd <span class="se">\</span>
</span><span class='line'>--with-pdo-mysql<span class="o">=</span>mysqlnd <span class="se">\</span>
</span><span class='line'>--enable-simplexml <span class="se">\</span>
</span><span class='line'>--enable-dom <span class="se">\</span>
</span><span class='line'>--enable-phar <span class="se">\</span>
</span><span class='line'>--enable-tokenizer <span class="se">\</span>
</span><span class='line'>--enable-posix <span class="se">\</span>
</span><span class='line'>--enable-xmlwriter <span class="se">\</span>
</span><span class='line'>--enable-xmlreader <span class="se">\</span>
</span><span class='line'>--with-curl <span class="se">\</span>
</span><span class='line'>--with-iconv <span class="se">\</span>
</span><span class='line'>--with-mcrypt <span class="se">\</span>
</span><span class='line'>--enable-ctype <span class="se">\</span>
</span><span class='line'>--enable-opcache
</span><span class='line'>make
</span><span class='line'>make install
</span></code></pre></td></tr></table></div></figure>


<p>完整脚本可参见：
<a href="https://gist.github.com/jqlblue/6198630">在centos5上安装php5.5.0</a></p>

<p>备注：</p>

<pre><code>1. 安装php时，要指定安装目录(prefix)，以备出现问题时可以及时回滚
2. 安装扩展时同样需要注意，不要覆盖其他版本的扩展
   1) 使用绝对路径执行phpize
   2) 在configure时指定php5.5目录下的php-config，--with-php-config
   3) 编译扩展需要的lib库时，也要指定版本和安装目录
</code></pre>

<h5>2. php代码语法兼容性检测</h5>

<p>php每次大版本的升级，都会废弃一些函数，这些函数在新版本的php中使用的话，
就会报致命错误（Fatal error）。通过下面的方法，可以检测这些场景。</p>

<figure class='code'><figcaption><span>check-php5.5-compatibility.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="c">#use sh ./check-php-compatibility.sh /path/code</span>
</span><span class='line'><span class="k">if</span> <span class="o">[[</span> <span class="nv">$1</span> !<span class="o">=</span> <span class="s1">&#39;&#39;</span> <span class="o">]]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nv">SOURCE_ROOT</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">   </span><span class="nv">SOURCE_ROOT</span><span class="o">=</span><span class="s1">&#39;/path/code/src&#39;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nv">PHP_BIN</span><span class="o">=</span><span class="s1">&#39;/usr/local/php-5.5.0/bin/php&#39;</span>
</span><span class='line'><span class="k">for </span>file in <span class="k">$(</span>find <span class="k">${</span><span class="nv">SOURCE_ROOT</span><span class="k">}</span> -type f -iname <span class="s1">&#39;*.php&#39;</span><span class="k">)</span>; <span class="k">do</span>
</span><span class='line'>    <span class="k">${</span><span class="nv">PHP_BIN</span><span class="k">}</span> -d <span class="nv">error_reporting</span><span class="o">=</span>E_ALL -l <span class="nv">$file</span> | grep -v <span class="s1">&#39;No syntax errors detected&#39;</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>更多的信息，请参见 <a href="http://codeascraft.com/2012/08/10/static-analysis-for-php/">static-analysis-for-php</a></p>

<h5>3. 从服务器上收集请求情况</h5>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat access.log | awk -F <span class="s2">&quot;[ ?]&quot;</span> <span class="s1">&#39;{urls[$7]++} END {for(key in urls)print urls[key],&quot;\t&quot;,key}&#39;</span> | sort -nr
</span></code></pre></td></tr></table></div></figure>


<h5>4. 通过收集的请求url进行测试</h5>

<p>对于get方式的url请求，直接wget或者curl就好。</p>

<p>对于post方式的curl请求，需要用curl模拟post请求进行提交。同时需要在
webserver日志中记录post请求参数。</p>

<h5>5. 查看webserver的错误日志，进行改进</h5>

<h3>Improve</h3>

<p>上线后通过在nginx的access log中开启记录upstream_time和request_time进行
统计，php-5.5.0环境下接口的响应速度较5.2.5环境提升了(0.00487559-0.00366027)/0.00487559=24.9%</p>

<pre><code>php-5.5.0
total_request_time:196416 total_upstream_time:1122.52 total_request:306678 avg_requst_time:0.640464 avg_upstream_time:0.00366027

php-5.2.5
total_request_time:200400 total_upstream_time:1498.65 total_request:307378 avg_requst_time:0.651966 avg_upstream_time:0.00487559
</code></pre>

<p>统计脚本</p>

<pre><code>cat access.log | grep '/api/getInfo' | awk -F ')"' '{print $2}' | grep -v ' -' | awk 'BEGIN{_request=0;_upstream=0;_i=0}{_request+=$2;_upstream+=$3;_i+=1}END{print "total_request_time:"_request" total_upstream_time:"_upstream" total_request:"_i" avg_requst_time:"_request/_i" avg_upstream_time:"_upstream/_i}'
</code></pre>

<p>另外，做了php5.3.10和php.5.5.0的压测比较</p>

<pre><code>php5.3.10
Speed=30441 pages/min, 1224275 bytes/sec.
Requests: 30441 susceed, 0 failed.

php5.5.0
Speed=42514 pages/min, 1727526 bytes/sec.
Requests: 42514 susceed, 0 failed.
PHP 5.5 vs 5.3 improve 39% (708-507)/507=0.3964497041
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[移动应用无线抓包指南]]></title>
    <link href="http://jqlblue.github.io/blog/2013/08/04/guide-of-packet-mobile-capture/"/>
    <updated>2013-08-04T11:41:00+08:00</updated>
    <id>http://jqlblue.github.io/blog/2013/08/04/guide-of-packet-mobile-capture</id>
    <content type="html"><![CDATA[<h3>引子</h3>

<p>如果将互联网比喻成纵横交错的铁道，那由c，h，o等元素组成的人和物则被打
包装进一节节车厢，然后组成一列火车在铁道上穿行。手机，笔记本等终端，可
以理解为车站，每天都有很多人进进出出。</p>

<p>有一天，你突然发现车站少了个东西，或者想了解下都有些什么人出站，什么人
入站。这时，我们就需要抓包（Capturing Packages）。</p>

<p>继续以铁路为例。一般情况下，我们只要在装载这人和物的火车入站和出站的时候设置关卡，
进行检查就可以了。</p>

<p>但突然有天发现某个车站是德国人给造的，我们要私自设置
关卡的话，就没有保修了。</p>

<p>实际上，我们私自设置关卡也无防。现在的东西更新换代太快，等坏的时候，直
接入手一个新的，或许比保修还经济呢。</p>

<p>等要动手的时候，想起这个德国制造，还是有些不忍。</p>

<p>在你正想点燃那支兰州的当儿，想起西边有你表哥建造的一个车站。所以可以代
理一把，让要进出的火车先去你表哥的车站。</p>

<h3>抓包的三种方式</h3>

<p>至此，我们可以看到抓包的三种方式：</p>

<pre><code>1. 本地抓包
2. 远程服务器抓包
3. 代理抓包
</code></pre>

<h3>本地抓包</h3>

<p>不管使用手机还是平板，进出的数据包，都会经过该设备的网卡。如果你的设备
已经root，可以使用tcpdump将抓包数据存成xxx.pcap，然后在电脑上就可以使
用wireshark进行查看。也可以使用webview
<a href="http://www.cloudshark.org">cloudshark</a>。
更多信息请上google查询。</p>

<h3>远程服务器抓包</h3>

<p>从设备上发出的请求，在网络通畅的情况下，最终都会达到某个服务器。所以我
们可以在远程服务器上抓包。可以使用tcpdump，但是我更推荐ngrep(network
grep)。</p>

<p>在centos上，直接</p>

<pre><code>yum install ngrep
</code></pre>

<p>下面是一些简单示例</p>

<pre><code>ngrep -t -d any port 25
ngrep -q -W byline "(GET|POST).*"
</code></pre>

<p>更多用法请查看</p>

<pre><code>man ngrep
</code></pre>

<h3>代理抓包</h3>

<p>开始废话说地有点多，这才是本文的重点。</p>

<p>设置代理，就是要在你的移动终端和某台电脑之间网络互通的情况下：</p>

<pre><code>1. 在电脑上设置代理
2. 移动终端上网的时候连接这个代理
</code></pre>

<p>就可以在电脑上进行抓包了（<em>把一个陌生的概念转行成一个很熟悉的概念，
fiddle抓包嘛，码农应该都知道</em>）。</p>

<p>我们以移动终端与要进行代理抓包的电脑之间网络不通的情况为例进行说明（<em>如
果电脑和移动终端可以连接同一wifi，只要按照设置代理的部分进行操作就好</em>）</p>

<ul>
<li><p>在电脑上创建无线网络</p>

<p>  我们使用360随身wifi在电脑上创建无线网络。要购买的话，现阶段需要时常关注
  <a href="http://wifi.360.cn/">官网</a>,因为不定期会在京东开启抢购。安装非常简
  单，插入usb接口，就自动创建好无线网络了（目前只支持windows系统）</p>

<p>  <img src="http://jqlblue.github.io/images/360wifi_1.png" title="'360 wifi images'" >
  <img src="http://jqlblue.github.io/images/360wifi_2.png" title="'360 wifi images'" >
  <img src="http://jqlblue.github.io/images/360wifi_3.png" title="'360 wifi images'" ></p></li>
<li><p>在电脑上用fiddle设置代理</p>

<p>  <img src="http://jqlblue.github.io/images/360wifi_fiddle.png" title="'360 wifiproxy fidlle images'" ></p></li>
<li><p>修改手机上的网络设置，并设置代理</p>

<p>  <img src="http://jqlblue.github.io/images/360wifi_proxy_1.png" title="'360 wifi mobile network" >
  <img src="http://jqlblue.github.io/images/360wifi_proxy_2.png" title="'360 wifi mobile network" >
  <img src="http://jqlblue.github.io/images/360wifi_proxy_3.png" title="'360 wifi mobile network" ></p>

<p>  代理服务器的ip可以通过在电脑上查看网络连接获取，代理的端口就是在
  fiddle中设置的&#8221;listen on port&#8221;</p>

<p>  <img src="http://jqlblue.github.io/images/360wifi_proxy_ip.png" title="'360 wifi mobile network" ></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[broken pipe in php cli]]></title>
    <link href="http://jqlblue.github.io/blog/2013/08/03/broken-pipe-in-php-cli/"/>
    <updated>2013-08-03T20:08:00+08:00</updated>
    <id>http://jqlblue.github.io/blog/2013/08/03/broken-pipe-in-php-cli</id>
    <content type="html"><![CDATA[<p>下周打算把服务器上的php升级到5.5，综合老大的建议，计划按这个步骤进行：</p>

<hr />

<ul>
<li>下线一台服务器，另起目录安装php5.5</li>
</ul>


<p>安装过程与php5.3差不多，要开启zend opcache的话，需要在
configure时&mdash;enable-opcache。在php.ini中配置时，需要以zend_extension的
形式加载。</p>

<ul>
<li>从服务器访问日志中统计最近有请求的接口，按请求次数从大大小排序</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat access_log | awk <span class="s1">&#39;{print $7}&#39;</span> | awk -F <span class="s2">&quot;?&quot;</span> <span class="s1">&#39;{print $1}&#39;</span> | sort | uniq -c | sort -nr
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>通过已统计的接口列表（通过第二步产生），从访问日志中查询相关请求地
 址（包括相关参数）</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>access_log | grep  <span class="s1">&#39;/api/test&#39;</span> | head -n 1
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>绑定hosts，根据请求地址列表进行访问，观察web server和php的相关日志</li>
</ul>


<hr />

<p>进行到第三步，就卡住了。：（</p>

<p>“cat access_log | grep  &lsquo;/api/test&rsquo; | head -n 1”这条命令在shell下执行
没有问题，但是如果用php的shell_exec运行，就会出现 “grep: writing
output: Broken pipe”。</p>

<p>一顿google之后，遇到这篇文章Python中的SIGPIPE信号。对作者的示例代码做
了下加工后，发现一切正常了，修改后的python代码如下</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">subprocess</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">signal</span>
</span><span class='line'><span class="k">def</span> <span class="nf">reset_sigpipe</span><span class="p">():</span>
</span><span class='line'>    <span class="n">signal</span><span class="o">.</span><span class="n">signal</span><span class="p">(</span><span class="n">signal</span><span class="o">.</span><span class="n">SIGPIPE</span><span class="p">,</span> <span class="n">signal</span><span class="o">.</span><span class="n">SIG_DFL</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">output</span> <span class="o">=</span> <span class="n">subprocess</span><span class="o">.</span><span class="n">Popen</span><span class="p">(</span><span class="s">&quot;cat access_log | grep  &#39;/api/test&#39; | head -n 1&quot;</span><span class="p">,</span> <span class="n">shell</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">preexec_fn</span><span class="o">=</span><span class="n">reset_sigpipe</span><span class="p">,</span> <span class="n">stdout</span><span class="o">=</span><span class="n">subprocess</span><span class="o">.</span><span class="n">PIPE</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">output</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">read</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是我是要用php来做这件事，下面是php相关代码</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nv">$source</span> <span class="o">=</span> <span class="s1">&#39;./source_url.txt&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$dest</span> <span class="o">=</span> <span class="s1">&#39;./dest_url.txt&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$res</span> <span class="o">=</span> <span class="nb">file</span><span class="p">(</span><span class="nv">$source</span><span class="p">);</span>
</span><span class='line'><span class="nb">pcntl_signal</span><span class="p">(</span><span class="nx">SIGPIPE</span><span class="p">,</span> <span class="nx">SIG_DFL</span><span class="p">);</span>
</span><span class='line'><span class="nb">file_put_contents</span><span class="p">(</span><span class="nv">$dest</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">foreach</span> <span class="p">(</span><span class="nv">$res</span> <span class="k">as</span> <span class="nv">$row</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$row</span> <span class="o">=</span> <span class="nx">trim</span><span class="p">(</span><span class="nv">$row</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">strpos</span><span class="p">(</span><span class="nv">$row</span><span class="p">,</span> <span class="s1">&#39;http://&#39;</span><span class="p">)</span> <span class="o">!==</span> <span class="k">false</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nv">$command</span> <span class="o">=</span> <span class="s2">&quot;cat access_log | grep  &#39;</span><span class="si">{</span><span class="nv">$row</span><span class="si">}</span><span class="s2">&#39; | head -n 1 | awk &#39;{print </span><span class="se">\$</span><span class="s2">6</span><span class="se">\&quot;</span><span class="s2"> </span><span class="se">\&quot;\$</span><span class="s2">7}&#39; | awk -F &#39;</span><span class="se">\&quot;</span><span class="s2">&#39; &#39;{print $2}&#39; | awk &#39;{print $1</span><span class="se">\&quot;</span><span class="s2"> http://test.api.com</span><span class="se">\&quot;</span><span class="s2">$2}&#39;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$check</span> <span class="o">=</span> <span class="nb">system</span><span class="p">(</span><span class="nv">$command</span><span class="p">);</span>
</span><span class='line'>    <span class="nb">file_put_contents</span><span class="p">(</span><span class="nv">$dest</span><span class="p">,</span> <span class="nv">$check</span> <span class="o">.</span> <span class="nx">PHP_EOL</span><span class="p">,</span> <span class="nx">FILE_APPEND</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>和python中的signal.signal(signal.SIGPIPE, signal.SIG_DFL)一样，关键是
这句:</p>

<pre><code>pcntl_signal(SIGPIPE, SIG_DFL)
</code></pre>

<p>当php进程接收到SIGPIPE信号时，重置
为系统默认处理方式，即接收子进程的返回值。</p>

<p><strong>问题解决了，但是原因呢？</strong></p>

<p>我们再看看这行命令</p>

<pre><code>cat access_log | grep  '/api/test' | head -n 1
</code></pre>

<p>head命令在取得一行后立即退出（exit），此时pipe的读端就没了，但grep还会
继续往pipe写，此时pipe就会发送SIGPIPE信号，默认动作是终止程序。在shell
下执行时，grep收到SIGPIPE信号就退出了，所以运行没有问题。</p>

<p>但在通过php的shell_exec或者system运行为何就有问题。应该是php忽略了
SIGPIPE信号，所以grep会继续向broke pipe（读端关闭）写入，于是就出现了</p>

<pre><code>grep: writing output: Broken pipe
</code></pre>

<p>在天朝，有图也不一定是真相。所以应该是，也不一定是。废话少说，我们直接
上代码：</p>

<pre><code>$grep -r 'SIGPIPE' ./
./sapi/cli/php_cli.c:   signal(SIGPIPE, SIG_IGN); /* ignore SIGPIPE in standalone mode so
</code></pre>

<p>所以php以cli的形式运行时，会忽略SIGPIPE信号。</p>

<p>reference：</p>

<blockquote><p><a href="https://blogs.oracle.com/opal/entry/using_php_5_5_s">https://blogs.oracle.com/opal/entry/using_php_5_5_s</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[check php5.5 compatibility]]></title>
    <link href="http://jqlblue.github.io/blog/2013/08/03/check-php5-dot-5-compatibility/"/>
    <updated>2013-08-03T18:16:00+08:00</updated>
    <id>http://jqlblue.github.io/blog/2013/08/03/check-php5-dot-5-compatibility</id>
    <content type="html"><![CDATA[<p>github上有个项目可以检测php5.3，5.4的兼容性，如下：
<a href="https://github.com/wimg/PHPCompatibility">https://github.com/wimg/PHPCompatibility</a></p>

<p>如果最近你想把php升级到5.5，尝试下generators和coroutines，这个应该对你
有帮助。也可以参见博文：</p>

<p><a href="http://techblog.wimgodden.be/2012/03/04/php-5-4-compatibility-checks-using-php_codesniffer/">http://techblog.wimgodden.be/2012/03/04/php-5-4-compatibility-checks-using-php_codesniffer/</a>
第一次尝试时，可能因为php配置的问题（date.timezone），所以没有检测出任
何东西。</p>

<p>在php.ini中设置了</p>

<blockquote><p>date.timezone = Asia/Shanghai</p></blockquote>

<p>之后，发现效果不错，只是显示的行号有问题，而且检测的速度不尽人意。</p>

<p>所以我在安装完php5.5后，写了个shell脚本，用php -l来检测。内容如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">SOURCE_ROOT</span><span class="o">=</span><span class="s1">&#39;/path/php-code&#39;</span>
</span><span class='line'><span class="nv">PHP_BIN</span><span class="o">=</span><span class="s1">&#39;/usr/local/php-5.5/bin/php&#39;</span>
</span><span class='line'><span class="k">for </span>file in <span class="k">$(</span>find <span class="k">${</span><span class="nv">SOURCE_ROOT</span><span class="k">}</span> -type f -iname <span class="s1">&#39;*.php&#39;</span><span class="k">)</span>; <span class="k">do</span>
</span><span class='line'><span class="k">    </span><span class="nv">check_syntax</span><span class="o">=</span><span class="k">$(${</span><span class="nv">PHP_BIN</span><span class="k">}</span> -l <span class="nv">$file</span> | grep -v <span class="s1">&#39;No syntax errors detected&#39;</span><span class="k">)</span>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>使用方法：</p>

<blockquote><p>sh /path/check-php-compatibility.sh > check-result.txt</p></blockquote>
]]></content>
  </entry>
  
</feed>
