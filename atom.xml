<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jqlblue's Blog]]></title>
  <link href="http://jqlblue.github.io/atom.xml" rel="self"/>
  <link href="http://jqlblue.github.io/"/>
  <updated>2015-12-20T15:30:42+08:00</updated>
  <id>http://jqlblue.github.io/</id>
  <author>
    <name><![CDATA[jqlblue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[奶爸攻略]]></title>
    <link href="http://jqlblue.github.io/2015/12/15/guide-of-kid-gang/"/>
    <updated>2015-12-15T22:51:00+08:00</updated>
    <id>http://jqlblue.github.io/2015/12/15/guide-of-kid-gang</id>
    <content type="html"><![CDATA[<p>有一天，当你早上出门时，有一个会小孩摇摇晃晃地走到门口，对你伸开怀抱；对你晚上推开家门时，他／她手里拿着玩具，无邪地开心对你笑，用稚嫩的声音叫你一声爸爸。</p>

<!-- more -->


<p>当这么一个小孩降临到这个世上，来到你身边时，也会因为生病让你揪心，哭闹让你烦躁。</p>

<p>作为一个不称职的奶爸，汇总了小孩成长过程中的一些点滴，希望对初为人父的你有所帮助。</p>

<h1>新生儿所需物品清单</h1>

<ul>
<li>小剪刀</li>
</ul>


<blockquote><p>小孩皮肤稚嫩，指甲长了，容易把自己抓伤。</p></blockquote>

<p><img src="http://jqlblue.github.io/images/kid-gang/jiandao.png" title="小剪刀" ></p>

<ul>
<li>屁屁油</li>
</ul>


<blockquote><p>我们家小孩经常红屁屁，机缘巧合中发现了下面这个，强烈推荐。</p></blockquote>

<p><img src="http://jqlblue.github.io/images/kid-gang/pipiyou.png" title="屁屁油" ></p>

<ul>
<li>温度计</li>
</ul>


<blockquote><p>初生儿怕热，屋里挂个温度计，经常看看，不要让屋里温度过高。</p></blockquote>

<p><img src="http://jqlblue.github.io/images/kid-gang/wenduji.png" title="温度计" ></p>

<ul>
<li>小夜灯</li>
</ul>


<blockquote><p>方便晚上给小孩喂奶，换尿布。</p></blockquote>

<p><img src="http://jqlblue.github.io/images/kid-gang/xiaoyedeng.png" title="小夜灯" ></p>

<ul>
<li>爽身粉</li>
</ul>


<blockquote><p>小孩新生代谢旺盛，需要保持腋窝等部位的干燥。</p></blockquote>

<p><img src="http://jqlblue.github.io/images/kid-gang/songhuafeng.png" title="爽身粉" ></p>

<ul>
<li>婴肤霜</li>
</ul>


<blockquote><p>基本上每个小孩都要长湿疹，下面这个婴肤霜不错。</p></blockquote>

<p><img src="http://jqlblue.github.io/images/kid-gang/yingfushuang.png" title="婴肤霜" ></p>

<h1>尿不湿的选择</h1>

<blockquote><p>选择尿不湿的不二法门就是：没有最好，只有更适合。</p></blockquote>

<p>我们家小孩使用过的尿不湿品牌如下：</p>

<p><img src="http://jqlblue.github.io/images/kid-gang/niaobushi1.png" title="尿不湿" ></p>

<p><img src="http://jqlblue.github.io/images/kid-gang/niaobushi2.png" title="尿不湿" ></p>

<p><img src="http://jqlblue.github.io/images/kid-gang/niaobushi3.png" title="尿不湿" ></p>

<blockquote><p>如果小孩红屁屁比较严重，可以换成尿布试试。</p></blockquote>

<p><img src="http://jqlblue.github.io/images/kid-gang/niaobu.png" title="尿布" ></p>

<h1>FAQ</h1>

<ul>
<li>母乳喂养or not</li>
</ul>


<p>这个社区医院的大夫都会讲。</p>

<p>我们家小孩是母乳喂养，半岁之前，基本上没生病。</p>

<blockquote><p>母乳喂养期间，妈妈要多喝汤，不要太重口，保持好心情。</p></blockquote>

<ul>
<li>小孩出疹子怎么办</li>
</ul>


<p>出疹子，好像是一岁之前的大部分小孩都要经历的，在出疹子之前，会先持续高烧。烧退了就出疹子（身上长小红疙瘩），一般都会自行消退。</p>

<p>发烧期间，是很揪心的，要美林和物理降温齐上。</p>

<ul>
<li>小孩打嗝怎么办</li>
</ul>


<p>小孩的消化系统不健全，所以经常会见他／她专注地打嗝。</p>

<p>一般情况下，喝点水或者喝点奶就压下去了。</p>

<p>要嗝地太厉害，一般方法不管用时，可以把他／她弄哭，大哭一场之后就好。</p>

<blockquote><p>这个方法有点残忍，但是很凑效。</p></blockquote>

<ul>
<li>发烧和呕吐注意事项</li>
</ul>


<p><img src="http://jqlblue.github.io/images/kid-gang/fare.jpg" title="发烧" ></p>

<p><img src="http://jqlblue.github.io/images/kid-gang/out.jpg" title="呕吐" ></p>

<ul>
<li>其他需要注意的事项</li>
</ul>


<p>当个小孩不容易，作为老爸，尽量多抽时间陪陪小孩。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0821EP培训－去发现醒觉的力量]]></title>
    <link href="http://jqlblue.github.io/2015/08/24/0821-the-road-of-awakening/"/>
    <updated>2015-08-24T13:29:00+08:00</updated>
    <id>http://jqlblue.github.io/2015/08/24/0821-the-road-of-awakening</id>
    <content type="html"><![CDATA[<p>有部电影里说，我们知道很多道理，但是依旧过不好这一生。</p>

<!--more-->


<p>两天半的培训结束了，有收获，也有遗憾。</p>

<p>前半天的培训，我更像个旁观者，仅仅是看着大家一个个上去自我介绍，然后我应付地上去做了个介绍。后面的游戏环节，虽然我很早意识到了需要多个组配合才能完成游戏，但是，我并没有为团队贡献太多，看着场上混乱的场景，我只是和另外一个组员去给别人拼图（拼好后被别的组拿走了）。在回家的路上，我决定第二天做两件自己不想做的事情。</p>

<p>第二天的培训，自己的固有思维一直处于上风。我没有主动发言（曾经争取过一次机会，因为老师没有看到，就放弃了）。在最后的两队选队长pk环节，我也没有主动去争取。在找学员说伤心往事时，我的心门也没有完全打开。</p>

<p>最后一天，我在组内主动分享我的感悟和经历，我奋力去冲破障碍。拿出自己的活力，很有信心地单腿跳着跨过毕业线。主动找助教合影，找别的组的学员索取联系方式。当我从学员身边走过，我感觉很轻松。当我坐车离开酒店时，心里暖暖地。</p>

<p>这两天半的课程，或许不会马上对我所有改变，有所提升。但是，一些可以打破我固有思维模式的种子，已经种下。</p>

<p>让自己打开心扉，卸下防御；让自己加强自己的进取心，加强那份求胜的渴望；让自己尝试做一些改变；去平衡事业，家庭，身体健康，金钱财物，心灵成长，教育学习，人际关系，休闲娱乐。这些，我已经意识到了。</p>

<p>我已经不想一直安静地做一个技术男了，我可以去尝试小龙虾，可以去尝试各种稀奇古怪的美食，让我的生活有所不同。</p>

<p>遗憾是，课堂中，我并没有去争取可以锻炼自己的机会，我还是会很在乎别人的眼光。</p>

<p>接下来，自己会制订相关计划。至少，每天会坚持做两件自己之前没有尝试过的事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再见360]]></title>
    <link href="http://jqlblue.github.io/2015/07/01/mark-360/"/>
    <updated>2015-07-01T16:18:00+08:00</updated>
    <id>http://jqlblue.github.io/2015/07/01/mark-360</id>
    <content type="html"><![CDATA[<p>离开360有一年的时间了。虽然老周的手机目前没了消息。但是再次去看这家在经历3Q，3B大战后，依然能活跃在互联网风头浪尖的公司，还是有不少感悟。</p>

<!--more-->


<h1>360的历史</h1>

<p><img src="http://jqlblue.github.io/images/360_timeline.jpg" title="'history of 360" ></p>

<p>360的前身是奇虎，现在也叫<code>奇虎360</code>。奇虎当时有3个业务方向：</p>

<ul>
<li>奇虎搜索</li>
<li>社区口碑营销</li>
<li>360</li>
</ul>


<p>当时，主要的人力都投入了奇虎搜索。360属于一个边缘业务，其前身是<code>流氓克星</code>，用于干掉其它浏览器插件，并在浏览器上推荐奇虎搜索插件。</p>

<p>大家最早所知道的360叫<code>360安全卫士</code>，被定位成“口碑项目”，即：</p>

<ul>
<li>不求商业利益</li>
<li>开放源代码</li>
<li>任何时候都可交给第三方运营</li>
</ul>


<p>在06年反流氓软件的大潮中，360的项目负责人在民间组织了一个叫<code>360督导委员会</code>的实体讨论组。其承诺是：不以盈利为目的、只为打击流氓软件，并保证360自己不做流氓软件。</p>

<p>后来，360安全卫士的总安装量达到了几千万，每天就有几十万的新安装量，而其它两条业务线，依然没有太大起色。到08年的时候，老周痛下决心，全力做360。</p>

<h1>360的用户观</h1>

<p>了解360的人都知道，<code>用户利益至上</code>，是老周在任何场合基本上都会强调的，这主要体现其强有力的运营体系。</p>

<ul>
<li>每一款上线的产品，基本都有<code>意见反馈</code>入口</li>
<li>每一款开始运营的产品，在<code>360bbs</code>上都有相关板块。</li>
</ul>


<p><img src="http://jqlblue.github.io/images/360_bbs.jpg" title="'bbs of 360" >
<img src="http://jqlblue.github.io/images/360_bbs_zhushou.jpg" title="'bbs of 360 zhushou" ></p>

<ul>
<li>用户提交的任何反馈，都能在24小时内得到运营人员的反馈。</li>
</ul>


<p>记得有一年十一假期，正在家里配置我的<a href="http://jqlblue.github.io/2014/02/28/emacs24-on-mac-and-linux/">emacs</a>，突然接到运营的反馈，说助手id化服务出了问题，有用户反馈经验值降了，还有截图。</p>

<p>我vpn登录公司网络，查看服务<a href="http://jqlblue.github.io/2014/10/01/use-graphite-and-alter-build-monitor-system/">监控和报警</a>，都在正常运行，于是第一时间联系了dba。</p>

<p>然后就得到了一个很悲惨的消息，dba在维护数据期间，将id化服务的redis实例回滚到了2天之前，正在想办法恢复，不过没有最新的数据备份。我只好将这个噩耗反馈给了运营，并答应尽快恢复。</p>

<p>挂了电话没多久，就收到了运营发的邮件，有故障的相关描述，用户的联系方式，目前的处理进度和责任人，并且cc了一大堆人。</p>

<p>突然感觉压力山大，感觉整个假期都要废掉了。</p>

<p>好在和同事沟通后，通过重放服务器访问日志，将丢失的经验值又给增加了回去。</p>

<h1>360的产品观</h1>

<p>360现在的产品，已经覆盖了<code>PC</code>，<code>手机</code>，<code>智能硬件</code>以及<code>海外市场</code>。</p>

<p><img src="http://jqlblue.github.io/images/360_product.jpg" title="'product of 360" ></p>

<p>在产品方面，老周经常会说的一个词叫<code>小白用户</code>。其<code>小白哲学</code>不仅体现在360的产品在功能和交互层面，让普通小白用户都可以轻易上手使用，还抓住了普通用户<code>宁信其有、不信其无</code>的心态。</p>

<p>例如，借鉴ipad界面交互的<code>360安全桌面</code>，曾经每天有好几千万的活跃用户。而<code>360安全卫士</code>的红色弹窗，也会很自然让<code>小白用户</code>积极地使用360安全卫士给windows系统打补丁，修复漏洞。</p>

<p>老周经常提及的另外一个词叫<code>小步快跑</code>。</p>

<p>在360内部，有很多产品都是由一个产品经理，拉上两个研发，开发一两周，然后随着某一个beta版对外发布。发布后持续关注相关<code>统计数据</code>和<code>用户反馈</code>，不断放量或者进行功能改进。</p>

<p>第一版<code>手机游戏wap站</code>，就是在没有前端开发人员的情况下，由三个后端在不到一周的情况下完成了后台数据的整理入库和前端产品上线。</p>

<h1>360的人才观</h1>

<p>最近360股价不是很给力，所以有些重金挖过来的人才，又去投奔了新的东家。</p>

<p>但是，铁打的营盘，流水的兵。业务和产品总是要向前发展，各条线上，不乏中流砥柱。</p>

<p>纵观现在在一些关键岗位上的人员，有不少都是校招过来的。</p>

<p>这或许就是曾经要成立360学院的初衷。</p>

<p><img src="http://jqlblue.github.io/images/360_xueyuan.jpg" title="'institute of 360" ></p>

<h1>一些历史事件</h1>

<h3>3q大战始末</h3>

<p><img src="http://jqlblue.github.io/images/3q_event.jpg" title="'the war of 360 and qq" ></p>

<p>我没有第一时间接触到3q大战的始末，但是我加入360的时候，公司是不允许安装qq的。</p>

<p>3q大战过去这么久，作为当时国内第一大桌面客户端qq和第二大桌面客户端360安全卫士对战的利益冲突点，似乎已经不那么重要。</p>

<p>当时sns在国内还没有完全兴起，在短短几天的时间内，如何去引爆几千万客户端参与这场战斗，这依然离不开强大的运营。其中包括：</p>

<ul>
<li>在360成名之前，就通过督导版等一系列策略，沉淀了一批忠实用户</li>
<li>健全的产品更新策略，又包括<code>用户主动拉取的更新</code>和<code>推送给用户的更新</code>（即被神秘化的v3）</li>
<li>畅通的用户反馈渠道和数据分析能力</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[学习卓有成效（转自彼得德鲁克《卓有成效的管理者》读书笔记）]]></title>
    <link href="http://jqlblue.github.io/2015/04/30/study-to-effective/"/>
    <updated>2015-04-30T22:49:00+08:00</updated>
    <id>http://jqlblue.github.io/2015/04/30/study-to-effective</id>
    <content type="html"><![CDATA[<p>学习如何卓有成效。</p>

<!--more-->


<h1>《卓有成效的管理者》读书笔记</h1>

<p>先看了德鲁克的《卓有成效的管理者》，觉得写得真好。就反过去找来他的《管理的实践》，大略的看完了。后面这本书可以算是管理学的百科全书，极为详尽，说事论理非常透彻，假如要研习管理学，这本书应该可算是必读书；不过也因为太过详尽了点，对于只想浅尝辄止的人就不是特别适合了。</p>

<p>适合的应该是这本《卓有成效的管理者》，讲的并不是如何管理一个组织的方方面面，而是一个人如何能够成为有效的管理这个组织的管理者的方法。而按照德鲁克的讲法，所有从事知识工作的人，他本身所从事的工作，即便是他并不在一个明显的管理者的位置上，其实也是在做管理。所以从这个角度说，这本书就是所有从事知识工作的人的必读书。</p>

<ul>
<li><p>知识工作的有效性与体力劳动不同。对于后者，一般有很明确的“对的事情”的定义，要做的只是把这些已经明了的对的事情最好。而对于知识工作，尽管也许我们知道要达到的目标（甚至有时候目标也是不明确的），在一开始我们却总是不知道什么才是达到目标“对的事情”&mdash;这种对于如何做事必须进行规划的要求，正是知识工作本身需要管理的本质原因所在。对于体力劳动，勤奋总是有助于效率；而对于知识工作，假如对“如何去做”这个问题考虑不清楚，勤奋可能适得其反。</p></li>
<li><p>授权。错误的认识：我的工作应该由别人来做；充分授权之后，最闲散的经理人便是最好的经理人。正确认识：把可以别人做的事情交给别人，这样才能做真正应该自己做的事情。其实我一直相信“最闲散的经理人便是最好的经理人”这个有关授权的错误认识，认为一个组织良好的机构，管理者可以撒手而组织运行良好。这固然不是没有任何道理，一个设计优良的组织应该有抗单个节点失效（即便这个节点是最高管理者）的鲁棒性，然而，如果一个管理者可以从组织中消失而不引起任何不良后果，那这个管理者本身在组织中就是冗余的－他本来就不需要在那里。</p></li>
<li><p>零碎的时间和整块的时间不同，即便加起来的总量相同。对于严肃的思考工作，必须有大块的不受打扰的时间才可以，零碎的时间再多也难以进行富有成效的使用。</p></li>
<li><p>所谓会议，顾名思义，是靠集会来商议，是组织缺陷的一种补救措施。一个结构设计理想的组织，应该没有任何会议。这一点有其深意。</p></li>
<li><p>重视贡献，就是重视有效性。这里是说，有效性是以目标导向的。重视所能够做出的贡献，并为了这些贡献而做努力，是通往有效性的必然途径。</p></li>
<li><p>管理工作所看的，只是一个人的优点。这是所有不掺杂私人关系的社会关系中所应该看重的东西。一个人的缺点重要，仅当这个人跟你有私人关系，你关心他的个人成长的时候才重要。</p></li>
</ul>


<h1>[箴言]彼得．德鲁克：管理者，就必须卓有成效</h1>

<ul>
<li><p>有效的管理者在用人所长的同时，必须容忍人之所短。</p></li>
<li><p>一个重视贡献的人，为成果负责的人，不管他职位多么卑微，仍属于“高层管理者”。</p></li>
<li><p>有效的管理者用人，是着眼于机会，而非着眼于问题。</p></li>
<li><p>有效的决策人，首先要辨明问题的性质:这是一再发生的经常性问题呢，还是偶然的例外?</p></li>
<li><p>有效的管理者不做太多的决策。他们所做的，都是重大的决策。</p></li>
<li><p>应该将行动纳入决策当中，否则就是纸上谈兵。</p></li>
<li><p>有效的管理者要的是决策所产生的影响，而非技巧;他们要的是合理有效的决策，而非乖巧的决策。</p></li>
<li><p>有效的管理者都知道，一项决策不是从搜集事实开始的，他们首先都有自己的见解。</p></li>
<li><p>我们该知道运用自己上司的长处，这也正是下属工作卓有成效的关键。</p></li>
<li><p>管理者，就必须卓有成效。</p></li>
<li><p>卓有成效是一种习惯，是通过不断训练达成的。</p></li>
<li><p>“认识你的时间”，只要你肯，这就是一条卓有成效之路。</p></li>
<li><p>管理者的一项具体任务，就是要把今天的资源投入到创造未来中去。</p></li>
<li><p>有效的管理者坚持把重要的事放在前面做，每次只做好一件事。</p></li>
<li><p>“专心”是一种勇气，就是敢于决定真正该做和真正先做的工作。</p></li>
</ul>


<p>reference：</p>

<p>[^1] <a href="http://www.jianshu.com/p/358ff4e67931">http://www.jianshu.com/p/358ff4e67931</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[互联网创业公司是否需要后端工程师]]></title>
    <link href="http://jqlblue.github.io/2015/03/30/does-startup-company-need-backend-development-engineer/"/>
    <updated>2015-03-30T18:05:00+08:00</updated>
    <id>http://jqlblue.github.io/2015/03/30/does-startup-company-need-backend-development-engineer</id>
    <content type="html"><![CDATA[<p>随着LeanCloud等<code>baas</code>云服务的兴起，对于一个互联网创业公司而言，是否还需要专门的后端工程师？</p>

<!-- more -->


<p>一个典型的web app的架构如下：</p>

<p><img src="http://jqlblue.github.io/images/baas/app_struct.png" title="web app典型架构" ></p>

<p>客户端或者浏览器调用后端服务，进行数据的写入和读取。让用户通过互联网，完成信息的交换。</p>

<p>以一个b-s结构的web服务为例，其前后端基本架构大致如下：</p>

<p><img src="http://jqlblue.github.io/images/baas/simple_web_struct.png" title="web 服务的前后端基本架构" ></p>

<p>前端主要负责用户界面的布局和交互处理，后端包括：</p>

<pre><code>1. 后端业务逻辑处理
2. 与前端用户界面进行相关交互
</code></pre>

<p>而一个要运行在生产环节下的后端服务架构，应该大致是下面这个样子：</p>

<p><img src="http://jqlblue.github.io/images/baas/web_struct.png" title="web web服务后端架构" ></p>

<p>后端服务并不是直接对数据库进行写入和查询操作，每一次到达后端服务的请求，都附带着自身的业务逻辑。</p>

<p>虽然我们可以剥离某些与业务不是强关联的模块，增加一层公共服务。但是由于每个公司商业模式和运营需求的限制，业务逻辑的<code>领域</code>特性，会一直存在。</p>

<p>而现在的<code>baas</code>等服务，主要提供的是数据存储、实时消息、统计分析以及扩展组件等基础公共服务。有了这些服务，的确满足业务需求的情况下，降低后端服务的开发成本。</p>

<p>互联网的核心价值是：</p>

<pre><code>平等，共享，透明，高度化的信息对称
快速和善变，强烈的交互式客户体验
</code></pre>

<p><code>信息</code>（数据）和<code>交互体验</code>（前端ui）都很重要。</p>

<p>当然，随着<code>baas</code>服务的发展，对于业务逻辑不是很复杂的互联网应用，的确可以完全使用<code>baas</code>服务替代现有的后端服务。但是这样就会把后端逻辑变成一个黑盒。出了问题只能等待baas服务提供商解决。</p>

<p>对于创业公司而言，在选择类似的服务时，需要根据自身的业务形态和人员配备等，在前期的人员投入，后期的维护成本以及业务的最终形态，系统的扩展性，数据的安全性等方面，进行权衡。</p>

<p>而身处创业公司的后端工程师，也需要积极了解行业动态，如果使用<code>baas</code>服务能满足业务需求的，也就没有必要再去重复开发。</p>

<blockquote><p>baas（Backend as a Service）</p></blockquote>

<p>即软件即服务，如APICloud，LeanCloud。</p>

<blockquote><p>paas（Platform as a Service）</p></blockquote>

<p>即平台即服务，如google的gae，sina的sae。</p>

<blockquote><p>laas（Infrastructure as a Service）</p></blockquote>

<p>即基础设施即服务，如亚马逊的aws，阿里云，腾讯云，linode。</p>

<blockquote><p>saas（Software as a Service）</p></blockquote>

<p>即软件即服务，如云盘。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[那个套模版的，放开你的F5]]></title>
    <link href="http://jqlblue.github.io/2015/02/28/release-f5-for-template-engineer/"/>
    <updated>2015-02-28T18:29:00+08:00</updated>
    <id>http://jqlblue.github.io/2015/02/28/release-f5-for-template-engineer</id>
    <content type="html"><![CDATA[<p>老江说过：“科学技术是第一生产力”。技术的魅力在于通过改善相关流程或者提供相关工具，对人们的生活进行改善，make live esaier。</p>

<!-- more -->


<p><em>对于自喻为模版工程师的同行们，套模版的流程大抵是：</em></p>

<pre><code>写代码，保存

打开浏览器，按F5刷新页面，检查相关前端效果
</code></pre>

<p>我记得<a href="http://weibo.com/yjf10">轩脉刃</a>曾经写过一个统计鼠标按键的小工具。如果对模版工程师工作时键盘的按键进行统计，那么F5的使用率肯定不容忽视。</p>

<p>倘若能在代码保存后就自动刷新浏览器，那不仅能解放模版工程师的F5按键，也能提升他们的开发效率。突然感觉非常美妙。</p>

<p>我记得有人说过，这个世界上不缺乏原创的idea，缺的只是一双能发现它的眼睛。</p>

<p>正如<code>livereload</code>所说的－“The Web Developer Wonderland”。</p>

<p>使用<code>livereload</code>，<em>通过如下几个步骤</em>，就可以做到当我们保存代码后，自动刷新浏览器中相关页面内容。</p>

<blockquote><p>安装livereload浏览器扩展</p></blockquote>

<p>相关浏览器扩展的下载地址如下：</p>

<p><a href="http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions">browser extensions</a></p>

<blockquote><p>安装livereload server端</p></blockquote>

<p>安装python环境，然后在终端执行</p>

<pre><code>pip install livereload
</code></pre>

<p>或者</p>

<pre><code>easy_install livereload
</code></pre>

<blockquote><p>启动livereload server端</p></blockquote>

<p>假设我的代码目录在<code>/home/galendy/code/demo</code>，在终端执行</p>

<pre><code>livereload /home/galendy/code/demo
</code></pre>

<blockquote><p>点击浏览器扩展</p></blockquote>

<p><code>livereload</code>的基本原理是：</p>

<pre><code>livereload server端会启动本地的socket服务（默认开放本地的35729端口），当监听的目录下的文件内容有变化时，向该socket写入数据

livereload浏览器扩展会连接本地的35729端口，当有新消息到来时，会在浏览器中插入一段js代码，刷新当前页面
</code></pre>

<p>实际上，前端工程师还会使用<code>livereload</code>完成css，js等文件的合并和压缩。想要了解更多，请参考：</p>

<p><a href="http://livereload.com/">livereload</a></p>

<p><a href="http://livereload.readthedocs.org/en/latest/">python livereload</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[互联网信息分类方法]]></title>
    <link href="http://jqlblue.github.io/2015/01/25/categorize-web-information/"/>
    <updated>2015-01-25T19:12:00+08:00</updated>
    <id>http://jqlblue.github.io/2015/01/25/categorize-web-information</id>
    <content type="html"><![CDATA[<p>目前，虽然搜索已经代替分类目录（google颠覆yahoo模式）成为人们获取信息的主要途径，但是没有好的信息分类，再好的搜索也是白搭。只有信息足够格式化，标准化，搜索才有效。即分类提升展示逻辑，搜索输出内容结果。</p>

<!--more-->


<h1>如何判定分类的好坏</h1>

<p>一个好的分类方法需要做到如下几点：</p>

<ul>
<li>能够涵盖集合中的所有元素</li>
<li>类和类之间不能重叠</li>
<li>能够比较容易地为每一个元素找到其对应的分类</li>
</ul>


<h1>常见的分类方法</h1>

<h2>分类之前的准备工作</h2>

<p>在对信息进行分类之前，可以先做如下几件事：</p>

<h5>1. 明确如下问题</h5>

<p>信息如何产生？如何组织关联？通过什么渠道传播？</p>

<h5>2. 观察别人</h5>

<p>可以去一家真正的商店看看，或者参观一座图书馆，还可以拜访竞争对手的商店。</p>

<h5>3. 研究竞争对手</h5>

<p>访问竞争对手的网站。他们是怎样组织信息的？要对多种组织方案加以比较。存在哪些相似之外？又有哪些区别？要尽量明确竞争对手为什么做出那样的选择。这是失误还是明智之举？你甚至可以对他们的网站做可用性测试，从而发现其组织方案中哪些方面奏效，哪些部分没有意义。</p>

<h2>常见的分类方法</h2>

<h5>1. 主题分类法</h5>

<p>主题分类法的特征是选择某一个主题作为一阶类目，在一阶类目下又可分若干二阶类目，二阶类目下再分若干三阶类目，形成一个大的树形结构。同阶的类目按照字顺排序。</p>

<p>由于网络资源数不胜数，所以一般会选取14-24个热点事物作为一阶分类，分类的阶数为3到6级。</p>

<p>其优点是可以将事物相关的内容全部集中在一起。如汽车大类下可包含汽车制造，交易，保养，维修，赛车等等子类目。但是容量较小，对网络资源的覆盖率有限。</p>

<h5>2. 分面分类法</h5>

<p>分面分类法是根据实物都具有多维度的特征而建立的。可以将信息分成定义明确、互斥的区域。常见的是按字母顺序、按年表、按地理位置等分类。也可按照如下类型进行分类：</p>

<ul>
<li>按主题；设计时需要定义好内容的范围，注意涵盖面的广度</li>
<li>按任务；将内容和应用程序组织成流程、功能或工作的集合。最常见的是电商网站</li>
<li>按用户；如果用户群可以界定的比较清楚，可以提供很好的个性化服务，但模糊性依然存在，对系统“猜测”的要求很高</li>
<li>按隐喻；多用于游戏</li>
<li>混用以上类型</li>
</ul>


<h5>3. 卡片分类法</h5>

<p>卡片分类就是把类似的东西放在一起。</p>

<ul>
<li>把你收集的各种信息整理出来写在卡片上。(如果没有，可以用一堆CD或者照片代替，可以是任何东西，只要数量足够多，可以零乱散落在地板上)</li>
<li>把所有卡片从盒子里倒在地板上。</li>
<li>把所有卡片从盒子里倒在地板上。</li>
<li>现在开始分组。如果你看到某些东西与另外一些东西相像，就把它们放在一起。</li>
<li>最后，当分组完毕时，再拿一些背面有胶的便条标出每一个堆的名称，分类完毕。</li>
</ul>


<h5>4. 公众分类法</h5>

<p>所谓&#8221;公众分类法&#8221;，就是由公众来为信息贴加标签（tagging），被使用最多的标签就最能说明这条信息的特点。</p>

<p>使用标签分类，非常的便捷，而且易于组合，但是也存在一些问题：</p>

<ul>
<li>不同的用户对相同的标签，往往有不同的理解，比如在&#8221;工具&#8221;标签下，可能会发现彼此完全没有关系的内容。</li>
<li>同义词问题。用户可能使用同义词作为标签，比如&#8221;tv/television&#8221;，&#8221;Holland/Netherlands/Dutch&#8221;，&#8221;超级女生/超女&#8221;。英语中，还存在复数问题。</li>
<li>词的多义性问题。比如&#8221;china&#8221;这个标签，到底指中国，还是指瓷器。</li>
<li>用户的标签五花八门，可能会产生大量&#8221;噪音&#8221;，加重系统负担，降低分类的准确性。</li>
</ul>


<p>所以，最好的解决方法应该是，自上而下的目录分类法与标签式的公众分类法相结合，然后对能够用作标签的词汇进行控制（controlled vocabulary），不能什么词都用来当标签。</p>

<h1>实施建议</h1>

<ul>
<li>尝试按照主题分类和分面分类发进行分类</li>
<li>试试卡片分类</li>
<li>使用2的标准去判定分类是否合理</li>
<li>如果单纯的分类无法解决问题，考虑下打标签（公众分类法）</li>
</ul>


<p>reference：</p>

<p>[^1] <a href="http://zhanglichuan.me/resolve-ia">http://zhanglichuan.me/resolve-ia</a></p>

<p>[^2] <a href="http://www.ruanyifeng.com/blog/2007/01/categories.html">http://www.ruanyifeng.com/blog/2007/01/categories.html</a></p>

<p>[^3] <a href="http://www.uegeek.com/reading/web_ia_note">http://www.uegeek.com/reading/web_ia_note</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014年总结－但行好事，莫问前程]]></title>
    <link href="http://jqlblue.github.io/2014/12/31/user-nginx-proxy-cache-mirror-website/"/>
    <updated>2014-12-31T10:28:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/12/31/user-nginx-proxy-cache-mirror-website</id>
    <content type="html"><![CDATA[<p>2014年，是特别的一年。对于码农而言，这一年的过去，可以当作是第二个千年的结束。当然，也将是新千年的开始，期待ing。</p>

<!-- more -->


<p>这一年，有个同学博士毕业，还有一个同学荣升副教授。最重要的是，乘着2014的小尾巴，我们迎接到了一个新生命的降临。hello world！</p>

<p>这本是一篇技术博文，但是相对于技术而言，有些东西会更重要一些。</p>

<p>科技改变生活，技术本来就是为了让生活更美好，让大家能活着更容易些，莫忘初心。</p>

<p>分享点技术之外的东西，希望能走地更远，不管是在技术的道路上，还是非技术的道路上。</p>

<p>虽然在有生之年，可以很难达到那种境界，但是尽力去向那个境界靠拢。</p>

<p>但行好事，莫问前程。</p>

<p>谋事在人，成事在天，尽力就好，人能做的，大抵只能如此。</p>

<blockquote><p>以下内容，摘自特兰修女箴言 － From Mother Theresa</p></blockquote>

<p>人们经常是不讲道理的、没有逻辑的和以自我为中心的
不管怎样，你要原谅他们</p>

<pre><code>People are often unreasonable, illogical and self-centered; Forgive them anyway.
</code></pre>

<p>即使你是友善的，人们可能还是会说你自私和动机不良
不管怎样，你还是要友善</p>

<pre><code>If you are kind, people may accuse you of selfish, ulterior motives; Be kind anyway.
</code></pre>

<p>当你功成名就，你会有一些虚假的朋友
和一些真实的敌人
不管怎样，你还是要取得成功</p>

<pre><code>If you are successful, you will win some false friends And some true enemies; Succeed anyway.
</code></pre>

<p>即使你是诚实的和率直的，人们可能还是会欺骗你
不管怎样，你还是要诚实和率直</p>

<pre><code>If you are honest and frank, people may cheat you; Be honest and frank anyway.
</code></pre>

<p>你多年来营造的东西
有人在一夜之间把它摧毁
不管怎样，你还是要去营造</p>

<pre><code>What you spend years building, Someone could destroy overnight; Build anyway.
</code></pre>

<p>如果你找到了平静和幸福，他们可能会嫉妒你
不管怎样，你还是要快乐</p>

<pre><code>If you find serenity and happiness, they may be jealous; Be happy anyway.
</code></pre>

<p>你今天做的善事，人们往往明天就会忘记
不管怎样，你还是要做善事</p>

<pre><code>The good you do today, people will often forget tomorrow; Be good anyway.
</code></pre>

<p>即使把你最好的东西给了这个世界
也许这些东西永远都不够
不管怎样，把你最好的东西给这个世界</p>

<pre><code>Give the world the best you have, And it may never be enough; Give the world the best you have anyway.
</code></pre>

<p>你看，说到底，它是你和上帝之间的事
而决不是你和他人之间的事</p>

<pre><code>You see, in the final analysis, it is between you and God; It is never between you and them anyway.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一周打造支付系统]]></title>
    <link href="http://jqlblue.github.io/2014/11/23/build-payment-system-in-one-week/"/>
    <updated>2014-11-23T14:34:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/11/23/build-payment-system-in-one-week</id>
    <content type="html"><![CDATA[<p>获取食物的最佳方式就是处于食物链的顶端，以捕食该链条之下的所有动植物。不言而喻，搭建处于资金流顶端的支付系统，伴随资金的转移过程，也是积累财富的绝佳手段。</p>

<!-- more -->


<h1>一般网购流程</h1>

<p><img src="http://jqlblue.github.io/images/payment/shopping_flow.png" title="shopping flow" ></p>

<p>一般的网购流程如上图：</p>

<ul>
<li>商品筛选</li>
<li>将选中的商品添加到购物车（顾名思义，推着车去购物。如果只卖一个商品的话，可以省略这步）</li>
<li>确认要购买物品，去结算</li>
<li>下订单，即提交要结算物品的清单</li>
<li>网上支付该订单</li>
</ul>


<h1>支付流程</h1>

<p><img src="http://jqlblue.github.io/images/payment/flow.jpg" title="payment flow" ></p>

<p>一个典型的支付流程如上图。</p>

<p>用户下单时，订单系统需要和产品库交互，生成支付连接。支付系统对请求地址进行验签之后，调用第三方平台的支付接口进行支付，然后更新订单状态。在订单成功支付之后，更新产品库存信息。</p>

<p>属于支付系统的功能有：</p>

<ul>
<li>请求参数验签</li>
<li>第三方支付接口对接</li>
<li>订单系统对接</li>
</ul>


<blockquote><p>只要完成与第三方支付接口的对接，即可解决搭建支付系统中最难啃的一块硬骨头。</p></blockquote>

<h1>第三方支付平台</h1>

<p>目前比较流行的第三方支付平台主要有：</p>

<ul>
<li>支付宝</li>
<li>财付通</li>
<li>快钱</li>
<li>网银在线</li>
<li>微信支付</li>
</ul>


<p>对于网银支付，可以调用银联的接口，或者直接对接银行（可以降低手续费，支持大额等个性化支付方法。但是实现成本较高）。</p>

<p>虽然支付宝的手续费不是最实惠的，但是支付宝本身对接了个大银行的网银支付，而我们的目标是一周打造支付系统，当然选择最省事的。</p>

<p>对接支付宝支付接口的流程如下：</p>

<p><img src="http://jqlblue.github.io/images/payment/zhifubao.jpg" title="支付宝对接" ></p>

<p>完成<code>技术集成</code>之前的工作，理论上需要8-10个工作日，所以需要提前申请。</p>

<p>最好找商务部的同事出马，不要怕麻烦boss。有问题，及时向组织反馈。</p>

<h1>支付宝接口</h1>

<p>与支付宝接口的交互流程如下</p>

<p><img src="http://jqlblue.github.io/images/payment/zhifubao_flow.jpg" title="支付宝接口交互流程" ></p>

<p>支付宝提供的sdk，主要包含如下文件</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alipay_core.function.php -- 支付宝接口公用函数，是请求、通知返回两个文件所调用的公用函数核心处理文件
</span><span class='line'>alipay_md5.function.php  -- MD5加密
</span><span class='line'>alipay_notify.class.php  -- 支付宝通知处理类，处理支付宝各接口通知返回
</span><span class='line'>alipay_submit.class.php  -- 支付宝各接口请求提交类，构造支付宝各接口表单HTML文本，获取远程HTTP数据</span></code></pre></td></tr></table></div></figure>


<p><em>要调用的方法</em></p>

<ul>
<li>提交订单时，调用<code>alipay_submit.class.php</code>中的<code>buildRequestUrl</code>方法，同时，需要注册通知回调<code>return_url</code>和<code>notify_url</code>。</li>
</ul>


<p>其中：</p>

<pre><code>return_url是同步回调，一般用于在支付成功后，调转至支付成功页。
notify_url是异步回调，一般用于更新订单状态等等（支付宝有相关队列服务运行异步回调，回调失败后，会以不定的间隔进行重试）。
</code></pre>

<ul>
<li>在通知回调时，都需要调用<code>alipay_notify.class.php</code>中的<code>verifyReturn</code>验证回调的合法性。</li>
</ul>


<h1>ssl证书</h1>

<p>俗话说，没有买卖就没有杀戮。凡是涉及利益的地方，就不会很安全。使用采用http进行数据通讯，难免发生如下问题：
<img src="http://jqlblue.github.io/images/payment/http_flow.jpg" title="中间人攻击" ></p>

<p>但是换成https，会有如下好处：</p>

<p><img src="http://jqlblue.github.io/images/payment/https_2.jpg" title="http ssl" ></p>

<p><img src="http://jqlblue.github.io/images/payment/https_3.jpg" title="https flow" ></p>

<p>申请ssl证书，推荐数字公司使用的<a href="http://www.wosign.com/price.htm">WoSign超真 SSL</a>。</p>

<p><img src="http://jqlblue.github.io/images/payment/ssl.jpg" title="ssl" ></p>

<h1>请求验签</h1>

<p>请求参数签名，需要使用可逆加密算法。其中又分为：</p>

<ul>
<li>对称加解密算法</li>
<li>非对称加解密算法</li>
</ul>


<p>对称加解密算法，在加密和解密时都使用一个密钥，加解密性能较好。但安全性较低（密钥只要被拿到，就gameover）。</p>

<p>非对称加解密算法，一般使用私钥加密，公钥解密。其安全性较好（只要保存好私钥就行），但是性能较差。</p>

<p>所以可以使用对称加解密算法加密请求参数。但加解密时，不使用同一个密钥。相关密钥，通过非对称加解密算法加密后，在请求参数中传递。</p>

<p>解密流程如下：</p>

<pre><code>1. 在请求参数中获取使用非对称加解密算法加密的密钥ekey
2. 使用非对称加解密算法解密密钥ekey为dkey
3. 使用对称加解密算法和dkey，解密请求参数
</code></pre>

<h1>订单</h1>

<p>我们用一周打造的支付系统，不能是一个远在云端的架构，而要是一个可运行的系统。那么，订单自然也少不了。</p>

<p>订单是按照如下对应关系产生的：</p>

<pre><code>用户 -&gt; 商品 -&gt; 订单
</code></pre>

<p>在整个支付过程中，一般要存在两个订单号：</p>

<ul>
<li>用于在内部系统（订单，支付，个人中心）中流通的订单号 <code>order_no</code>，在每一次下单时产生。</li>
<li>用于支付的订单号 <code>pay_order_no</code>，由 <code>order_no</code> ＋ 时间戳 ＋ salt等，在每一次支付时产生。</li>
</ul>


<h1>联调部署</h1>

<p>开发阶段涉及的模块可做如下划分：</p>

<ul>
<li>产品页</li>
<li>支付页</li>
<li>支付</li>
<li>订单</li>
<li>个人中心</li>
<li>测试，部署上线</li>
</ul>


<p>衡量一个互联网的标准有：功能，交互，ui。</p>

<p>因为我们的目标是一周内打造支付，那么，优先是完成支付和订单。至于是否要在产品页添加购物车，是否要在订单支付页面保存配送地址，是否要在个人中心对接物流，以及退款等等，都可以暂时砍掉。</p>

<p>互联网产品，唯快不破。快速上线，快速迭代。</p>

<h1>The Hole</h1>

<p>开发过程中，难免会遇到不少坑，特此纪录，希望帮助有缘人。</p>

<ul>
<li>产品金额存储</li>
</ul>


<p>为了避免因退款，对账时，和银行或者第三方支付平台产生因为数据精度而舍入等问题，可以将产品金额以<code>分</code>为单位存储，前台展示时除以100。</p>

<ul>
<li>需要两个订单号</li>
</ul>


<p>支付宝等第三方平台，对订单号有验证，一个订单号只能支付一次。所以系统中需要存在两个订单号，一个用于内部系统流通，一个用于支付，每次支付时都产品一个最新的（与内部系统流通的订单号有对应关系）。</p>

<ul>
<li>权限验证</li>
</ul>


<p>下单，或者支付完成后，在个人中心等位置，一般可以查看订单状态。此时需要注意，需要增加权限验证。否则会产生平行权限安全漏洞（可查看别人的订单等信息）</p>

<ul>
<li>系统安全性</li>
</ul>


<p>在支付和个人中心等页面，因为存在前后端交互。所以需要排查，是否存在sql注入或者xss等安全漏洞。推荐<code>XSScrapy</code>和<code>SqlMap</code>。</p>

<ul>
<li>日志</li>
</ul>


<p>在整个交易过程中，需要有完善详尽的日志记录。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用graphite和cabot搭建监控服务]]></title>
    <link href="http://jqlblue.github.io/2014/10/01/use-graphite-and-alter-build-monitor-system/"/>
    <updated>2014-10-01T09:43:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/10/01/use-graphite-and-alter-build-monitor-system</id>
    <content type="html"><![CDATA[<p>说起监控，我们一般会首先想到<code>zabbix</code>，<code>nagios</code>，<code>ganglia</code>等等。但是对于非<code>ops</code>开发人员而言，这些东西，多多少少让人感到陌生。所以本文将从一个<code>服务端开发人员</code>的视角，介绍如何通过<code>graphite</code>，<code>cabot</code>，加一个<code>shell</code>定时脚本，搭建监控报警服务。</p>

<!-- more -->


<h1>python环境安装</h1>

<p>虽然linux系统上一般都有python环境，但是默认的python版本较低。而且<code>yum</code>等系统工具，都依赖于默认的python。所以推荐的做法是再安装一个python，并使用<code>virtualenv</code>等工具，分项目进行环境管理，并与系统默认的python环境进行隔离。</p>

<p>以python2.7.3为例，介绍python环境的安装。</p>

<h2>安装步骤</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo yum install bzip2-devel.x86_64
</span><span class='line'>sudo yum install sqlite-devel.x86_64
</span><span class='line'>sudo yum install readline-devel.x86_64
</span><span class='line'>sudo yum install openssl-devel.x86_64
</span><span class='line'>
</span><span class='line'>wget http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2
</span><span class='line'>tar jxvf Python-2.7.3.tar.bz2
</span><span class='line'>cd Python-2.7.3
</span><span class='line'>./configure --prefix=/usr/local/python2.7.3
</span><span class='line'>make && sudo make install
</span><span class='line'>
</span><span class='line'>cd ..
</span><span class='line'>wget https://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz --no-check-certificate
</span><span class='line'>tar zxvf distribute-0.6.49.tar.gz
</span><span class='line'>cd distribute-0.6.49
</span><span class='line'>sudo /usr/local/python2.7.3/bin/python setup.py install
</span><span class='line'>sudo /usr/local/python2.7.3/bin/easy_install pbr
</span><span class='line'>
</span><span class='line'>cd ..
</span><span class='line'>wget https://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.10.1.tar.gz --no-check-certificate
</span><span class='line'>tar zxvf virtualenv-1.10.1.tar.gz
</span><span class='line'>cd virtualenv-1.10.1
</span><span class='line'>sudo /usr/local/python2.7.3/bin/python setup.py install
</span><span class='line'>sudo /usr/local/python2.7.3/bin/easy_install virtualenvwrapper</span></code></pre></td></tr></table></div></figure>


<blockquote><p>如果遇到 [FATAL] Failed to create text with cairo, this probably means cairo cant find any fonts. Install some system fonts and try again。可以尝试安装bitmap font。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo yum install bitmap.x86_64
</span><span class='line'>sudo yum install bitmap-fonts-compat.noarch</span></code></pre></td></tr></table></div></figure>


<h2>相关配置</h2>

<ul>
<li>创建管理python环境的用户</li>
</ul>


<p>为了便于环境的统一管理，创建一个普通用户进行新创建python环境的管理和相关python扩展的安装。同时，向数字公司的<code>addops</code>们致敬。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>useradd appops</span></code></pre></td></tr></table></div></figure>


<ul>
<li>创建python环境安装目录</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mkdir -p /data/server/python-envs
</span><span class='line'>sudo chown -R appops.appops /data/server</span></code></pre></td></tr></table></div></figure>


<ul>
<li>配置新安装的python2.7.3环境</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo su appops -c 'vim ~/.bashrc'</span></code></pre></td></tr></table></div></figure>


<p>添加如下内容</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export WORKON_HOME=/data/server/python-envs
</span><span class='line'>export VIRTUALENVWRAPPER_PYTHON=/usr/local/python2.7.3/bin/python
</span><span class='line'>export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/python2.7.3/bin/virtualenv
</span><span class='line'>source /usr/local/python2.7.3/bin/virtualenvwrapper.sh</span></code></pre></td></tr></table></div></figure>


<h1>搭建graphite监控服务</h1>

<h2>安装步骤</h2>

<ul>
<li>创建安装目录</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo mkdir /opt/graphite
</span><span class='line'>sudo chown -R appops.appops /opt/graphite</span></code></pre></td></tr></table></div></figure>


<ul>
<li>创建python虚拟环境</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo su appops
</span><span class='line'>source ~/.bashrc
</span><span class='line'>mkvirtualenv graphite</span></code></pre></td></tr></table></div></figure>


<ul>
<li>graphite安装</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pip install whisper
</span><span class='line'>pip install carbon
</span><span class='line'>pip install graphite-web
</span><span class='line'>pip install django==1.5
</span><span class='line'>pip install django-tagging
</span><span class='line'>pip install uwsgi
</span><span class='line'>pip install MySQL-python
</span><span class='line'>pip install daemonize</span></code></pre></td></tr></table></div></figure>


<p>graphite使用<code>cairo</code>进行绘图，由于系统自带的cairo版本较低（需要cairo1.10以上），使用pip安装cairo会出错，所以采用编译安装。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://cairographics.org/releases/pycairo-1.8.8.tar.gz
</span><span class='line'>tar zxvf pycairo-1.8.8.tar.gz
</span><span class='line'>python -c "import sys; print sys.prefix"
</span><span class='line'>cd pycairo-1.8.8
</span><span class='line'>./configure --prefix=/data/server/python-envs/graphite
</span><span class='line'>make
</span><span class='line'>make install</span></code></pre></td></tr></table></div></figure>


<ul>
<li>目录说明</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bin -- 数据收集相关工具
</span><span class='line'>conf -- 数据存储相关配置文件
</span><span class='line'>    carbon.conf -- 数据收集carbon进程涉及的配置
</span><span class='line'>    dashboard.conf -- Dashboard UI相关配置
</span><span class='line'>    graphite.wsgi -- wsgi相关配置
</span><span class='line'>    storage-schemas.conf -- Schema definitions for Whisper files
</span><span class='line'>    whitelist.conf -- 定义允许存储的metrics白名单
</span><span class='line'>    graphTemplates.conf -- 图形化展示数据时使用的模板
</span><span class='line'>examples -- 示例脚本
</span><span class='line'>lib -- carbon和twisted库
</span><span class='line'>storage -- 数据文件存储目录
</span><span class='line'>webapp -- 数据前端展示涉及程序</span></code></pre></td></tr></table></div></figure>


<h2>配置Graphite-web</h2>

<ul>
<li>初始化配置文件</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /opt/graphite/webapp/graphite
</span><span class='line'>cp local_settings.py.example local_settings.py
</span><span class='line'>cp /opt/graphite/conf/graphite.wsgi.example /opt/graphite/conf/graphite.wsgi
</span><span class='line'>cp /opt/graphite/conf/graphTemplates.conf.example /opt/graphite/conf/graphTemplates.conf
</span><span class='line'>cp /opt/graphite/conf/dashboard.conf.example /opt/graphite/conf/dashboard.conf</span></code></pre></td></tr></table></div></figure>


<p>修改或者增加如下配置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>TIME_ZONE
</span><span class='line'>DEBUG
</span><span class='line'>SECRET_KEY
</span><span class='line'>DATABASES</span></code></pre></td></tr></table></div></figure>


<p>示例配置文件<a href="https://gist.github.com/jqlblue/88f8a9b14bbe4bae3666">local_settings.py</a></p>

<ul>
<li>初始化数据库</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python manage.py syncdb</span></code></pre></td></tr></table></div></figure>


<ul>
<li>启动graphite-web</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>uwsgi --http localhost:8085 --master --processes 1 --home /data/server/python-envs/graphite --pythonpath /opt/graphite/webapp/graphite --wsgi-file=/opt/graphite/conf/graphite.wsgi --enable-threads --thunder-lock</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jqlblue.github.io/images/graphite/web.jpg" title="graphite web" ></p>

<h2>配置数据收集服务</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cp /opt/graphite/conf/carbon.conf.example /opt/graphite/conf/carbon.conf
</span><span class='line'>cp /opt/graphite/conf/storage-schemas.conf.example /opt/graphite/conf/storage-schemas.conf
</span><span class='line'>cp /opt/graphite/conf/whitelist.conf.example /opt/graphite/conf/whitelist.conf</span></code></pre></td></tr></table></div></figure>


<p>编辑<code>/opt/graphite/lib/carbon/util.py</code>，将</p>

<pre><code>from twisted.scripts._twistd_unix import daemonize
</code></pre>

<p>替换成</p>

<pre><code>import daemonize
</code></pre>

<p>否则启动cabon时会遇到<code>ImportError: cannot import name daemonize</code>。</p>

<ul>
<li>配置存储白名单</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim /opt/graphite/conf/whitelist.conf</span></code></pre></td></tr></table></div></figure>


<p>添加</p>

<pre><code>^test\..*
^server\..*
</code></pre>

<p>即只存储以<code>test.</code>和<code>server.</code>开头的metrics。</p>

<ul>
<li>配置存储Schemas</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vim /opt/graphite/conf/storage-schemas.conf</span></code></pre></td></tr></table></div></figure>


<p>添加</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[server]
</span><span class='line'>pattern = ^server\..*
</span><span class='line'>retentions = 60s:1d,5m:7d,15m:3y
</span><span class='line'>
</span><span class='line'>[default]
</span><span class='line'>pattern = ^test\..*
</span><span class='line'>retentions = 60s:1d,5m:7d</span></code></pre></td></tr></table></div></figure>


<p>上面的配置，会对于<code>test.</code>开头的metrics，以60秒为精度存储一天，以5分钟为精度存储7天。即查询一天内的数据时，可以精确到1分钟，查询7天内的数据时，只能精确到5分钟。</p>

<ul>
<li>启动cabon</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python /opt/graphite/bin/carbon-cache.py --config=/opt/graphite/conf/carbon.conf --debug start</span></code></pre></td></tr></table></div></figure>


<h1>收集监控数据</h1>

<p>etsy开源了一个叫<a href="https://github.com/etsy/statsd">statsd</a>的daemon，可用于将监控数据收集到graphite，但那玩意是nodejs写的。</p>

<p>为了保持方案的简单，采用<code>crontab</code>的方式，利用<a href="https://gist.github.com/jqlblue/c7473473f8a7357167b8">shell脚本</a>将要收集的数据通过udp协议直接发送至graphite。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>
</span><span class='line'>HOST=$(hostname | awk -F'.' '{print $1}')
</span><span class='line'>IDC="local"
</span><span class='line'>
</span><span class='line'>SYSTEM_LOAD=$(awk '{print $1}' /proc/loadavg)
</span><span class='line'>SYSTEM_MEMORY_FREE=$(free -m | grep 'buffers/cache' | awk '{print $NF}')
</span><span class='line'>SYSTEM_SWAP_USE=$(free -m | grep 'Swap' | awk '{print $(NF-1)}')
</span><span class='line'>SYSTEM_DISK_USED=$(df -h | grep '/' | awk 'BEGIN{_max=0}{len=length($5);i=substr($5,0,len-1);if(_max&lt;i){_max=i}}END{print _max}')
</span><span class='line'>
</span><span class='line'>TIMESTAMP=$(date +%s)
</span><span class='line'>
</span><span class='line'>### send to garphite through udp port 2003 ########
</span><span class='line'>echo -n "server.$IDC.$HOST.system.load $SYSTEM_LOAD $TIMESTAMP" &gt; /dev/udp/127.0.0.1/2003
</span><span class='line'>echo -n "server.$IDC.$HOST.system.memory_free $SYSTEM_MEMORY_FREE $TIMESTAMP" &gt; /dev/udp/127.0.0.1/2003
</span><span class='line'>echo -n "server.$IDC.$HOST.system.swap_used $SYSTEM_SWAP_USED $TIMESTAMP" &gt; /dev/udp/127.0.0.1/2003
</span><span class='line'>echo -n "server.$IDC.$HOST.system.disk_used $SYSTEM_DISK_USED $TIMESTAMP" &gt; /dev/udp/127.0.0.1/2003</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jqlblue.github.io/images/graphite/data-view.jpg" title="graphite monitor data view" ></p>

<p><em>监控数据收集和展示流图</em></p>

<p><img src="http://jqlblue.github.io/images/graphite/data-flow.jpg" title="graphite monitor data flow" ></p>

<h1>搭建cabot报警服务</h1>

<p><code>cabot</code>是一个轻量级的监控报警服务。其报警可以基于：</p>

<pre><code>graphite收集的监控数据
url的响应内容和状态码
jenkins编译任务的状态
</code></pre>

<ul>
<li>安装依赖</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo gem sources --remove http://rubygems.org/
</span><span class='line'>sudo gem sources -a http://ruby.taobao.org/
</span><span class='line'>sudo gem install foreman</span></code></pre></td></tr></table></div></figure>


<blockquote><p>因为foreman要求ruby版本需要在1.9.3以上，如果系统自带ruby版本过低，可以通过rvm安装ruby，再安装foreman。</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo yum install npm
</span><span class='line'>sudo npm install -g coffee-script less@1.3 --registry http://registry.npmjs.org/</span></code></pre></td></tr></table></div></figure>


<ul>
<li>初始化目录</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo su appops
</span><span class='line'>mkdir /data/server/alter
</span><span class='line'>cd /data/server/alter
</span><span class='line'>mkvirtualenv cabot</span></code></pre></td></tr></table></div></figure>


<ul>
<li>安装cabot</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/arachnys/cabot.git
</span><span class='line'>cd cabot
</span><span class='line'>cp conf/development.env.example conf/development.env</span></code></pre></td></tr></table></div></figure>


<p>修改<a href="https://gist.github.com/jqlblue/165d50a949cd4aae2191">setup.py</a>，添加</p>

<pre><code>'MySQL-python==1.2.5',
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>python setup.py install
</span><span class='line'>/bin/sh ./setup_dev.sh</span></code></pre></td></tr></table></div></figure>


<ul>
<li>配置cabot</li>
</ul>


<p>使用foreman启动cabot时，会先读取<code>.foreman</code></p>

<pre><code># vi: set ft=yaml :

procfile: Procfile.dev
env: conf/development.env
</code></pre>

<p><code>Procfile.dev</code>内容如下：</p>

<pre><code>web:       python manage.py runserver 0.0.0.0:$PORT
celery:    celery -A cabot worker --loglevel=DEBUG -B -c 8 -Ofair
</code></pre>

<p>其中定义了启动cabot-web和celery任务队列时使用的命令，针对不同的环境，可以酌情修改<code>.foreman</code>和对应的<code>procfile</code>及<code>env</code>。</p>

<p>对于邮件报警，需要修改<a href="https://gist.github.com/jqlblue/a6329a7649be16e92df4">conf/development.env</a>中的如下内容：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DATABASE_URL -- 数据库配置
</span><span class='line'>TIME_ZONE -- 时区
</span><span class='line'>ADMIN_EMAIL
</span><span class='line'>CABOT_FROM_EMAIL
</span><span class='line'>CELERY_BROKER_URL -- celery任务队列配置
</span><span class='line'>SES_HOST -- smtp host
</span><span class='line'>SES_USER -- 发送邮件的用户
</span><span class='line'>SES_PASS -- 发送邮件用户的密码
</span><span class='line'>SES_PORT -- smtp port</span></code></pre></td></tr></table></div></figure>


<ul>
<li>启动cabot</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nohup foreman start 2&gt;&1 &gt; /dev/null &</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jqlblue.github.io/images/graphite/cabot_service.jpg" title="cabot service" ></p>

<p><img src="http://jqlblue.github.io/images/graphite/cabot_service_check.jpg" title="cabot service check" ></p>

<p><img src="http://jqlblue.github.io/images/graphite/cabot_service_check_detail.jpg" title="cabot service check detail" ></p>

<p>reference：</p>

<p>[^1] <a href="http://graphite.readthedocs.org/en/latest/overview.html">http://graphite.readthedocs.org/en/latest/overview.html</a></p>

<p>[^2] <a href="http://cabotapp.com/qs/quickstart.html">http://cabotapp.com/qs/quickstart.html</a></p>

<p>[^3] <a href="https://gist.github.com/jirutka/8636572">https://gist.github.com/jirutka/8636572</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[电商相关概念整理]]></title>
    <link href="http://jqlblue.github.io/2014/09/22/e-commerce-idea-collection/"/>
    <updated>2014-09-22T10:24:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/09/22/e-commerce-idea-collection</id>
    <content type="html"><![CDATA[<h2>电子商务模式</h2>

<p>电子商务模式是指企业运用互联网，通过基于一定技术基础的商务运作方式开展经营取得营业收入的基本方式。</p>

<!-- more -->


<p>主要可以分为以下四种类型：</p>

<ul>
<li>B2C（Business to Consumer），即企业与消费者之间的电子商务，如京东。</li>
<li>B2B（Business to Business），即企业与企业之间的电子商务，如阿里巴巴</li>
<li>C2C（Consumer to Consumer），即消费者与消费者之间的电子商务，如淘宝。</li>
<li>O2O（Online To Offline），即线下商务与互联网之间的电子商务，如美乐乐，其O2O模式具体表现为线上家具网与线下体验馆的双平台运营。</li>
</ul>


<p>C2C商务平台就是通过为买卖双方提供一个在线交易平台，使卖方可以主动提供商品上网拍卖，而买方可以自行选择商品进行竞价。</p>

<p>O2O模式下，线下服务就可以用线上来揽客，消费者可以用线上来筛选服务，还有成交可以在线结算，很快达到规模。该模式最重要的特点是：推广效果可查，每笔交易可跟踪</p>

<h2>电商网站解决方案</h2>

<p>电商网站中 C 端用户操作路径大致如下：</p>

<pre><code>商品浏览 -》 下单 -》支付 -》订单查看 -》退货
</code></pre>

<p>结合 B 端用户的操作，整套电商系统会涉及：</p>

<h3>前台系统</h3>

<ul>
<li>产品展示</li>
<li>个人中心（支付，订单，购物车，积分系统）</li>
<li>搜索，推荐</li>
<li>用户反馈交流（客服系统，社区）</li>
</ul>


<h3>运营管理后台</h3>

<ul>
<li>商品管理</li>
<li>商户管理</li>
<li>库存管理</li>
<li>支付管理</li>
<li>订单管理</li>
<li>配送物理管理</li>
<li>用户权限管理</li>
<li>数据统计分析</li>
<li>营销推广管理，如SEO，促销，广告</li>
<li>前台内容管理系统</li>
</ul>


<h3>基础服务</h3>

<ul>
<li>数据存储（日志，图片，商品信息）</li>
<li>监控报警</li>
<li>日志收集</li>
<li>消息系统</li>
<li>队列服务</li>
</ul>


<p>会员通过推荐，搜索，分类检索等功能，进行商品的浏览。通过浏览，会员将感兴趣的商品加入购物车，并进行支付处理。</p>

<p>会员在个人中心可以查看相关订单的处理状态，如：是否支付成功，是否配送等信息。对于不满意的商品，可以进行退换货处理。</p>

<p>在B 端的管理后台，有相关权限的管理员，可以进行商品管理，对订单进行处理。结合统计分析和营销推广，评出热销商品等等。</p>

<h3>可供参考的系统架构示例</h3>

<p><img src="http://jqlblue.github.io/images/e-commerce/e_1.png" title="电商平台基础技术架构" >
<img src="http://jqlblue.github.io/images/e-commerce/e_2.png" title="电商平台技术架构" ></p>

<p><img src="http://jqlblue.github.io/images/e-commerce/e_3.png" title="电商平台系统图" ></p>

<h2>技术架构非功能性指标</h2>

<h3>1. 系统效率</h3>

<ul>
<li>空间换时间（多级缓存，静态化，索引）</li>
<li>并行与分布式计算（map-reduce，多线程，多进程）</li>
</ul>


<h3>2. 可扩展性</h3>

<ul>
<li>系统无状态</li>
<li>拆分（分库，分表（水平，垂直））</li>
</ul>


<h3>3. 安全性</h3>

<ul>
<li>数据存储安全，如增量，全量备份，异机备份。</li>
<li>数据传输安全，ssl/tls，加解密（对称，非对称）。</li>
<li>网络安全，数据库与外网隔离，确保不被恶意攻击</li>
<li>安全审计、操作日志记录。</li>
</ul>


<h3>4. 可用性</h3>

<ul>
<li>负载均衡（lvs，keepalived）</li>
<li>多写分离，主从切换，failover</li>
<li>应急预案和系统预警</li>
<li>系统降级（功能和品质）</li>
<li>系统限流（过载保护）</li>
</ul>


<h2>电商的特点</h2>

<h3>环境</h3>

<p>人们不受时间的限制，不受空间的限制，不受传统购物的诸多限制，可以随时随地在网上交易。通过跨越时间、空间，使我们在特定的时间里能够接触到更多的客户，为我们提供了更广阔的发展环境。</p>

<h3>市场</h3>

<p>在网上这个世界将会变得很小，一个商家可以面对全球的消费者，而一个消费者可以在全球的任何一家商家购物。一个商家可以去挑战不同地区、不同类别的买家客户群，在网上能够收集到丰富的买家信息，进行数据分析。</p>

<h3>优势</h3>

<p>电子商务减少了商品流通的中间环节，节省了大量的开支，从而也大大降低了商品流通和交易的成本。通过电子商务，企业能够更快的匹配买家，实现真正的产-供-销一体化，能够节约资源，减少不必要的生产浪费。</p>

<h3>劣势</h3>

<p>服务质量参差不齐。配送、安装、产品退换货、维修等客服环节需要完善。</p>

<h2>电商的本质</h2>

<p>电商首先重在“商”，而不在“电”。</p>

<p>这意味着电商还是企业经济学，电商还是要讲效益，讲利润，讲责任。但另一方面更重要，电商有自己的特点，它是信息化技术的重新架构，它成就的不仅仅是渠道，而是一种管理模式，甚至是一种战略规则，其未来基本形态或最高形态，不应是单纯的销售，而是点对点的服务，通过企业直接面对单个消费者，提供个性化的服务，从而开启企业发展的新时代。</p>

<h3>首先，电商应重新确立消费者地位</h3>

<p>消费者是品牌的上帝，但如何真正把这理念通过一定方法来实现，却一直没有找到更直接更完备的答案。信息化为这个问题带来了新曙光。通过电商窗口，消费者可进行自我颜色设计、款式设计以及搭配设计；在生产过程中，也可以进一步和消费者沟通；而这本身就是一个巨大的营销过程。消费者穿在身上的服装，绝不会再撞衫，它是独一的，代表着自己心境和思想的，是最受消费者欢迎的。</p>

<h3>其次，电商应重新塑造产业生态</h3>

<p>低价是不可持续的，企业必须有相对充足利润，并促进上下游乃至生态的良好发展。靠资本投资打价格战，一时可以，不可一世；靠截取供应商利润，一次可以，不可永续；一个电商靠价格战可以，但一个行业这样则不正常。笔者认为，通过企业点对点的服务，可以获得相对高的利润，这不仅可以加速电商本身的创新，更重要的是让上下游企业有良好的利润来源，一旦这样的生态链条生成，那么其竞争力则是巨大的、持续的、有良好的前景的。</p>

<h3>再次，电商应重新构建经济理论和品牌法则</h3>

<p>现在流行的经济理论和品牌法则，大多诞生在传统经济时代或信息化萌芽之时，均是那个时代的产物，更大程度上适应那个时代发展条件。比如，如果采用大众化定制，消费者会更广泛，类别更复杂，消费心理也会发生巨大变化，如果还一味墨守原来的定位法则，想必一定就刻舟求剑了。所以要在新时代里，一定要探寻定位的新内涵，寻找适合信息化时代的新方法，适合自己的新方法，通过不断创新实践，为丰富和扩展企业理论和品牌法则做出新尝试。</p>

<p>总之，电商本身就是一种创造，本质要求提升商业形态和价值，如果只是打价格战，那就是南辕北辙了。</p>

<h2>相关业务战略架构</h2>

<h3>1. 服务对象</h3>

<p>企业战略规划从选择客户开始。如1号店成立之初，服务对象是超市人群中的网络人群，所以去家乐福等的线下人群才是相关核心主攻人群，而非泛人群。</p>

<h3>2. 价值提供</h3>

<p>确定顾客定位后，就要解决为什么顾客要从你这里购买而非竞争对手处购买的价值定位。</p>

<p>1号店成立之初，从多种价值里最后选择了3个顾客价值：</p>

<ul>
<li><p>优惠价格</p></li>
<li><p>良好用户体验</p></li>
<li><p>未满足的品类需求（提供食品饮料，母婴这些当时竞争对手都不涉及的产品线）</p></li>
</ul>


<p>选择定位时，一定需要按照：</p>

<ul>
<li><p>竞争对手不足</p></li>
<li><p>能消费者需求</p></li>
<li><p>对相关领域比较擅长，有优势，自身能做好</p></li>
</ul>


<p>将这三者结合，产生一个清晰的价值定位，就可以以小博大。1号店启动时候只用了非常有限的资金，但假设一开始就博大，业务、资金、时间都分散，就没有今天了。</p>

<h3>3. 输出结果为产品、信息和服务</h3>

<p>产品线定位确定之后，就要进行了收缩。</p>

<p>1号店业务初期先保留了食品饮料、母婴、美容和家居四类，剔除了图书、服装等产品线，聘用了大量的兼职大学生协助产品经 理完善商品在网上的表现力，同时于刚董事长异常重视用户体验反馈，每天通过公司系统中消费者反馈第一时间解决来自各个部门的问题，这也是1号店能快速成长的一个重要原因，因为有效的企业更多是通过和终端顾客对话来解决企业内部的部门问题，而非公司高管自己拍脑袋决策。</p>

<h3>4. 资源资产能力</h3>

<p>表现为知识和权利领域。</p>

<p>1号店通过人力经理的辛苦搜索，找到了各部门的领导者，所以成立初期，很快网络了一批各行业的人才来推动业务发展。组织资本上，申请大量的技术专利，对1号店品牌商标保护等。关系资本上，1号店迅速和行业合作伙伴建立战略合作关系，虽然当时业务很小，但创始人用公司的美好发展愿景和优秀团队两个武器和各个合作伙伴建立了战略合作关系，比如从上海的物流合作商特能处取得了行业最低的每单配送价格。</p>

<h3>5. 流程</h3>

<p>就是解决系统层面做什么。</p>

<p>1号店当时IT人员数量是各部门之最，开发了很多系统，管理上也是制度系统比人重要，各部门周二的KPI会议上负责人都用部门量化的KPI业绩来沟通业务的机会和挑战以及改进方案。这几年来，虽然1号店人员流失率颇高，但业务还是持续增长，这也是创始人对系统的重视是一个重要原因。</p>

<h3>6. 合作伙伴</h3>

<p>合作伙伴分为纵向和横向合作伙伴。</p>

<p>为业务直接带来业绩的为上下游的合作伙伴，上游供应商有宝洁等货品供应商，下游有平安客流伙伴，特能是物流伙伴，普洛斯园区则提供良好的仓储伙伴。</p>

<p>目前沃尔玛入股1号店，应该可以从很多方面提供1号店的运营能力。而横向合作伙伴，定义为可以帮助公司间接提高产品服务价值和维系良好客户关系的供应商，比如听说1号店2012年起聘专业的客户关系维系公司来帮助提升客户关系管理等措施就是良好运用横向伙伴技巧。不和风投随意洽谈，从一开始就找能给自己真正带来业务提升的战略投资者。</p>

<h3>7. 获利模式</h3>

<p>目前电商越大越亏损，因为还在圈地时期。一个不注重盈利也解释不清楚未来盈利模式都是违背商业本质。而真正好的利润是持续长久的，不是圈钱短视，否则必有后患，好的利润模式也不是眼球经济，而应可持续发展。</p>

<h3>8. 收入增长方式</h3>

<p>收入增长模式可以分为客户轴，产品轴和位置轴。</p>

<p>客户轴可以供应给个人消费者的有形产品外，1号店还提供了手机充值等无形服务产品来增加客户粘性，当然成立之初就实施的针对企业的团购也给1号店带来了一 定比例的收入。</p>

<p>产品轴是随着公司发展逐渐增加，各平台电商公司虽然都是从不同产品线起家，但最后基本会殊途同归，品类扩充是必由之路，但必须有节奏感和清晰的定位分析，否则会出现凡客去年的产品扩充问题。</p>

<p>最后是位置轴，全国布局一定是逐步实现，是规模做大的桥头堡，但需要资本背后支持。</p>

<p>reference：</p>

<p>[^1] <a href="http://mp.weixin.qq.com/s?__biz=MzA4ODI4NjMwMQ==&amp;mid=10000072&amp;idx=2&amp;sn=89dbb533dd9bfd0f0900fc2ad2504e6c&amp;3rd=MzA3MDU4NTYzMw==&amp;scene=6#rd">电子商务不得不了解的模式</a></p>

<p>[^2] <a href="http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5MzY2NTEyMw==&amp;appmsgid=10013152&amp;itemidx=1&amp;sign=6fa1962f942a1804368e3e22c393c934&amp;3rd=MzA3MDU4NTYzMw==&amp;scene=6#wechat_redirect">电商的本质</a></p>

<p>[^3] <a href="http://mp.weixin.qq.com/s?__biz=MzA4MTcxNzgzMQ==&amp;mid=200319772&amp;idx=5&amp;sn=d8e44444b80d633dbc56f5ee6ab5de5a&amp;3rd=MzA3MDU4NTYzMw==&amp;scene=6#rd">以1号店为例，解析企业电子商务8步业务战略架构</a></p>

<p>[^4] <a href="http://mp.weixin.qq.com/s?__biz=MjM5MjEwMTk1OQ==&amp;mid=200031802&amp;idx=1&amp;sn=fec76ef0b002c7d41c91d746a07ee0c9&amp;3rd=MzA3MDU4NTYzMw==&amp;scene=6#rd">电子商务模式下如何进行客户关系管理</a></p>

<p>[^5] <a href="http://blog.csdn.net/yangbutao/article/details/12242441">构建高并发高可用的电商平台架构实践</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在linux服务器之间同步用户账号]]></title>
    <link href="http://jqlblue.github.io/2014/08/02/synchronization-user-account-on-linux/"/>
    <updated>2014-08-02T17:26:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/08/02/synchronization-user-account-on-linux</id>
    <content type="html"><![CDATA[<p>最近负责运帷的同事离职了，原先由运帷可以一手搞定的事情，分摊到了几个研发同事的身上。但是多人公用一个账号，实在感觉不爽。</p>

<!-- more -->


<p>由于公司没有几台服务器上，所以可以逐一登录服务器创建新账号。但是对于一个码农而言，这不科学，它违背了<code>DRY</code>原则。</p>

<p>当然，也可以配置一个ldap服务器，修改linux用户登录使用ldap验证。但这让我有一种从火窟跳到冰窖的感觉。先不说是否能搞定配置的事情，引入的这个ldap，又会变成另外一个坑。</p>

<p>昨天听一个同事时，我们来上班，要对得起自己的良心。所以我不能让上班时间在纠结中度过，用土方法解决问题先。</p>

<h2>同步步骤</h2>

<p>因为目前有一台服务器是登录的跳板机，所以只需要在跳板机上创建好新账号，然后把用户账号同步到其他机器上就好。</p>

<blockquote><p>如果没有跳板机，也可以随便选一台服务器（A），在A服务器上创建账号，并同步到其他机器上。</p></blockquote>

<ul>
<li><p>在跳板机上创建用户账号</p></li>
<li><p>在要同步的服务器上创建账号，并将该用户在跳板机上如下文件中对于的条目追加到要同步到机器上</p></li>
</ul>


<p><code>/etc/passwd</code>， <code>/etc/group</code>, <code>/etc/shadow</code></p>

<p>以跳板机ip：<code>192.168.1.1</code>，要同步的服务器：<code>192.168.1.8</code>，新增用户名：<code>jqlblue</code>为例，登录跳板机执行：</p>

<pre><code>$ useradd jqlblue
$ ssh -l root -p 22 192.168.1.8 "useradd jqlblue"
$ grep jqlblue: /etc/group | xargs -I {} ssh -l root -p 22 192.168.1.8 "echo {} &gt;&gt; /etc/group"
$ grep jqlblue: /etc/passwd | xargs -I {} ssh -l root -p 22 192.168.1.8 "echo {} &gt;&gt; /etc/passwd"
$ grep jqlblue: /etc/shadow | xargs -I {} ssh -l root -p 22 192.168.1.8 "echo {} &gt;&gt; /etc/shadow"
</code></pre>

<p>上述操作，编写成脚本即可。当需要新增或者修改用户时，只需在跳板机上进行操作，同步问题，由脚本来完成。</p>

<p><em>上述脚本要在生产环境使用，需要注意如下问题：</em></p>

<pre><code>1 新增用户时，uid或者gid重复的问题
2 修改用户密码或者组信息后，产生多条记录的问题
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[0012]]></title>
    <link href="http://jqlblue.github.io/2014/07/05/0012/"/>
    <updated>2014-07-05T13:59:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/07/05/0012</id>
    <content type="html"><![CDATA[<p>从小到大，我最不喜欢的就是离别。但这却是我们每天都要经历的事情，只是或长，或短。</p>

<!-- more -->


<p>前些天整理屋子时翻出刚毕业时的照片，老婆打趣地说：“你的青葱都去哪儿了？”。</p>

<p>我自然只能说：“都给你了啊！”。</p>

<p>老婆呵呵一笑说道：“你一天才陪我多会儿啊，你的青葱，都给了你的电脑，你的代码。一天就知道敲敲敲，赶紧去喝点水。家里快没米了，一会去超市拎袋米回来。。。”</p>

<h2>十年</h2>

<p>在休假的期间，去山东找了一趟儿时的大哥。</p>

<p>在不太拥挤的人群中，第一眼就找出了那个熟悉的身影。当年60米短跑健将的风采已然不再，零零星星的白发，也小成气候。</p>

<p>见面后，吃饭是少不了的。在我的强烈要求下，找了一家兰州拉面馆。份量的确实在，但却是另一种滋味。吃着我从北京带过去的五香花生米，聊着各自的境况。</p>

<p>本来想一起看看世界杯，找找儿时的感觉，可是因为电视线路发生了故障，于是晃悠到了一家网吧。原以为可以畅快淋漓地玩几把路人局，结果屡屡被虐。</p>

<p>回来的车上，想起来这个城市已经十年。</p>

<h2>在路上</h2>

<p>我是个胸无大志的人，所以每当别人问起我的梦想，问起我的三年，五年规划，只会让我更加茫然。</p>

<p>因为录取通知书中附带的地图显示，我们学校就在长城脚下，所以我就兴高采烈地来了帝都。我盼望着起早可以去长城跑步。</p>

<p>报到时，我就傻眼了：去长城不止得花钱，而且就算花一上午，我也不一定能跑地到。</p>

<p>做毕设时，无意被导师介绍到了她同学的公司，然后就顺利地留了下来，随之开启了我的码农之路。</p>

<p>期间不断遇到很好的上司，不错的同事，一直过地不好不坏。</p>

<h2>再见360</h2>

<p>我也不是一个睿智的人。虽然我老婆经常说：你没吃过猪肉，你还没见过猪跑吗？</p>

<p>我这样的人，或许就像一颗树芽。</p>

<p>在某个微风和煦的清晨，悄悄地探出头，努力一番，长成一片叶子。又在某个萧瑟的秋夜里，落在了地上，随着一场雨水，和在了泥土中。</p>

<p>轻轻地来，轻轻地走，不被任何人察觉。</p>

<p>虽然我注定是一片叶子，但是我曾努力去绽放成为一朵绚丽的花，这就已经足够。</p>

<p>再见360，希望你们一切都好。</p>

<p><img src="http://jqlblue.github.io/images/0012.jpg" title="card" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[手动刷入android 4.4.3 OTA 更新包]]></title>
    <link href="http://jqlblue.github.io/2014/06/08/manual-update-android-ota-update/"/>
    <updated>2014-06-08T06:35:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/06/08/manual-update-android-ota-update</id>
    <content type="html"><![CDATA[<p>今天上午，nexus4终于收到了google android 4.4.3 的ota更新包，但是从上午到晚上，愣是没有下载下来。这就像因为长智齿而牙龈肿痛的你被人请吃麻辣香锅那样难受。</p>

<!-- more -->


<p>作为一个吃货，怎么能受得了这份煎熬？就算用半边牙齿，也不能虚此行。</p>

<p>当然，作为码农。就算被铜墙铁壁包围，也要想办法越过长城，对世界说出那句“hello world”。</p>

<h1>诊断</h1>

<p>更新包为什么下不下来，这肯定是有原因的。对手机的网络请求进行抓包，应该可以查明原因。</p>

<p>如何对手机进行抓包，可以参见之前的博文“<a href="http://jqlblue.github.io/2013/08/04/guide-of-packet-mobile-capture/">移动应用无线抓包指南</a>”。
如果手机使用的是家里的wifi网络，那对手机进行抓包会非常easy。两步即可：</p>

<pre><code>1. 在电脑上对fiddle进行设置
2. 修改手机上的网络设置，设置代理，其中代理服务器的ip就是电脑的ip
</code></pre>

<blockquote><p>如何设置可参见博文<a href="http://jqlblue.github.io/2013/08/04/guide-of-packet-mobile-capture/">移动应用无线抓包指南</a>”</p></blockquote>

<p>设置完成后，再请求时发现更新包的无法下载。
<img src="http://jqlblue.github.io/images/mobile/android-4.4.3-update.png" title="android-4.4.3-update" ></p>

<p>这时有两种方案：</p>

<pre><code>1. 通过代理等途径，获取更新包域名的对应的ip，绑定host。
2. 因为已经抓包获取到了更新包的下载地址，可以通过代理等途径，下载更新包并手动刷入。
</code></pre>

<blockquote><p>因为在手机上设置的代理服务器是电脑的ip，所以只要在电脑上绑定host，手机上也会生效。</p></blockquote>

<p>由于更新包下载地址的域名是动态的，所以没法绑定host。于是只有选择下载更新包，手动刷入。</p>

<h1>下载4.4.3 OTA 更新号</h1>

<p>为了方便，已下载针对nexus4的android4.4.3的ota更新包。需要的，可直接通过如下地址下载<a href="http://pan.baidu.com/s/1mgjxxLA#dir/path=%2Fsoft%2Fandroid-4.4.3-update%2Fkitkat-4.4.3-update">android-4.4.3-ota</a>。</p>

<h1>使用adb手动刷入OTA更新包</h1>

<h2>手动刷入的准备工作</h2>

<p>在手动刷入更新包时，除了下载更新包，还需要做如下准备工作：</p>

<ul>
<li>在手机的<code>开发者选项</code>中，开启<code>USB调试</code>。</li>
</ul>


<blockquote><p>在<code>设置</code>，<code>关于手机</code>中，狂点<code>版本号</code>，可开启<code>开发者选项</code>。</p></blockquote>

<ul>
<li>在电脑上使用usb线连接手机</li>
</ul>


<p>手机上应该会出现如下画面。选择<code>允许</code></p>

<p><img src="http://jqlblue.github.io/images/mobile/android-usb-debug.png" title="安卓usb调试" ></p>

<p>使用usb连接手机后，电脑上可能会自动安装相关驱动程序，请耐心等待完成。</p>

<ul>
<li>下载adb</li>
</ul>


<p><code>adb</code>包含在android的sdk中，但是我们只需要<code>adb.exe</code>, <code>AdbWinApi.dll</code>, <code>AdbWinUsbApi.dll</code>。</p>

<p>如果不想去下载android的sdk，可以通过如下地址下载<a href="http://pan.baidu.com/s/1mgjxxLA#dir/path=%2Fsoft%2Fandroid-4.4.3-update%2Fadb">刷机adb</a>。</p>

<p>下载完成后，解压到某个目录，如<code>D:\soft\nexus4\Tools</code>，在命令行执行：</p>

<pre><code>cd D:\soft\nexus4\Tools
d:
adb.exe devices
</code></pre>

<p>如果看到下图，说明准备工作告一段落。如果没有，可能是相关驱动安装地有问题，可自行查阅解决。</p>

<p><img src="http://jqlblue.github.io/images/mobile/android-adb-devices.png" title="安卓adb devices" ></p>

<h2>开刷</h2>

<ul>
<li>关机，然后按住<code>音量下键</code>和<code>电源键</code>，进入fastboot模式：</li>
</ul>


<p><img src="http://jqlblue.github.io/images/mobile/android-fastboot.png" title="安卓fastboot" ></p>

<ul>
<li>通过按<code>音量上下键</code>进行切换，切换到<code>Recovery Mode</code>模式，按<code>电源键</code>选择进入：</li>
</ul>


<p><img src="http://jqlblue.github.io/images/mobile/android-recovery-mode.png" title="安卓recovery-mode" ></p>

<p>此时，你可以看到一个倒地的机器人：</p>

<p><img src="http://jqlblue.github.io/images/mobile/android-recovery-mode-2.png" title="安卓recovery-mode" ></p>

<ul>
<li>按<code>电源键</code>，然后再迅速按<code>音量上键</code></li>
</ul>


<blockquote><p>这一步比较艰难，需要多尝试几次</p></blockquote>

<p>直到看到如下界面：</p>

<p><img src="http://jqlblue.github.io/images/mobile/android-apply-update.png" title="安卓adb update" ></p>

<p>再按<code>音量上下键</code>进行切换，切换到<code>apply update from ADB</code>，按<code>电源键</code>选择进入：</p>

<p><img src="http://jqlblue.github.io/images/mobile/android-sideload.png" title="安卓sideload" ></p>

<ul>
<li>通过USB再次连接电脑和手机</li>
</ul>


<p>在命令行执行：</p>

<pre><code>adb.exe sideload kitkat-4.4.3.zip
</code></pre>

<p><img src="http://jqlblue.github.io/images/mobile/android-adb-sideload.png" title="安卓 adb sideload" ></p>

<p>手机上将会出现如下界面：</p>

<p><img src="http://jqlblue.github.io/images/mobile/android-update-ota-1.png" title="安卓 ota update" ></p>

<p>耐心等待，等ota更新包安装完成时，会出现如下界面，按<code>电源键</code>选择重启即可。</p>

<p><img src="http://jqlblue.github.io/images/mobile/android-update-ota-2.png" title="安卓 ota update" ></p>

<p>重启后，会对已安装的应用进行优化。通过<code>设置</code>，<code>关于手机</code>查看系统版本，发现已经是<code>4.4.3</code>。</p>

<p><img src="http://jqlblue.github.io/images/mobile/android-4.4.3-update-end.jpg" title="安卓 ota 更新完成" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再话tcpcopy的胞弟gryphon]]></title>
    <link href="http://jqlblue.github.io/2014/05/28/tcpcopy-gryphon-introduction/"/>
    <updated>2014-05-28T15:57:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/05/28/tcpcopy-gryphon-introduction</id>
    <content type="html"><![CDATA[<p>gryphon是由网易研发，能够模拟千万级别并发用户进行压力测试的一个软件，可用于网络消息推送服务方面的压力测试和传统web服务的压力测试。目前由网易的 <a href="http://weibo.com/tcpcopy">王斌</a>进行维护。更多介绍可参见<a href="https://github.com/wangbin579/gryphon">A powerful tool to simulate millions of concurrent users for loading testing</a></p>

<!-- more -->


<p>gryphon的安装和使用方法分为<code>传统架构方式</code>和<code>高级架构方式</code>。</p>

<h1>相关角色说明</h1>

<ul>
<li>gryphon客户端（/usr/local/bin/gryphon）</li>
<li>intercept拦截进程（/usr/local/bin/intercept）</li>
</ul>


<p>测试时，gryphon客户端读取录制的pcap文件（可以通过tcpdump产生），通过<code>Raw Socket</code>修改请求并发送到测试机。因为这些请求的来源ip可能是模拟的，为了连接的正常关闭，需要拦截测试机的响应包。</p>

<pre><code>在传统架构下：
1 netfilter-iptables在协议栈将数据包交给内核中的ip_queue模块
2 intercept在用户态通过netlink socket接收内核传来的数据报文
3 将处理后的报文以及对报文的处理意见（ACCEPT，DROP等）传递给内核协议栈
</code></pre>

<figure class='code'><figcaption><span>communication/tc_socket.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">tc_raw_socket_out_init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/*</span>
</span><span class='line'><span class="cm">     * On Linux when setting the protocol as IPPROTO_RAW,</span>
</span><span class='line'><span class="cm">     * then by default the kernel sets the IP_HDRINCL option and</span>
</span><span class='line'><span class="cm">     * thus does not prepend its own IP header.</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="n">fd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_RAW</span><span class="p">,</span> <span class="n">IPPROTO_RAW</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>communication/tc_interception.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">tc_nl_event_process</span><span class="p">(</span><span class="n">tc_event_t</span> <span class="o">*</span><span class="n">rev</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span>            <span class="n">buffer</span><span class="p">[</span><span class="mi">65536</span><span class="p">];</span>
</span><span class='line'>    <span class="k">register</span> <span class="kt">int</span>    <span class="n">i</span><span class="p">,</span> <span class="n">pass_through_flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">long</span>   <span class="n">packet_id</span><span class="p">;</span>
</span><span class='line'>    <span class="n">tc_ip_header_t</span> <span class="o">*</span><span class="n">ip_hdr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">tc_nl_socket_recv</span><span class="p">(</span><span class="n">rev</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="mi">65536</span><span class="p">)</span> <span class="o">==</span> <span class="n">TC_ERROR</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">TC_ERROR</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ip_hdr</span> <span class="o">=</span> <span class="n">tc_nl_ip_header</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'>    <span class="n">packet_id</span> <span class="o">=</span> <span class="n">tc_nl_packet_id</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">ip_hdr</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="cm">/* check if it is the valid user to pass through firewall */</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">srv_settings</span><span class="p">.</span><span class="n">passed_ips</span><span class="p">.</span><span class="n">num</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">srv_settings</span><span class="p">.</span><span class="n">passed_ips</span><span class="p">.</span><span class="n">ips</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">ip_hdr</span><span class="o">-&gt;</span><span class="n">daddr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">pass_through_flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">tot_resp_packs</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">pass_through_flag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="cm">/* pass through the firewall */</span>
</span><span class='line'>            <span class="n">dispose_netlink_packet</span><span class="p">(</span><span class="n">rev</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span> <span class="n">NF_ACCEPT</span><span class="p">,</span> <span class="n">packet_id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">tot_copy_resp_packs</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>            <span class="n">router_update</span><span class="p">(</span><span class="n">srv_settings</span><span class="p">.</span><span class="n">old</span><span class="p">,</span> <span class="n">ip_hdr</span><span class="p">);</span>
</span><span class='line'>            <span class="cm">/* drop the packet */</span>
</span><span class='line'>            <span class="n">dispose_netlink_packet</span><span class="p">(</span><span class="n">rev</span><span class="o">-&gt;</span><span class="n">fd</span><span class="p">,</span> <span class="n">NF_DROP</span><span class="p">,</span> <span class="n">packet_id</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">TC_OK</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>在高级架构下，是通过在测试机上配置静态路由规则，将响应路由到辅助服务器进行处理。
</code></pre>

<p><img src="http://jqlblue.github.io/images/gryphon/raw_socket.jpg" title="raw socket" ></p>

<h1>传统架构下安装并使用</h1>

<p>在传统架构下，<code>intercept拦截进程</code>需要运行在测试机上，用于拦截测试机的响应包。</p>

<h2>安装与使用</h2>

<h3>在测试机安装intercept拦截进程</h3>

<pre><code>git clone git://github.com/wangbin579/tcpcopy.git
cd tcpcopy
sh autogen.sh
./configure --prefix=/usr/local/tcocopy --enable-single
make
sudo make install
</code></pre>

<h3>安装gryphon客户端</h3>

<pre><code>git clone git://github.com/wangbin579/gryphon.git
cd gryphon
sh autogen.sh
./configure --prefix=/usr/local/gryphon --enable-single
make
sudo make install
</code></pre>

<h3>使用方法</h3>

<p>以<code>intercept拦截进程</code>安装在测试机<strong>10.16.15.118</strong>，应用端口是<strong>80</strong>，<code>gryphon客户端</code>安装在<strong>10.16.15.117</strong>为例，说明gryphon在传统架构下的基本使用方法。</p>

<ul>
<li>tcpdump抓包录制pcap文件</li>
</ul>


<p>可以在线上服务器抓包录制，并拷贝到<code>gryphon客户端</code>所在的服务器<strong>10.16.15.117</strong></p>

<pre><code>tcpdump -i eth0 port 80 -s 0 -w xxx.pcap
</code></pre>

<ul>
<li>拦截响应包</li>
</ul>


<p>在测试机<strong>10.16.15.118</strong>上操作</p>

<pre><code>modprobe ip_queue
iptables -I OUTPUT -p tcp --sport 80 -j QUEUE
/usr/local/tcpcopy/bin/intercept
</code></pre>

<blockquote><p>如果内核版本3.5，可以使用nfqueue</p></blockquote>

<ul>
<li>发送测试请求</li>
</ul>


<p>在<code>gryphon客户端</code>所在服务器<strong>10.16.15.117</strong>上操作</p>

<pre><code>/usr/local/gryphon/bin/gryphon -x 80-10.16.15.118:80 -f ./xxx.pcap -s 10.16.15.118 -u 1000 -a 2 -c 10.17.15.*
</code></pre>

<p>上述命令，从xxx.pcap抓包文件中提取出访问80端口的用户会话过程，模拟1000个用户，将请求复制到测试机<strong>10.16.15.118</strong>的<strong>80</strong>端口中去。其中用户ip地址的范围是10.17.15.*。</p>

<blockquote><p>-a参数用于加快数据包的发送速度。-a 2代表将数据包之间的发送间隔缩短一半，相当于加速2倍。也可和－i配合，如 －a 10 －i 2048</p></blockquote>

<p>gryphon拦截进程中各个基本参数的释义如下：</p>

<pre><code>gryphon -x historyServerPort-targetServerIP:targetServerPort -f &lt;pcapfile,&gt; -s &lt;intercept address&gt; -u &lt;user num&gt; -c &lt;ip range,&gt;
</code></pre>

<h2>调试步骤</h2>

<p><code>gryphon客户端</code>和<code>intercept拦截进程</code>运行时，会在当前工作目录生成<code>error_gryphon.log</code>，<code>error_intercept.log</code>日志文件，里面有相关运行信息。当测试过程不能正常工作时，可优先查看相关日志。</p>

<p>其次就是在测试机或者<code>gryphon客户端</code>所在的服务器上进行抓包。确保<code>gryphon客户端</code>发出请求，并且没有收到测试机的响应包，如：
<img src="http://jqlblue.github.io/images/gryphon/gryphon_tcpdump.png" title="gryphon tcpdump" ></p>

<h1>高级架构下安装并使用</h1>

<p>在高级架构下，<code>intercept拦截进程</code>需要运行在辅助服务上，用于拦截测试机的响应包。</p>

<h2>安装与使用</h2>

<h3>在测试机安装intercept拦截进程</h3>

<pre><code>git clone git://github.com/wangbin579/tcpcopy.git
cd tcpcopy
sh autogen.sh
./configure --prefix=/usr/local/adv-tcpcopy --enable-single  --enable-pcap --enable-advanced
make
sudo make install
</code></pre>

<h3>安装gryphon客户端</h3>

<pre><code>git clone git://github.com/wangbin579/gryphon.git
cd gryphon
sh autogen.sh
./configure --prefix=/usr/local/adv-gryphon --enable-single --enable-advanced
make
sudo make install
</code></pre>

<h3>使用方法</h3>

<p>以<code>intercept拦截进程</code>安装在辅助服务器<strong>10.16.15.116</strong>，<code>gryphon客户端</code>安装在<strong>10.16.15.117</strong>，测试机<strong>10.16.15.118</strong>的应用端口是<strong>80</strong>为例，说明gryphon在高级架构下的使用方法。</p>

<ul>
<li>tcpdump抓包录制pcap文件</li>
</ul>


<p>可以在线上服务器抓包录制，并拷贝到<code>gryphon客户端</code>所在的服务器<strong>10.16.15.117</strong></p>

<pre><code>tcpdump -i eth0 port 80 -s 0 -w xxx.pcap
</code></pre>

<ul>
<li>拦截响应包</li>
</ul>


<p>在测试机<strong>10.16.15.118</strong>上设置静态路由，将响应包路由到辅助服务器<strong>10.16.15.116</strong></p>

<pre><code>route add -net 10.17.15.0 netmask 255.255.255.0 gw 10.16.15.116
</code></pre>

<p>查看是否设置成功</p>

<pre><code>$ route
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
10.17.15.0      10.16.15.116    255.255.255.0   UG    0      0        0 eth0
10.16.14.0      *               255.255.254.0   U     0      0        0 eth0
169.254.0.0     *               255.255.0.0     U     0      0        0 eth0
default         10.16.14.1      0.0.0.0         UG    0      0        0 eth0
</code></pre>

<p>如果设置错了，可以删除并重新添加</p>

<pre><code>route del -net 10.17.15.0 netmask 255.255.255.0
</code></pre>

<p>在辅助服务器<strong>10.16.15.116</strong>上启动intercept拦截进程</p>

<pre><code>/usr/local/adv-tcpcopy/bin/intercept -F 'tcp and src port 80'
</code></pre>

<ul>
<li>发送测试请求</li>
</ul>


<p>在<code>gryphon客户端</code>所在服务器<strong>10.16.15.117</strong>上操作</p>

<pre><code>/usr/local/adv-gryphon/bin/gryphon -x 80-10.16.15.118:80 -f ./xxx.pcap -s 10.16.15.116 -u 1000 -c 10.17.15.*
</code></pre>

<p><strong> Reference </strong></p>

<p>[^1] <a href="http://www.ibm.com/developerworks/cn/linux/l-ntflt/index.html">http://www.ibm.com/developerworks/cn/linux/l-ntflt/index.html</a></p>

<p>[^2] <a href="http://www.ibm.com/developerworks/cn/linux/l-netlink/index.html">http://www.ibm.com/developerworks/cn/linux/l-netlink/index.html</a></p>

<p>[^3] <a href="http://www.tenouk.com/Module42a.html">http://www.tenouk.com/Module42a.html</a></p>

<p>[^4] <a href="http://blog.csdn.net/u010807313/article/details/9236581">http://blog.csdn.net/u010807313/article/details/9236581</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一个使用curl请求https资源的问题排查]]></title>
    <link href="http://jqlblue.github.io/2014/05/14/a-trouble-in-request-https-in-curl/"/>
    <updated>2014-05-14T14:50:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/05/14/a-trouble-in-request-https-in-curl</id>
    <content type="html"><![CDATA[<p>昨天临下班前，应客户端大牛的要求，开发了一个返回下载服务器ip列表的接口，用于在客户端指定host以解决用户下载时遭遇运营商dns劫持的问题。</p>

<p>开发时略微有少许忐忑，但测试时一切顺利，于是就轻松地回家了。</p>

<!-- more -->


<p>早上一上线代码，就收到了通过<code>sentry</code>发出的报警邮件。原以为是缓存没有及时更新的问题，立马手动进行更新。但还是没有通过接口获取到相关ip。随即回滚代码，重新上线。</p>

<h1>排查过程</h1>

<p>后来下线一台服务器进行调试时发现，在调用ops提供的接口获取ip列表时没有获取到返回数据，而相关接口是<code>https</code>的。</p>

<p>再跟踪请求资源的函数发现，相关函数没有对<code>https</code>请求做特殊处理。相关函数实现如下：</p>

<pre><code>public static function get($url, array $headers = array(), $timeout = 5)
{
    $ch = curl_init();

    curl_setopt($ch, CURLOPT_URL, $url);

    if ($headers) {
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
    }

    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);

    $content = curl_exec($ch);
    $response = curl_getinfo($ch);

    curl_close($ch);

    if ($response['http_code'] == 200) {
        return $content;
    }

    return null;
}
</code></pre>

<p>这或许就是昨天那少许忐忑的缘由。于是增加如下代码，测试通过后重新上线。</p>

<pre><code>    if (substr($url, 0, 5) == 'https') {
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
    }
</code></pre>

<h1>进一步排查</h1>

<p>线上的问题虽然暂时解决了，但是在问题解决之前，测试机上是正常的，这是为什么呢？</p>

<h2>在命令行运行curl排查问题</h2>

<p>在命令行使用curl请求ops的接口，其中线上服务器的运行结果如下：</p>

<pre><code>$ curl 'https://x.x.x.x/get_ips'

curl: (60) SSL certificate problem, verify that the CA cert is OK. Details:
error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed
More details here: http://curl.haxx.se/docs/sslcerts.html
</code></pre>

<p>测试机上可以正常获取到结果。</p>

<p>然后分别查看curl的版本和curl使用的动态连接库，都没有发现差异</p>

<pre><code>$ /usr/bin/curl -V
$ type curl

/usr/bin/curl
$ ldd /usr/bin/curl
</code></pre>

<p>再查看上面的错误，发现可能是<code>https</code>证书的问题。于是添加<code>--verbose</code>参数，再次使用curl进行请求，以获取更多交互信息。</p>

<p>截取部分输出如下</p>

<pre><code>$ curl 'https://x.x.x.x/get_ips' --verbose

* About to connect() to x.x.x.x port 80
*   Trying x.x.x.x... connected
* Connected to x.x.x.x (x.x.x.x) port 80
* successfully set certificate verify locations:
*   CAfile: /etc/pki/tls/certs/ca-bundle.crt
CApath: none
* SSLv2, Client hello (1):
SSLv3, TLS handshake, Server hello (2):
SSLv3, TLS handshake, CERT (11):
SSLv3, TLS alert, Server hello (2):
SSL certificate problem, verify that the CA cert is OK. Details:
error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed
* Closing connection #0
curl: (60) SSL certificate problem, verify that the CA cert is OK. Details:
error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed
More details here: http://curl.haxx.se/docs/sslcerts.html
</code></pre>

<p>可见使用的证书的是<code>/etc/pki/tls/certs/ca-bundle.crt</code>。</p>

<p>使用测试机上的证书替换线上服务器的证书后，问题解决。</p>

<blockquote><p>如果没有可用的证书，可以使用如下方法：</p></blockquote>

<pre><code>$ curl http://curl.haxx.se/ca/cacert.pem -o /etc/pki/tls/certs/ca-bundle.crt
</code></pre>

<h1>问题总结</h1>

<p>在请求https的资源时，遇到证书不匹配的问题，一般的工具都有不进行https证书验证的选项，比如：</p>

<pre><code>$ wget 'https://x.x.x.x/get_ips' --no-check-certificate
$ curl 'https://x.x.x.x/get_ips' -k
</code></pre>

<p>当然，也可以在请求时指定证书，或者对使用的https ca证书进行更新。</p>

<p>reference:
[^1] <a href="http://curl.haxx.se/docs/sslcerts.html">http://curl.haxx.se/docs/sslcerts.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[php中的单例模式面面观]]></title>
    <link href="http://jqlblue.github.io/2014/04/26/singleton-pattern-in-php/"/>
    <updated>2014-04-26T20:47:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/04/26/singleton-pattern-in-php</id>
    <content type="html"><![CDATA[<p>最近在面试时发现好多人都喜欢在简历中添加“熟悉各种设计模式”那一项。但也不乏对于最为简单的单例，也仅限于书本上的一点认知，所以扯一扯php中单例模式的几种使用场景。</p>

<!-- more -->


<h1>何为单例模式</h1>

<p>单例模式属于创建型的应用模式，可以确保某一个类只有一个实例。这在获取数据库，缓存服务器的连接句柄，以及获取配置信息方面非常方便。</p>

<p>使用单例模式，可以减少在一次web请求中多次连接数据库或者解析配置文件等操作对系统资源的消耗，也可以避免大量的new操作。</p>

<p>其UML结构图如下：</p>

<p><img src="http://jqlblue.github.io/images/pattern/singleton-uml.png" title="singleton-uml" ></p>

<p>在php中实现单例模式需要注意：</p>

<ul>
<li>需要一个静态变量保存实例</li>
<li>需要提供一个公共的静态方法，用于返回需要获取的实例</li>
<li>需要防止外部程序通过new和clone等操作产生相关实例，从而失去单例模式的意义</li>
</ul>


<h1>代码实现解析</h1>

<p>一个单例模式的php实现大致如下:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Singleton</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">static</span> <span class="nv">$_instance</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__clone</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nb">trigger_error</span><span class="p">(</span><span class="s2">&quot;clone method is not allowed.&quot;</span><span class="p">,</span> <span class="nx">E_USER_ERROR</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getInstance</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="nv">$_instance</span> <span class="o">===</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">self</span><span class="o">::</span><span class="nv">$_instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">self</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">self</span><span class="o">::</span><span class="nv">$_instance</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述代码通过<code>静态成员变量</code>保存创建的实例，通过将构造函数设置为私有的，并使用魔术方法<code>__clone</code>&ldquo;重载&#8221;clone方法以避免通过外部程序获取相关实例。</p>

<p>由于php中的静态变量包括：<code>静态全局变量</code>，<code>静态局部变量</code>，<code>静态成员变量</code>，所以也可以通过<code>静态局部变量</code>来保存创建的实例。但是在子类中获取创建的实例时，会遇到一些问题。示例如下：</p>

<h2>使用静态局部变量</h2>

<figure class='code'><figcaption><span>singleton-static.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Singleton</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$_handle</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_handle</span> <span class="o">=</span> <span class="k">new</span> <span class="k">StdClass</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__clone</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nb">trigger_error</span><span class="p">(</span><span class="s2">&quot;clone method is not allowed.&quot;</span><span class="p">,</span> <span class="nx">E_USER_ERROR</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getInstance</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">static</span> <span class="nv">$_instance</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$_instance</span> <span class="o">===</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nv">$_instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">self</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$_instance</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getObj</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_handle</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UserModel</span> <span class="k">extends</span> <span class="nx">Singleton</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getUser</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nb">var_dump</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getObj</span><span class="p">());</span>
</span><span class='line'>        <span class="c1">//logic no care</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">GroupModel</span> <span class="k">extends</span> <span class="nx">Singleton</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getGroup</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nb">var_dump</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getObj</span><span class="p">());</span>
</span><span class='line'>        <span class="c1">//logic no care</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">UserModel</span><span class="o">::</span><span class="na">getUser</span><span class="p">();</span>
</span><span class='line'><span class="nx">GroupModel</span><span class="o">::</span><span class="na">getGroup</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ php /.singleton-static.php
object(Singleton)#2 (0) {
}
object(Singleton)#4 (0) {
}
</code></pre>

<blockquote><p>此例没有获取到唯一实例，因为局部静态变量，也就是在函数中定义的静态变量。其信息是存储在zend vm为每个函数分配的一个私有符号表中。</p></blockquote>

<p>php中当继承发生时，会进行函数的合并。UserModel中调用的，实际上是合并在UserModel中的getInstance，GroupModel中调用的，也是合并在GroupModel中的getInstance方法。</p>

<p>因为是在两个不同方法的私有符号表中获取数据，所以取到的不是同一个实例。</p>

<blockquote><p>可以将self换成parent试试</p></blockquote>

<h2>使用静态成员变量</h2>

<figure class='code'><figcaption><span>singleton-static-member.php </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">Singleton</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$_handle</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">static</span> <span class="nv">$_instance</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_handle</span> <span class="o">=</span> <span class="k">new</span> <span class="k">StdClass</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__clone</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nb">trigger_error</span><span class="p">(</span><span class="s2">&quot;clone method is not allowed.&quot;</span><span class="p">,</span> <span class="nx">E_USER_ERROR</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getInstance</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="nv">$_instance</span> <span class="o">===</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">self</span><span class="o">::</span><span class="nv">$_instance</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">self</span><span class="p">();</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">self</span><span class="o">::</span><span class="nv">$_instance</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getObj</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_handle</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UserModel</span> <span class="k">extends</span> <span class="nx">Singleton</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getUser</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nb">var_dump</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getObj</span><span class="p">());</span>
</span><span class='line'>        <span class="c1">//logic no care</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">GroupModel</span> <span class="k">extends</span> <span class="nx">Singleton</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getGroup</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nb">var_dump</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="na">getInstance</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">getObj</span><span class="p">());</span>
</span><span class='line'>        <span class="c1">//logic no care</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">UserModel</span><span class="o">::</span><span class="na">getUser</span><span class="p">();</span>
</span><span class='line'><span class="nx">GroupModel</span><span class="o">::</span><span class="na">getGroup</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<pre><code>$ php /.singleton-static-member.php
object(Singleton)#2 (0) {
}
object(Singleton)#2 (0) {
}
</code></pre>

<blockquote><p>此时获取到了唯一实例，因为静态成员变量的信息是存储在类结构的 default_static_members 字段，为所有实例所共用。</p></blockquote>

<h1>编写一个单例的基类</h1>

<p>有时我们的项目中有个缓存类，还有数据库类，还有个文件操作类。想让这三个类都是单例的话，我们需要实现三个单例，这有点繁琐。于是我们可以创建一个单例的基类，要实现单例的类继承这个基类即可。直接上代码：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Singleton</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">static</span> <span class="nv">$_instances</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">final</span> <span class="k">public</span> <span class="k">function</span> <span class="nf">__clone</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nb">trigger_error</span><span class="p">(</span><span class="s2">&quot;clone method is not allowed.&quot;</span><span class="p">,</span> <span class="nx">E_USER_ERROR</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">final</span> <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">getInstance</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$c</span> <span class="o">=</span> <span class="nb">get_called_class</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nx">self</span><span class="o">::</span><span class="nv">$_instances</span><span class="p">[</span><span class="nv">$c</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">self</span><span class="o">::</span><span class="nv">$_instances</span><span class="p">[</span><span class="nv">$c</span><span class="p">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nv">$c</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">self</span><span class="o">::</span><span class="nv">$_instances</span><span class="p">[</span><span class="nv">$c</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Cache</span> <span class="k">Extends</span> <span class="nx">Singleton</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$_handle</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_connect</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">function</span> <span class="nf">_connect</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_handle</span> <span class="o">=</span> <span class="k">new</span> <span class="k">StdClass</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getHandle</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_handle</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Db</span> <span class="k">Extends</span> <span class="nx">Singleton</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$_handle</span> <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">protected</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_connect</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="k">function</span> <span class="nf">_connect</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_handle</span> <span class="o">=</span> <span class="k">new</span> <span class="k">StdClass</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getHandle</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_handle</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>reference：</p>

<p>[^1] <a href="http://www.php-internals.com/book/?p=chapt05/05-04-class-inherit-abstract">http://www.php-internals.com/book/?p=chapt05/05-04-class-inherit-abstract</a></p>

<p>[^2] <a href="http://zh.wikipedia.org/zh/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">http://zh.wikipedia.org/zh/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F</a></p>

<p>[^3] <a href="http://www.phptherightway.com/pages/Design-Patterns.html">http://www.phptherightway.com/pages/Design-Patterns.html</a></p>

<p>[^4] <a href="http://rancoud.com/read-phps-opcode/">http://rancoud.com/read-phps-opcode/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何静态编译php]]></title>
    <link href="http://jqlblue.github.io/2014/04/09/statically-compile-php/"/>
    <updated>2014-04-09T18:13:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/04/09/statically-compile-php</id>
    <content type="html"><![CDATA[<p>有些时候，我们写了一个php脚本，但是对方的服务器上没有php环境。</p>

<p>这时，我们可以通过静态方式编译php，并将相关扩展一起打包进php可执行文件，然后在运行脚本时指定php binary。</p>

<!-- more -->


<p>安装步骤如下：</p>

<h1>准备源文件</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget -c http://www.php.net/get/php-5.5.11.tar.gz/from/this/mirror
</span><span class='line'>tar zxvf php-5.5.11.tar.gz
</span><span class='line'>wget http://pecl.php.net/get/redis-2.2.5.tgz
</span><span class='line'>tar xvf redis-2.2.5.tgz
</span><span class='line'>mv redis-2.2.5 php-5.5.11/ext/redis</span></code></pre></td></tr></table></div></figure>


<h1>配置</h1>

<h2>重新生成configure</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd php-5.5.11
</span><span class='line'>rm -f ./configure
</span><span class='line'>./buildconf --force</span></code></pre></td></tr></table></div></figure>


<h2>configure</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./configure LDFLAGS=-static \
</span><span class='line'>--prefix=/usr/local/php5-static \
</span><span class='line'>--disable-all \
</span><span class='line'>--enable-shared=no \
</span><span class='line'>--enable-static=yes \
</span><span class='line'>--enable-inline-optimization \
</span><span class='line'>--enable-hash \
</span><span class='line'>--enable-mbstring \
</span><span class='line'>--with-layout=GNU \
</span><span class='line'>--enable-filter \
</span><span class='line'>--with-pcre-regex \
</span><span class='line'>--with-zlib \
</span><span class='line'>--enable-json \
</span><span class='line'>--enable-ctype \
</span><span class='line'>--disable-redis-session \
</span><span class='line'>--enable-redis</span></code></pre></td></tr></table></div></figure>


<h2>修改Makefile</h2>

<p>将</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BUILD_CLI = $(LIBTOOL) --mode=link $(CC) -export-dynamic $(CFLAGS_CLEAN) $(EXTRA_CFLAGS) $(EXTRA_LDFLAGS_PROGRAM) $(LDFLAGS) $(PHP_RPATHS) $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_CLI_OBJS) $(EXTRA_LIBS) $(ZEND_EXTRA_LIBS) -o $(SAPI_CLI_PATH)
</span><span class='line'>BUILD_CGI = $(LIBTOOL) --mode=link $(CC) -export-dynamic $(CFLAGS_CLEAN) $(EXTRA_CFLAGS) $(EXTRA_LDFLAGS_PROGRAM) $(LDFLAGS) $(PHP_RPATHS) $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_CGI_OBJS) $(EXTRA_LIBS) $(ZEND_EXTRA_LIBS) -o $(SAPI_CGI_PATH)</span></code></pre></td></tr></table></div></figure>


<p>替换成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>BUILD_CLI = $(LIBTOOL) --mode=link $(CC) $(CFLAGS_CLEAN) $(EXTRA_CFLAGS) $(EXTRA_LDFLAGS_PROGRAM) $(LDFLAGS) $(PHP_RPATHS) $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_CLI_OBJS) $(EXTRA_LIBS) $(ZEND_EXTRA_LIBS) -all-static -o $(SAPI_CLI_PATH)
</span><span class='line'>BUILD_CGI = $(LIBTOOL) --mode=link $(CC) $(CFLAGS_CLEAN) $(EXTRA_CFLAGS) $(EXTRA_LDFLAGS_PROGRAM) $(LDFLAGS) $(PHP_RPATHS) $(PHP_GLOBAL_OBJS) $(PHP_BINARY_OBJS) $(PHP_CGI_OBJS) $(EXTRA_LIBS) $(ZEND_EXTRA_LIBS) -all-static -o $(SAPI_CGI_PATH)</span></code></pre></td></tr></table></div></figure>


<p>即：</p>

<p>在<code>BUILD_CLI</code>和<code>BUILD_CGI</code>对应的行中移除<code>-export-dynamic</code>，在<code>-o $(SAPI_CGI_PATH)</code>和<code>-o $(SAPI_CLI_PATH)</code>之前，添加<code>-all-static</code></p>

<h1>安装</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make LDFLAGS=-ldl
</span><span class='line'>sudo make install</span></code></pre></td></tr></table></div></figure>


<h1>检查</h1>

<p>在命令行执行</p>

<pre><code>$ file /usr/local/php5-static/bin/php
/usr/local/php5-static/bin/php: ELF 64-bit LSB executable, AMD x86-64, version 1 (SYSV), for GNU/Linux 2.6.9, statically linked, for GNU/Linux 2.6.9, not stripped

$ /usr/local/php5-static/bin/php -m
[PHP Modules]
Core
ctype
date
ereg
filter
hash
json
mbstring
pcre
redis
Reflection
SPL
standard
zlib

[Zend Modules]
</code></pre>

<p>因为可执行文件中包含了调试信息，所以体积较大</p>

<pre><code>$ ll -h /usr/local/php5-static/bin/php
-rwxr-xr-x 1 root root 18M 04-09 18:11 /usr/local/php5-static/bin/php
</code></pre>

<p>可以通过<code>strip</code>命令移除调试信息</p>

<pre><code>$ sudo strip /usr/local/php5-static/bin/php
$ ll -h /usr/local/php5-static/bin/php
-rwxr-xr-x 1 root root 6.1M 04-09 18:11 /usr/local/php5-static/bin/php
</code></pre>

<table>
<thead>
<tr>
<th align="center">原始文件大小</th>
<th align="center"> 去除符号表后大小</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><code>18M</code>      </td>
<td align="center"> <strong>6.1M</strong></td>
</tr>
</tbody>
</table>


<p><strong> reference :</strong></p>

<p>[^1] <a href="http://www.php.net/manual/zh/install.pecl.static.php">http://www.php.net/manual/zh/install.pecl.static.php</a></p>

<p>[^2] <a href="http://d.hatena.ne.jp/shimooka/comment/20110216/1297827454">http://d.hatena.ne.jp/shimooka/comment/20110216/1297827454</a></p>

<p>[^3] <a href="http://www.gnu.org/software/libtool/manual/html_node/Link-mode.html">http://www.gnu.org/software/libtool/manual/html_node/Link-mode.html</a></p>

<p>[^4] <a href="http://markmail.org/message/cpoenglavs4vwv32">http://markmail.org/message/cpoenglavs4vwv32</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux文件系统如何进行文件存取]]></title>
    <link href="http://jqlblue.github.io/2014/03/29/read-wirite-on-linux-file-system/"/>
    <updated>2014-03-29T13:32:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/03/29/read-wirite-on-linux-file-system</id>
    <content type="html"><![CDATA[<p>乍一看，这个题目好像有点小儿科。</p>

<p>写文件嘛</p>

<pre><code>echo hello &gt; /tmp/foo
</code></pre>

<p>读文件嘛</p>

<pre><code>cat /tmp/foo
</code></pre>

<p>对于普通文件的存取，的确可以使用上面的方法。但是在linux操作系统上，一
切都是文件。除了<code>普通文件</code>，还包括：<code>目录</code>，<code>符号链接</code>，<code>IPC Endpoints</code>（如pipe，unix socket）和<code>设备文件</code>(块设备，字符设备)。</p>

<p>当然，本文的重点不在于介绍相关操作技巧，而是希望可以探寻操作背后的机制。</p>

<!-- more -->


<p>我们要存取的文件，一般都是保存在普通的磁盘上，通过电磁变换来实现文件的读取和写入。所以我们先从磁盘说起。</p>

<h3>磁盘物理结构</h3>

<p><em>磁盘的机械结构如下图</em>：</p>

<p><img src="http://jqlblue.github.io/images/os/disk-structure.png" title="'disk strucrure" ></p>

<p>如上图，一块磁盘中有好几块<code>盘片</code>（platter），一个盘片上的盘面被划分成若干个同心圆（即<code>磁道</code>（track））。
将磁盘上<code>机械臂</code>的<code>磁头</code>径向移动到盘面的相关位置（磁道）后，通过盘片在磁头下方的高速旋转，就可以读取并写入所在<code>柱面</code>（cylinder）上的数据。</p>

<p><em>盘面的示意图如下</em>：</p>

<p><img src="http://jqlblue.github.io/images/os/disk-structure-2.gif" title="'disk strucrure" ></p>

<p>磁盘是个块设备，它的最小存储单位是<code>扇区</code>（sector），每个扇区存取512字节。</p>

<p>为了提升文件的读取效率，文件系统会以<code>块</code>（block）为单位进行文件读取。块是linux系统上文件存取的最小单位，一个块一般为连续的8个扇区，即4K。</p>

<p>直接对磁盘等硬件进行操作，是很困难的。不过操作系统的主要任务就是隐藏硬件，呈现良好，清晰，优雅，一致的抽象。linux文件系统对文件的处理进行了良好的抽象。</p>

<h3>VFS虚拟文件系统</h3>

<p>linux文件系统的体系结构图如下：</p>

<p><img src="http://jqlblue.github.io/images/os/fs-structure.gif" title="'linux file system strucrure" ></p>

<p>用户态的程序要进行文件读写时，只要通过系统调用，调用VFS提供的接口就好。</p>

<p>虽然VFS需要调用ext2，ext3，NFS等具体的文件系统实现进行磁盘上文件的操作。但是它屏蔽了下层的各种异构文件系统的特点，为上层提供了统一的接口。</p>

<p>以ext2文件系统为例，其文件系统结构图示意如下：</p>

<p><img src="http://jqlblue.github.io/images/os/ext2-fs-structure.gif" title="'ext2 file system strucrure" ></p>

<ul>
<li>一块硬盘会被划分成多个分区</li>
<li>每个分区挂载着相应的文件系统具体实现，如ext2</li>
<li>为了减少需要管理的block的数量，在ext2文件系统产生了块组的概念。每个块组包含多个block，并且有独立的superblock和inode。</li>
</ul>


<p><em>相关名词说明</em></p>

<p><code>Boot Sector</code></p>

<pre><code>即引导扇区。包括：本分区的操作系统类型，数据区大小，根目录区允许的最大目录项
</code></pre>

<p><code>Super Block</code></p>

<pre><code>超级块。定义了文件系统的静态结构，包括：分区中每个block的大小，分区中block group的数目，以及每个block group中有inode等。每个block group不一定都有超级块，其他block group中的超级块仅仅是block group 0中超级块的一个拷贝，以备当block group 0中的超级块损坏时可以对其进行恢复。Linux启动时，block group 0中的超级块的内容会被读入到内存中。
</code></pre>

<p><code>GDT</code></p>

<pre><code>组描述符表。记录了块位图（Block Bitmap）所在块的块号，inode位图（inode Bitmap）所在块的块号，inode表（inode Table）所在块的起始块号，本组空闲块的个数等组内信息。文件系统根据这些信息来查找数据块位图，索引结点位图，索引结点表的位置
</code></pre>

<p><code>Block Bitmap</code></p>

<pre><code>Ext2文件系统的数据块位图。其中每一位对应了一个数据块，某一位上位0时表示该位所对应的数据块空闲，反之表示该位所对应的数据块已经被分配。Data Block Bitmap占了1个块的空间，因此，一个组中的数据块的个数就已经决定了。如果每个块为b-byte，那么该Group Block就有8*b个块，可以存放（8*b）*b字节的数据
</code></pre>

<p><code>Inode Bitamp</code></p>

<pre><code>inode节点位图。其工作方式跟Block Bitmap相同，只不过代表的是Inode的使用情况，每个位代表一个inode，如果是1则表示被使用，为1表示空闲
</code></pre>

<p><code>Inode Table</code></p>

<pre><code>存储inode number对应文件的元信息，包括：文件类型，权限位，链接数（有多少文件名指向这个inode），文件数据块的位置。
</code></pre>

<p><code>Data Blocks</code></p>

<pre><code>数据块存放文件的实际内容。需要特别指出的是，在Linux下目录也是一种文件。目录中的文件及子目录都以目录项（directory entry）的形式存放在该目录的数据块中。目录项中主要记录了文件的inode号，文件名以及文件类型等内容
</code></pre>

<p>Linux开机启动时，会首先载入MBR（主引导记录），MBR会告诉电脑从该设备的某一个分区来装载boot loader（boot loader储存有操作系统的相关信息，比如操作系统名称，操作系统内核 (kernel)所在位置等），通过boot loader会加载kernel，kernel通过initrd加载硬件驱动，在主分区表中搜索活动分区，加载引导分区，挂载文件系统，进行操作系统的启动。</p>

<h3>文件查找示例</h3>

<p>以查找文件/home/alex/foobar为例进行说明。</p>

<p>假设根目录（ROOT directory），在磁盘空间上的inode number是2，其对应数据块的结构如下</p>

<pre><code>    +----+-----+-----------------------------------------+
#2  |. 2 |.. 2 | home 5 | usr 9 | tmp 11 | etc 23 | ...  |
    +----+-----+-----------------------------------------+
</code></pre>

<p>通过跟目录下home目录的名字home，可以获取其inode number是5，其对应数据块的结构如下</p>

<pre><code>    +----+-----+---------------------------------------------------+
#5  |. 5 |.. 2 | alex 31 | leslie 36 | pat 39 | abcd0001 21 | ...  |
    +----+-----+---------------------------------------------------+
</code></pre>

<p>通过home目录下alex目录的名字alex，可以获取其inode number是31，其数据块的结构如下</p>

<pre><code>    +----+-----+---------------------------------------------------+
#31 |. 31|.. 5 | foobar 12 | temp 15 | literature 7 | demo 6 | ... |
    +----+-----+---------------------------------------------------+
</code></pre>

<p>继续查看inode number是12（foobar文件）的inode所对应的数据块结构，就可以获取路径为/home/alex/foobar的文件的数据内容。</p>

<pre><code>    *-----------*
#12 | file data |
    *-----------*
</code></pre>

<p>从上面也可以看出</p>

<ul>
<li>目录也是一种文件，其中包含了该目录下子目录的名字和文件名，以及其对应的inode number。</li>
<li>文件名和inode number，是多对一的关系。多个文件名可以对应同一个inode number（硬链接）</li>
</ul>


<p>为了访问路径为/home/alex/foobar的文件的数据，需要有合适的权限在根目录的inode，home目录的inode，alex目录的inode，foobar数据文件的inode。</p>

<ul>
<li>目录的inode权限，决定了是否有权限修改，移动，删除该目录，以及目录下的文件。</li>
<li>文件的inode权限，决定了是否有权限读取或者修改该文件的内容。</li>
</ul>


<h3>文件存取流程</h3>

<p>在进行文件存取时，实际上就是解析文件路径，加载相应分区上的inode table，获取对应的inode number，对inode number对于的数据块进行存取。</p>

<p>对于访问过的文件路径，会被缓存在dentry目录项中。</p>

<p>为了提升磁盘设备的IO性能，操作系统会使用内存作为磁盘设备的cache，并使用memory map方式在访问时建立与文件系统的缓存映射。文件系统的缓存，是以Page Cache为单位，一个Page Cache包含多个Buffer Cache。</p>

<ul>
<li><p>向文件中写入数据时，数据会先缓存在Page Cache中，内存中的这部分数据被标注为Dirty Page，linux系统上的pdflush守护进程会跟进系统设置将将这部分Dirty Page刷到磁盘上，也可以通过fsync系统调用在数据写入后强制刷到磁盘上。将写入的数据刷入磁盘时，是以Buffer Cache为单位，每次回写若干个Buffer Cache。</p></li>
<li><p>读取文件内容时，系统会一次性连续读取包括所请求页面在内的多个页面（如预读页面个数为n）。如果请求的页面在page cache中命中的话，会从缓存中返回页面内容，增加读取的页面数量，异步读取2n个页面;如果请求的页面没有在page cache中命中，也会增加读取页面数量，同步读取2n个页面。</p></li>
</ul>


<p>预读机制示意图</p>

<p><img src="http://jqlblue.github.io/images/os/fs-pre-read.gif" title="'fs preread" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在mac系统上使用emacs24打造web开发环境]]></title>
    <link href="http://jqlblue.github.io/2014/02/28/emacs24-on-mac-and-linux/"/>
    <updated>2014-02-28T14:16:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/02/28/emacs24-on-mac-and-linux</id>
    <content type="html"><![CDATA[<p>Emacs 是一个强大的、可扩展的文本编辑器。不同于vim，它是一个流行的无模式文本编辑器。尤其是当emacs24内置包管理elpa后，使用通过<code>prelude</code>，<code>goblin</code>等，轻松使用emacs打造一个顺手的diy的web开发环境。</p>

<!-- more -->


<h3>安装Emacs24.3</h3>

<h5>安装Homebrew</h5>

<p><code>Homebrew</code>是mac系统上的包管理软件，是用<code>Ruby</code>语言编写的。我们可以使用它在终端安装系统没有自带的<code>Unix</code>相关工具。</p>

<p><em>安装步骤</em></p>

<pre><code>ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)"
cd /usr/local/Library &amp;&amp; git stash &amp;&amp; git clean -d -f
</code></pre>

<h5>通过编译源代码安装Emacs</h5>

<p>在安装<code>Homebrew</code>时，会同时安装<code>gcc</code>和<code>autoconf</code>，所以我们可以直接下载源代码进行编译安装。通过如下地址可以下载到最新的emacs安装文件。</p>

<pre><code>http://www.gnu.org/software/emacs/
</code></pre>

<p>如果没有<code>wget</code>等工具，可以通过<code>brew</code>进行安装，如：</p>

<pre><code>brew install wget
</code></pre>

<p><em>安装步骤</em></p>

<pre><code>cd /somepath/
wget http://mirror.bjtu.edu.cn/gnu/emacs/emacs-24.3.tar.gz
tar zxvf emacs-24.3.tar.gz
cd emacs-24.3
./autogen.sh
./configure --with-ns
make install
sudo ln -s /somepath/emacs-24.3/nextstep/Emacs.app /Applications/Emacs24.3.app
</code></pre>

<h5>通过Homebrew安装Emacs</h5>

<p><code>Homebrew</code>本身也是下载源代码进行编译安装，但是它可以帮我们简化这一过程。这就是技术的魅力 &mdash; make live easier。</p>

<p><em>安装步骤</em></p>

<pre><code>brew install emacs --cocoa
brew linkapps
</code></pre>

<p>顺利的话，最新版的emacs就安装在mac了。如果中途遇到问题，按照提示解决下就好。</p>

<p>有可能下载地址被墙，这时通过通过修改源代码的下载地址解决，方法如下：</p>

<pre><code>1. brew edit softname，如 brew edit emacs
2. 修改其中的url，保存退出
</code></pre>

<p>如：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;formula&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Emacs</span> <span class="o">&lt;</span> <span class="no">Formula</span>
</span><span class='line'>    <span class="n">homepage</span> <span class="s1">&#39;http://www.gnu.org/software/emacs/&#39;</span>
</span><span class='line'>    <span class="c1">#url &#39;http://ftpmirror.gnu.org/emacs/emacs-24.3.tar.gz&#39;</span>
</span><span class='line'>    <span class="n">url</span> <span class="s1">&#39;http://mirror.bjtu.edu.cn/gnu/emacs/emacs-24.3.tar.gz&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>安装完成后可以在<code>应用程序</code>，或者<code>Launchpad</code>中启动emacs，它默认长这样：</p>

<p><img src="http://jqlblue.github.io/images/emacs/startup.png" title="'emacs start up" ></p>

<h3>配置Emacs</h3>

<p>由于emacs24已经自带了包管理系统。只需几个简单的步骤，即可通过<a href="https://github.com/bbatsov/prelude">Emacs Prelude</a>或者<a href="https://github.com/jqlblue/goblin-emacs">Goblin Emacs</a>体验emacs的魅力。步骤如下：</p>

<pre><code>cd /somepath/
git clone https://github.com/jqlblue/goblin-emacs
ln -s /somepath/goblin-emacs ~/.emacs.d
</code></pre>

<p>启动emacs后，会自动下载需要的扩展，完成后即可体验。</p>

<p><img src="http://jqlblue.github.io/images/emacs/goblin-startup.png" title="'goblin emacs start up" ></p>

<p>完成<code>jedi</code>，python自动完成的配置</p>

<pre><code>cd ~/.emacs.d/elpa/jedi*
sudo pip install -r requirements.txt
</code></pre>

<p>或者指定pypi源</p>

<pre><code>sudo pip install -i http://pypi.douban.com/simple -r requirements.txt
</code></pre>

<h3>补充说明</h3>

<ul>
<li>Goblin-emacs简介</li>
</ul>


<p>goblin-emacs在prelude的基础上，对<code>PHP</code>，<code>Python</code>等<code>mode</code>进行了增强，并尽量保持原生的快捷键。相关功能介绍：</p>

<pre><code>flymake语法检测
php-mode
php基于字典的自动完成
python基于jedi的自动完成
org-mode
doxymacs 生成文档注释
slime－mode
版本控制工具的集成
</code></pre>

<p>当使用emacs编辑<code>ruby</code>或者<code>lua</code>源码时，会自动下载并安装相关<code>mode</code>，相关映射在<code>core/goblin-packages.el</code>中进行配置。</p>

<ul>
<li>交换<code>Control</code>键和<code>Caps-Lock</code>键</li>
</ul>


<p>因为emacs上的很多快捷键默认都是以<code>Control</code>开始。操作久了小拇指会比较难受，将<code>Control</code>和<code>Caps-Lock</code>进行交换，可以解放要经常蜷缩的小拇指。
<img src="http://jqlblue.github.io/images/emacs/swap-control-capslock.png" title="'swap control caps-lock" ></p>

<ul>
<li>某些汉字显示为方块</li>
</ul>


<p>由于某些字体不支持斜体的中文汉字等，这是就会在emacs中出现方块。解决方法如下：</p>

<pre><code>M-x customize-face RET font-lock-comment-face
修改其中的"slant"为"normal"
</code></pre>

<p>goblin－emace通过添加了如下设置解决：</p>

<pre><code>(set-fontset-font "fontset-default"
    'gb18030 '("Microsoft YaHei" . "unicode-bmp"))
)
</code></pre>

<ul>
<li>其他技巧</li>
</ul>


<p>一些常用的技巧记录如下</p>

<pre><code>通过`C-h t`可以查看emacs自带的教程
通过M-x describe-mode可以查看当前支持的mode和相关快捷键
</code></pre>

<p>reference：</p>

<p>[^1] <a href="http://earthwithsun.com/questions/631306/emacs-24-loading-a-package-installed-via-elpa">http://earthwithsun.com/questions/631306/emacs-24-loading-a-package-installed-via-elpa</a></p>

<p>[^2] <a href="http://toumorokoshi.github.io/emacs-from-scratch-part-2-package-management.html">http://toumorokoshi.github.io/emacs-from-scratch-part-2-package-management.html</a></p>

<p>[^3] <a href="http://blog.yam.com/hn12303158/article/35207136">http://blog.yam.com/hn12303158/article/35207136</a></p>

<p>[^4] <a href="http://blog.chinaunix.net/uid-26354188-id-3195392.html">http://blog.chinaunix.net/uid-26354188-id-3195392.html</a></p>
]]></content>
  </entry>
  
</feed>
