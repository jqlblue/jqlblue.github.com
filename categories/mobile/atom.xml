<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: mobile | Jqlblue's Blog]]></title>
  <link href="http://jqlblue.github.io/categories/mobile/atom.xml" rel="self"/>
  <link href="http://jqlblue.github.io/"/>
  <updated>2014-09-22T13:16:29+08:00</updated>
  <id>http://jqlblue.github.io/</id>
  <author>
    <name><![CDATA[jqlblue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[手动刷入android 4.4.3 OTA 更新包]]></title>
    <link href="http://jqlblue.github.io/2014/06/08/manual-update-android-ota-update/"/>
    <updated>2014-06-08T06:35:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/06/08/manual-update-android-ota-update</id>
    <content type="html"><![CDATA[<p>今天上午，nexus4终于收到了google android 4.4.3 的ota更新包，但是从上午到晚上，愣是没有下载下来。这就像因为长智齿而牙龈肿痛的你被人请吃麻辣香锅那样难受。</p>

<!-- more -->


<p>作为一个吃货，怎么能受得了这份煎熬？就算用半边牙齿，也不能虚此行。</p>

<p>当然，作为码农。就算被铜墙铁壁包围，也要想办法越过长城，对世界说出那句“hello world”。</p>

<h1>诊断</h1>

<p>更新包为什么下不下来，这肯定是有原因的。对手机的网络请求进行抓包，应该可以查明原因。</p>

<p>如何对手机进行抓包，可以参见之前的博文“<a href="http://jqlblue.github.io/2013/08/04/guide-of-packet-mobile-capture/">移动应用无线抓包指南</a>”。
如果手机使用的是家里的wifi网络，那对手机进行抓包会非常easy。两步即可：</p>

<pre><code>1. 在电脑上对fiddle进行设置
2. 修改手机上的网络设置，设置代理，其中代理服务器的ip就是电脑的ip
</code></pre>

<blockquote><p>如何设置可参见博文<a href="http://jqlblue.github.io/2013/08/04/guide-of-packet-mobile-capture/">移动应用无线抓包指南</a>”</p></blockquote>

<p>设置完成后，再请求时发现更新包的无法下载。
<img src="/images/mobile/android-4.4.3-update.png" title="android-4.4.3-update" ></p>

<p>这时有两种方案：</p>

<pre><code>1. 通过代理等途径，获取更新包域名的对应的ip，绑定host。
2. 因为已经抓包获取到了更新包的下载地址，可以通过代理等途径，下载更新包并手动刷入。
</code></pre>

<blockquote><p>因为在手机上设置的代理服务器是电脑的ip，所以只要在电脑上绑定host，手机上也会生效。</p></blockquote>

<p>由于更新包下载地址的域名是动态的，所以没法绑定host。于是只有选择下载更新包，手动刷入。</p>

<h1>下载4.4.3 OTA 更新号</h1>

<p>为了方便，已下载针对nexus4的android4.4.3的ota更新包。需要的，可直接通过如下地址下载<a href="http://pan.baidu.com/s/1mgjxxLA#dir/path=%2Fsoft%2Fandroid-4.4.3-update%2Fkitkat-4.4.3-update">android-4.4.3-ota</a>。</p>

<h1>使用adb手动刷入OTA更新包</h1>

<h2>手动刷入的准备工作</h2>

<p>在手动刷入更新包时，除了下载更新包，还需要做如下准备工作：</p>

<ul>
<li>在手机的<code>开发者选项</code>中，开启<code>USB调试</code>。</li>
</ul>


<blockquote><p>在<code>设置</code>，<code>关于手机</code>中，狂点<code>版本号</code>，可开启<code>开发者选项</code>。</p></blockquote>

<ul>
<li>在电脑上使用usb线连接手机</li>
</ul>


<p>手机上应该会出现如下画面。选择<code>允许</code></p>

<p><img src="/images/mobile/android-usb-debug.png" title="安卓usb调试" ></p>

<p>使用usb连接手机后，电脑上可能会自动安装相关驱动程序，请耐心等待完成。</p>

<ul>
<li>下载adb</li>
</ul>


<p><code>adb</code>包含在android的sdk中，但是我们只需要<code>adb.exe</code>, <code>AdbWinApi.dll</code>, <code>AdbWinUsbApi.dll</code>。</p>

<p>如果不想去下载android的sdk，可以通过如下地址下载<a href="http://pan.baidu.com/s/1mgjxxLA#dir/path=%2Fsoft%2Fandroid-4.4.3-update%2Fadb">刷机adb</a>。</p>

<p>下载完成后，解压到某个目录，如<code>D:\soft\nexus4\Tools</code>，在命令行执行：</p>

<pre><code>cd D:\soft\nexus4\Tools
d:
adb.exe devices
</code></pre>

<p>如果看到下图，说明准备工作告一段落。如果没有，可能是相关驱动安装地有问题，可自行查阅解决。</p>

<p><img src="/images/mobile/android-adb-devices.png" title="安卓adb devices" ></p>

<h2>开刷</h2>

<ul>
<li>关机，然后按住<code>音量下键</code>和<code>电源键</code>，进入fastboot模式：</li>
</ul>


<p><img src="/images/mobile/android-fastboot.png" title="安卓fastboot" ></p>

<ul>
<li>通过按<code>音量上下键</code>进行切换，切换到<code>Recovery Mode</code>模式，按<code>电源键</code>选择进入：</li>
</ul>


<p><img src="/images/mobile/android-recovery-mode.png" title="安卓recovery-mode" ></p>

<p>此时，你可以看到一个倒地的机器人：</p>

<p><img src="/images/mobile/android-recovery-mode-2.png" title="安卓recovery-mode" ></p>

<ul>
<li>按<code>电源键</code>，然后再迅速按<code>音量上键</code></li>
</ul>


<blockquote><p>这一步比较艰难，需要多尝试几次</p></blockquote>

<p>直到看到如下界面：</p>

<p><img src="/images/mobile/android-apply-update.png" title="安卓adb update" ></p>

<p>再按<code>音量上下键</code>进行切换，切换到<code>apply update from ADB</code>，按<code>电源键</code>选择进入：</p>

<p><img src="/images/mobile/android-sideload.png" title="安卓sideload" ></p>

<ul>
<li>通过USB再次连接电脑和手机</li>
</ul>


<p>在命令行执行：</p>

<pre><code>adb.exe sideload kitkat-4.4.3.zip
</code></pre>

<p><img src="/images/mobile/android-adb-sideload.png" title="安卓 adb sideload" ></p>

<p>手机上将会出现如下界面：</p>

<p><img src="/images/mobile/android-update-ota-1.png" title="安卓 ota update" ></p>

<p>耐心等待，等ota更新包安装完成时，会出现如下界面，按<code>电源键</code>选择重启即可。</p>

<p><img src="/images/mobile/android-update-ota-2.png" title="安卓 ota update" ></p>

<p>重启后，会对已安装的应用进行优化。通过<code>设置</code>，<code>关于手机</code>查看系统版本，发现已经是<code>4.4.3</code>。</p>

<p><img src="/images/mobile/android-4.4.3-update-end.jpg" title="安卓 ota 更新完成" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初探android应用性能分析]]></title>
    <link href="http://jqlblue.github.io/2013/11/22/android-app-profile-tools/"/>
    <updated>2013-11-22T18:03:00+08:00</updated>
    <id>http://jqlblue.github.io/2013/11/22/android-app-profile-tools</id>
    <content type="html"><![CDATA[<p>如果一个android应用打开时比较慢，或者使用起来比较卡。这个可能是客户端代码有待优化，也可能是服务端性能比较挫。对一个客户端开发者而言，在客户端代码中增加相关debug日志，即可比较准确地定位问题。但这活要落到一个服务端开发人员手里，要怎么办？</p>

<p>本文将在没有apk源码的情况下，以服务端开发人员的视角进行客户端app性能的分析。</p>

<!-- more -->


<p>在分析之前，我们先补充点android基础知识。</p>

<h3>android基础知识</h3>

<p>我们所说的android应用，一般都是通过将一个以apk结尾的文件安装在手机等移动设备上才能运行起来的。所以我们先从apk说起。</p>

<h5>什么是apk</h5>

<p>我们先从网上下载一个apk</p>

<pre><code>$ wget http://shouji.360tpcdn.com/131106/0124832c4cf8c35a762cfece3bac52b1/com.sina.weibo_650.apk
</code></pre>

<p>然后查看这个文件的类型</p>

<pre><code>$ file com.sina.weibo_650.apk
com.sina.weibo_650.apk: Zip archive data, at least v2.0 to extract
</code></pre>

<p>会发现<code>com.sina.weibo_650.apk</code>是一个zip压缩文件。解压缩后的文件，主要包括<em>一些资源文件</em>，<em>一些配置文件</em>，<em>一些类库</em>，还有<em>一个class.dex</em>。目录结构如下</p>

<pre><code>AndroidManifest.xml
assets
classes.dex
lib
META-INF
org
res
resources.arsc
</code></pre>

<p>粗略一看，发现 <code>class.dex</code> 这个文件有5.9M，这应该就是主角。继续执行如下命令</p>

<pre><code>$ file classes.dex
classes.dex: Dalvik dex file version 035
</code></pre>

<p>因为没有开发过android应用，不明白用java开发的app和这个Dalvik dex file之间有什么关系？所以我们先跳出apk的视角。</p>

<h5>android平台架构</h5>

<p><img src="/images/mobile/android_architecture.png" title="&lsquo;android architecture images&rsquo;" ></p>

<p>如上图，android基于linux操作系统，使用linux内核与设备的硬件进行交互。在内核之上，又抽象出了一层，包括Dalvik虚拟机等。</p>

<p>因为<code>dex</code>是<code>Dalvik VM</code> Executes的全称，即android <code>Dalvik</code>虚拟机执行程序。</p>

<p>那一个apk的生产和执行过程将是：
<code>*.java -&gt; *.class -&gt; classes.dex（classes.dex将由Dalvik VM转换成机器码，由linux内核交给cpu去执行）</code></p>

<p>这样的话，在linux系统上使用profile软件的经验，也将派上用场。</p>

<p>android相关基础知识先介绍到此，感兴趣的请进一步查阅本文后面的参看资料。</p>

<h3>android应用性能分析</h3>

<h5>apk启动速度</h5>

<p>在分析之前，我们先看看android程序的执行流程
<img src="/images/mobile/android_application_execute_flow.png" title="&lsquo;android application execute flow images&rsquo;" ></p>

<p>如上图，只要获取到启动ActivityManager所需要的时间，即是apk的启动时间。</p>

<pre><code>adb logcat | grep ActivityManager
</code></pre>

<p>其中"Displayed"对应的时间，即是launch Activity对应的时间，也就是apk启动时间，也可以使用如下命令：</p>

<pre><code>adb logcat -c &amp;&amp; adb logcat -s ActivityManager | grep  "Displayed"
</code></pre>

<ul>
<li>要使用 <code>adb</code>，需要先用usb线连接电脑和手机，并在手机的<code>设置</code>&ndash;><code>开发者选项</code>中开启<code>USB调试</code></li>
<li><code>adb</code>这个工具，可以通过在android sdk的platform-tools目录中找到。后面介绍的<code>systrace</code>也在这个目录。</li>
</ul>


<h5>页面渲染性能</h5>

<p>android应用中的页面，是由android系统一帧，一帧地绘制的，其中每一帧的处理如下图：
<img src="/images/mobile/android_view_execute_flow.png" title="&lsquo;android view execute flow images&rsquo;" ></p>

<p>即：
<code>计算视图大小（measure） -&gt; 安置视图的位置（layout） -&gt; 绘制（draw）视图</code></p>

<p>通过收集每帧的处理时间，即可以了解页面的渲染性能。</p>

<blockquote><p>当fps（每秒处理帧数，页面刷新率）为60时，页面的渲染看起来会比较平滑，这就需要每帧的处理时间不能大于16ms（1000/60）</p></blockquote>

<p>要检测一个应用在渲染页面时的每帧处理时间，通过如下命令，即可获得每帧的处理时间</p>

<pre><code>adb shell dumpsys gfxinfo com.sina.weibo
</code></pre>

<p>在输出日志的<code>Profile</code>数据段，包含了三列<code>Draw</code>，<code>Process</code>，<code>Execute</code>分别对应的处理时间，单位是ms。这三列的总和，就是渲染每帧时的处理时间。如</p>

<pre><code>Draw    Process Execute
0.95    0.93    0.72
0.84    1.16    0.56
0.83    0.89    0.69
1.32    2.15    1.14
1.29    1.37    1.01
</code></pre>

<blockquote><p>在进行分析之前，需要在<code>设置</code>&ndash;><code>开发者选项</code>中点击<code>GPU呈现模式分析</code>，选择<code>在adb shell dumpsys gfxinfo中</code>。</p></blockquote>

<p>收集步骤：</p>

<pre><code>1.重新启动app
2.在界面完全加载完之后，在界面上慢慢上下滑动几个像素
3.在终端执行adb shell dumpsys gfxinfo com.sina.weibo
</code></pre>

<p>这时将在终端输出页面渲染时的最后128帧中每帧所花费的时间，将相关数据贴到excel表格中，点击其中的<code>insert</code>&ndash;><code>chart</code>，即可生成相关图表
<img src="/images/mobile/frame_render_time.png" title="&lsquo;frame render time images&rsquo;" ></p>

<blockquote><p>其中<code>com.sina.weibo</code>就是app的包名</p></blockquote>

<p>获取包名的方法:</p>

<pre><code>adb shell pm list packages
</code></pre>

<h5>使用systrace进一步分析</h5>

<p>通过收集该apk的启动速度和每帧的渲染时间，并与竟品进行对比发现。该app启动时间的确比较慢，也偶尔有丢帧的现象发生。如何近一步分析呢？这时就需要<code>systrace</code>了。</p>

<p>示例使用方法如下：</p>

<pre><code>cd android-sdk-linux/platform-tools/systrace
python systrace.py --app=com.qihoo.appstore gfx view
</code></pre>

<p>上面这条命令将会在<code>android-sdk-linux/platform-tools/systrace</code>目录下生成<code>trace.html</code>。其中收集了包名为<code>com.qihoo.appstore</code>的应用在android系统上针对<code>gfx</code>和<code>view</code> category的执行数据。</p>

<p><code>trace.html</code>在浏览器中打开如下图：
<img src="/images/mobile/android_systrace_output.png" title="&lsquo;android systrace output images&rsquo;" ></p>

<p>可以使用如下方法，对<code>trace.html</code>进行进一步分析：
* 通过鼠标点击左侧的<code>+</code>，<code>-</code>可以展开或者收缩相关显示数据
* 通过键盘上的<code>a</code>，<code>d</code>可以使显示的内容沿着顶部的时间轴向左或者向右移动
* 通过键盘上的<code>w</code>，<code>s</code>可以对显示的内容进行放大或者缩小
* 使用鼠标点击内容页面的某一个块，在下方会显示详情
* 使用鼠标选择一块内容页面，在下方会显示汇总信息</p>

<p>将光标定位到最后一行，使用<code>w</code>进行放大，使用<code>d</code>向左移动到2260ms左右，如下图：
<img src="/images/mobile/android_systrace_output_zoom.png" title="&lsquo;android systrace output detail images&rsquo;" ></p>

<p>发现对于那些<code>performTraversals</code>处理超过16ms的帧，其中<code>eglSwapBuffers</code>处理的时间都比较长，这应该就是问题所在。</p>

<p>使用usb线连接上手机，在命令行下运行：</p>

<pre><code>python systrace.py -h
</code></pre>

<p>可以查看相关使用方法。</p>

<blockquote><p>systrace是在在android4.1上新增的工具，在4.1,4.2和4.3上使用的方法不同</p></blockquote>

<p>reference：</p>

<p>[^1] <a href="http://www.curious-creature.org/docs/android-performance-case-study-1.html">http://www.curious-creature.org/docs/android-performance-case-study-1.html</a></p>

<p>[^2] <a href="http://www.curious-creature.org/docs/android-performance-case-study-1.html">http://www.curious-creature.org/docs/android-performance-case-study-1.html</a></p>

<p>[^3] <a href="http://www.vogella.com/articles/AndroidTools/article.html">http://www.vogella.com/articles/AndroidTools/article.html</a></p>

<p>[^4] <a href="http://blog.csdn.net/aaa2832/article/details/7849400">http://blog.csdn.net/aaa2832/article/details/7849400</a></p>

<p>[^5] <a href="http://www.cnblogs.com/taobox/articles/3405931.html">http://www.cnblogs.com/taobox/articles/3405931.html</a></p>

<p>[^6] <a href="http://bigflake.com/systrace/">http://bigflake.com/systrace/</a></p>

<p>[^7] <a href="http://developer.android.com/tools/debugging/systrace.html">http://developer.android.com/tools/debugging/systrace.html</a></p>

<p>[^8] <a href="http://kitoslab-eng.blogspot.com/2013/01/aprof-android-profiler-profiling-tool.html">http://kitoslab-eng.blogspot.com/2013/01/aprof-android-profiler-profiling-tool.html</a></p>

<p>[^9] <a href="http://udinic.wordpress.com/tag/rendering/">http://udinic.wordpress.com/tag/rendering/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[移动应用无线抓包指南]]></title>
    <link href="http://jqlblue.github.io/2013/08/04/guide-of-packet-mobile-capture/"/>
    <updated>2013-08-04T11:41:00+08:00</updated>
    <id>http://jqlblue.github.io/2013/08/04/guide-of-packet-mobile-capture</id>
    <content type="html"><![CDATA[<h3>引子</h3>

<p>如果将互联网比喻成纵横交错的铁道，那由c，h，o等元素组成的人和物则被打
包装进一节节车厢，然后组成一列火车在铁道上穿行。手机，笔记本等终端，可
以理解为车站，每天都有很多人进进出出。</p>

<p>有一天，你突然发现车站少了个东西，或者想了解下都有些什么人出站，什么人
入站。这时，我们就需要抓包（Capturing Packages）。</p>

<p>继续以铁路为例。一般情况下，我们只要在装载这人和物的火车入站和出站的时候设置关卡，
进行检查就可以了。</p>

<!-- more -->


<p>但突然有天发现某个车站是德国人给造的，我们要私自设置
关卡的话，就没有保修了。</p>

<p>实际上，我们私自设置关卡也无防。现在的东西更新换代太快，等坏的时候，直
接入手一个新的，或许比保修还经济呢。</p>

<p>等要动手的时候，想起这个德国制造，还是有些不忍。</p>

<p>在你正想点燃那支兰州的当儿，想起西边有你表哥建造的一个车站。所以可以代
理一把，让要进出的火车先去你表哥的车站。</p>

<h3>抓包的三种方式</h3>

<p>至此，我们可以看到抓包的三种方式：</p>

<pre><code>1. 本地抓包
2. 远程服务器抓包
3. 代理抓包
</code></pre>

<h3>本地抓包</h3>

<p>不管使用手机还是平板，进出的数据包，都会经过该设备的网卡。如果你的设备
已经root，可以使用tcpdump将抓包数据存成xxx.pcap，然后在电脑上就可以使
用wireshark进行查看。也可以使用webview
<a href="http://www.cloudshark.org">cloudshark</a>。
更多信息请上google查询。</p>

<h3>远程服务器抓包</h3>

<p>从设备上发出的请求，在网络通畅的情况下，最终都会达到某个服务器。所以我
们可以在远程服务器上抓包。可以使用tcpdump，但是我更推荐ngrep(network
grep)。</p>

<p>在centos上，直接</p>

<pre><code>yum install ngrep
</code></pre>

<p>下面是一些简单示例</p>

<pre><code>ngrep -t -d any port 25
ngrep -q -W byline "(GET|POST).*"
</code></pre>

<p>更多用法请查看</p>

<pre><code>man ngrep
</code></pre>

<h3>代理抓包</h3>

<p>开始废话说地有点多，这才是本文的重点。</p>

<p>设置代理，就是要在你的移动终端和某台电脑之间网络互通的情况下：</p>

<pre><code>1. 在电脑上设置代理
2. 移动终端上网的时候连接这个代理
</code></pre>

<p>就可以在电脑上进行抓包了（<em>把一个陌生的概念转行成一个很熟悉的概念，
fiddle抓包嘛，码农应该都知道</em>）。</p>

<p>我们以移动终端与要进行代理抓包的电脑之间网络不通的情况为例进行说明（<em>如
果电脑和移动终端可以连接同一wifi，只要按照设置代理的部分进行操作就好</em>）</p>

<ul>
<li><p>在电脑上创建无线网络</p>

<p>  我们使用360随身wifi在电脑上创建无线网络。要购买的话，现阶段需要时常关注
  <a href="http://wifi.360.cn/">官网</a>,因为不定期会在京东开启抢购。安装非常简
  单，插入usb接口，就自动创建好无线网络了（目前只支持windows系统）</p>

<p>  <img src="/images/360wifi_1.png" title="&lsquo;360 wifi images&rsquo;" >
  <img src="/images/360wifi_2.png" title="&lsquo;360 wifi images&rsquo;" >
  <img src="/images/360wifi_3.png" title="&lsquo;360 wifi images&rsquo;" ></p></li>
<li><p>在电脑上用fiddle设置代理</p>

<p>  <img src="/images/360wifi_fiddle.png" title="&lsquo;360 wifiproxy fidlle images&rsquo;" ></p></li>
<li><p>修改手机上的网络设置，并设置代理</p>

<p>  <img src="/images/360wifi_proxy_1.png" title="&lsquo;360 wifi mobile network" >
  <img src="/images/360wifi_proxy_2.png" title="'360 wifi mobile network" >
  <img src="/images/360wifi_proxy_3.png" title="'360 wifi mobile network" ></p>

<p>  代理服务器的ip可以通过在电脑上查看网络连接获取，代理的端口就是在
  fiddle中设置的"listen on port"</p>

<p>  <img src="/images/360wifi_proxy_ip.png" title="&lsquo;360 wifi mobile network" ></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
