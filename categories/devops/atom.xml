<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devops | Jqlblue's Blog]]></title>
  <link href="http://jqlblue.github.io/categories/devops/atom.xml" rel="self"/>
  <link href="http://jqlblue.github.io/"/>
  <updated>2014-05-14T20:58:12+08:00</updated>
  <id>http://jqlblue.github.io/</id>
  <author>
    <name><![CDATA[jqlblue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用tcpcopy导入线上流量进行功能和压力测试]]></title>
    <link href="http://jqlblue.github.io/2014/01/08/use-tcpcopy-test-online/"/>
    <updated>2014-01-08T17:29:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/01/08/use-tcpcopy-test-online</id>
    <content type="html"><![CDATA[<p>假设我们要上线一个两年内不会宕机的先进架构。在上线前，免不了单元测试，功能测试，还有使用ab，webbench等等进行压力测试。</p>

<p>但这些步骤非生产环境下正式用户的行为。或许你会想到灰度上线，但毕竟可能会影响到部分用户，这怎么对得起我们两年内不宕机的承诺呢？</p>

<p>好在网易的 <a href="http://weibo.com/tcpcopy">王斌</a> 开发了<a href="https://github.com/wangbin579/tcpcopy">tcpcopy</a>， 可以导入线上流量进行功能和压力测试。</p>

<!-- more -->


<h3>tcpcopy介绍</h3>

<p><code>tcpcopy</code>是一种请求复制工具。可以将线上流量拷贝到测试机器，实时的模拟线上环境。在不影响线上用户的情况下，使用线上流量进行测试，以尽早发现bug。也可以通过放大流量，进行压力测试，评估系统承载能力。</p>

<p><code>tcpcopy</code>可以从线上服务器的<code>IP</code>层抓取在线请求的数据包，修改相关属性，利用<code>raw socket output</code>技术（<code>packet injection</code> 技术之一）将其发送给测试服务器进行测试。</p>

<p>发送到测试服务器的数据包会在<code>TCP/IP</code>协议栈被识别，其中带有<code>payload</code>（tcp data）的数据包最终进入到测试服务器的上层应用（如nginx），上层应用在处理完请求之后，将响应传递给测试服务器的<code>TCP/IP</code>协议栈。</p>

<p>在测试服务器上启用<code>ip_queue</code>模块，并使用<code>iptables</code>在<code>IP</code>层将响应结果数据包发往QUEUE（<code>ip_queue</code>）。</p>

<p>测试服务器上运行在<code>用户空间</code>的拦截程序（intercept进程），通过打开<code>netlink</code>的socket接受内核通过<code>ip_queue</code>所传递来的网络数据包（即上层应用的响应内容）进行裁定，将结果返回内核，进行出队列的操作。intercept进程默认会丢弃上层应用的响应内容，返回ip header，以释放tcp连接。</p>

<p>intercept进程也可以通过<code>-x</code>（passlist）参数，不drop指定ip lists发出请求的响应内容。默认drop是为了：</p>

<pre><code>1 减少出口带宽占用，节约成本
2 不影响客户端（线上服务）的`TCP/IP`协议栈
3 不会在互联网上产生ghost数据包
</code></pre>

<h3>tcpcopy工作流程</h3>

<p>{% img /images/tcpcopy_flow.png &lsquo;tcpcopy flow&rsquo; %}
如上图，tcpcopy拷贝一次流量访问的步骤如下：</p>

<pre><code>①　一个访问到达线上前端机；
②　socket数据包在ip层被拷贝了一份传给tcpcopy进程；
③　tcpcopy修改包的目的及源地址，发给目标测试机；
④　拷贝的包到达目标测试机；
⑤　目标测试机的nginx处理访问，并返回结果；
⑥　返回结果在ip层被截获、丢弃，由intercpet进程拷贝返回结果的ip header并返回；
⑦　ip header被发送给线上前端机的tcpcopy进程。
</code></pre>

<h3>安装和配置</h3>

<p>tcpcopy有两种工作模式：</p>

<pre><code>1 实时拷贝数据包
2 通过使用tcpdump等抓包生成的文件进行离线（offline）请求重放
</code></pre>

<p>如果采用实时拷贝线上流程进行导入的方式，需要分别在线上服务器和测试服务器安装<code>tcpcopy</code>，对于离线模式，只需要在测试服务器上安装<code>tcpcopy</code>，编译时指定 <code>--enable-offline</code>。</p>

<h5>安装步骤如下：</h5>

<pre><code>wget https://github.com/wangbin579/tcpcopy/archive/0.9.0.tar.gz -O tcpcopy-0.9.0.tar.gz --no-check-certificate
tar zxvf tcpcopy-0.9.0.tar.gz
cd tcpcopy-0.9.0
./autogen.sh
./configure --prefix=/usr/local/tcpcopy
make
sudo make install
</code></pre>

<h5>目标测试机配置</h5>

<p>线上服务器拷贝的数据包发送至测试服务器进行处理之后，测试服务器需要通过<code>iptables</code>将响应结果发送至QUEUE（<code>ip_queue</code>），这样测试服务器上运行的<code>intercept</code>拦截进程才能通过打开的<code>netlink</code>socket获取传递过来的数据包并进行裁定。所以测试服务器上需要开启<code>iptables</code>防火墙，并启用内核模块<code>ip_queue</code></p>

<pre><code>modprobe ip_queue
/etc/init.d/iptables start
</code></pre>

<p>因为线上服务器需要和目标测试服务器通信，传递请求数据包和控制信息（封装的ip packet header），所以需要在测试服务器上添加相关<code>iptables</code>防火墙规则。编辑<code>/etc/sysconfig/iptables</code>，添加：</p>

<pre><code>-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 80 -j ACCEPT
-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 36524 -j ACCEPT
</code></pre>

<p>然后重启<code>iptables</code></p>

<pre><code>/etc/init.d/iptables restart
</code></pre>

<p>接着执行：</p>

<pre><code>iptables -I OUTPUT -p tcp --sport 80 -j QUEUE
</code></pre>

<p>将响应结果发送至QUEUE（<code>ip_queue</code>），从而实现运行在用户态的进程对相关数据包进行裁定。</p>

<h3>相关使用</h3>

<p>本文以线上和测试机的web服务都使用80端口，传递控制信息使用默认的36524端口为例。如果使用别的端口，记得修改相关<code>iptables</code>防火墙规则。</p>

<h5>离线 offline</h5>

<p>1） 在线上服务器抓包</p>

<pre><code>tcpdump -i eth0 tcp and port 80 -s 0 -w online.pcap
</code></pre>

<p>2） 将抓包生成的文件拷贝到测试服务器</p>

<p>3） 在测试服务器上进行执行如下命令进行重放</p>

<pre><code>cd /usr/local/tcpcopy/bin
sudo ./intercept
sudo ./tcpcopy -i /path/online.pcap -x 80-10.16.12.11:80

tcpcopy -i &lt;抓包文件地址&gt; -x &lt;port&gt;-&lt;本地ip&gt;:&lt;port&gt;
</code></pre>

<h5>在线实时复制 online</h5>

<p>1） 在测试服务器上启动<code>intercept</code>拦截进程</p>

<pre><code>cd /usr/local/tcpcopy/bin
sudo ./intercept
</code></pre>

<p>2） 在线上服务器复制流量到测试服务器</p>

<pre><code>cd /usr/local/tcpcopy/bin
sudo ./tcpcopy -x 80-10.16.12.11:80 -c 10.16.12.12

tcpcopy -x 服务器应用端口号-测试服务器ip地址:测试服务器应用端口 -c 本地服务器ip
</code></pre>

<p>reference：</p>

<p>[^1] <a href="https://github.com/wangbin579/tcpcopy">https://github.com/wangbin579/tcpcopy</a></p>

<p>[^2] <a href="http://www.searchtb.com/2012/05/using-tcpcopy-to-simulate-traffic.html">http://www.searchtb.com/2012/05/using-tcpcopy-to-simulate-traffic.html</a></p>

<p>[^3] <a href="http://hi.baidu.com/yacker/item/e6bd5b287fe5a3f150fd8731">http://hi.baidu.com/yacker/item/e6bd5b287fe5a3f150fd8731</a></p>

<p>[^4] <a href="http://blog.yam.com/hn12303158/article/35207136">http://blog.yam.com/hn12303158/article/35207136</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在生产环境部署sentry进行错误收集和提醒]]></title>
    <link href="http://jqlblue.github.io/2013/12/18/deploy-sentry-in-product/"/>
    <updated>2013-12-18T11:10:00+08:00</updated>
    <id>http://jqlblue.github.io/2013/12/18/deploy-sentry-in-product</id>
    <content type="html"><![CDATA[<p>Sentry正如其名，是一个实时的日志聚合平台，可以通过捕获程序事件（<code>Error</code>，<code>Exception</code>），或者主动上报的方式将错误信息等进行收集汇总和提醒，以帮助我们及时发现项目中的问题。</p>

<!-- more -->


<p>Sentry Server端是使用python语言开发的，目前有如下平台的客户端sdk：</p>

<p><code>Python</code>，<code>PHP</code>，<code>Ruby</code>，<code>Javascript</code>，<code>Java</code>，<code>Nodejs</code>，<code>IOS</code></p>

<p>项目地址：<a href="https://github.com/getsentry/sentry">https://github.com/getsentry/sentry</a></p>

<p>本文以收集<code>PHP</code>错误为例。</p>

<h3>安装步骤</h3>

<p>Sentry的文档清晰且完善，包括<code>安装</code>，<code>配置</code>，<code>调优</code>以及<code>客户端调用</code>，正式使用之前，建议看看，以加深理解。地址：<a href="http://sentry.readthedocs.org/en/latest/">http://sentry.readthedocs.org/en/latest/</a></p>

<h4>python环境安装</h4>

<p>Sentry需要python2.5以上，本文以<code>python2.7.3</code>为例，使用<code>virtualenv</code>进行环境隔离，使用<code>pip</code>安装需要的包
{% codeblock python2.7.3-install.sh lang:bash %}
cd ~
yum install -y bzip2-devel.x86_64
yum install -y sqlite-devel.x86_64
yum install -y readline-devel.x86_64
wget <a href="http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2">http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2</a>
tar jxvf Python-2.7.3.tar.bz2
cd Python-2.7.3
./configure &mdash;prefix=/usr/local/python2.7.3
make
sudo make install</p>

<p>wget <a href="https://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz">https://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz</a> &mdash;no-check-certificate
tar zxvf distribute-0.6.49.tar.gz
cd distribute-0.6.49
sudo /usr/local/python2.7.3/bin/python setup.py install
sudo /usr/local/python2.7.3/bin/easy_install virtualenv
sudo /usr/local/python2.7.3/bin/easy_install -i <a href="http://e.pypi.python.org/simple">http://e.pypi.python.org/simple</a> virtualenvwrapper
{% endcodeblock %}
至此，就完成了python2.7.3和pip，以及virtualenv的安装，使用如下命令进行测试</p>

<pre><code>/usr/local/python2.7.3/bin/python
</code></pre>

<h4>安装Sentry server</h4>

<p>初始化安装目录</p>

<pre><code>mkdir -p /data/server/python-envs
</code></pre>

<p>添加相关环境变量</p>

<pre><code>vim ~/.bashrc
</code></pre>

<p>添加：</p>

<pre><code>export WORKON_HOME=/data/server/python-envs
export VIRTUALENVWRAPPER_PYTHON=/usr/local/python2.7.3/bin/python
export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/python2.7.3/bin/virtualenv
source /usr/local/python2.7.3/bin/virtualenvwrapper.sh
</code></pre>

<p>使环境变量生效</p>

<pre><code>source ~/.bashrc
</code></pre>

<p>安装Sentry server</p>

<pre><code>mkvirtualenv sentry
pip install sentry
pip install sentry[mysql]
pip install sentry[mysql] --upgrade
</code></pre>

<p>修改<code>~/.bashrc</code>，添加如下代码，以便登录后自动切换到相关python环境</p>

<pre><code>source /data/server/python-envs/sentry/bin/activate
</code></pre>

<h3>快速配置</h3>

<p>或许你还没有做好决定，只是想尽快体验下Sentry，在完成上面的安装之后，通过下面三个步骤即可满足你的愿望：</p>

<p>1 初始化配置</p>

<pre><code>sentry init ~/sentry.conf.py
</code></pre>

<p>2 修改配置</p>

<p>修改初始配置中的如下两项就行</p>

<p><code>SENTRY_WEB_HOST</code>，<code>SENTRY_URL_PREFIX</code>，如：</p>

<pre><code>SENTRY_URL_PREFIX = 'http://10.16.15.1:9000'
SENTRY_WEB_HOST = '10.16.15.1'
</code></pre>

<p>3 创建超级管理员帐号，启动server</p>

<pre><code>sentry --config=~/sentry.conf.py upgrade
sentry --config=~/sentry.conf.py createsuperuser
sentry --config=~/sentry.conf.py start
</code></pre>

<p>然后就可以通过url <a href="http://server_host:port">http://server_host:port</a> ，使用创建的帐号登录系统后台，进行项目，帐号等管理，和已收集日志的查看等等</p>

<h3>配置在生产环境中使用</h3>

<h4>Sentry server</h4>

<p><em>我们在生产环境下的使用状况：</em></p>

<ul>
<li><p>使用<code>mysql</code>作为后端数据存储</p></li>
<li><p>使用<code>celery</code>任务队列（<code>broker</code>使用<code>redis</code>），处理数据入库，发送邮件提醒等工作</p></li>
<li><p>同时，使用<code>redis</code>作为<code>Update Buffers</code>，用于将频繁出现的相同事件合并，这在高并发时会相当有用</p></li>
<li><p>使用<code>memcache</code>作为前端<code>Cache</code>，管理后台通过轮询的访问获取是否有新的事件提醒，使用<code>memcache</code>，可以减轻直接查询数据库的压力</p></li>
<li><p>使用<code>Udp</code>协议发送并接收相关事件</p></li>
<li><p>使用<code>Nginx</code>反向代理前端http请求，并使用<code>HttpLimitReqModule</code>限制请求的发送速率</p></li>
<li><p>使用<code>supervisor</code>管理<code>celery</code>和<code>sentry</code>server</p></li>
</ul>


<p><em>相关安装步骤：</em></p>

<pre><code>pip install redis hiredis nydus
pip install redis hiredis nydus --upgrade
pip install python-memcached
pip install gevent
pip install eventlet
pip install supervisor
</code></pre>

<p><em>初始化配置</em></p>

<pre><code>mkdir -p /data/server/sentry/etc
sentry init /data/server/sentry/etc/sentry.conf.py
</code></pre>

<p><em>创建超级管理员帐号</em></p>

<pre><code>sentry --config=/data/server/sentry/etc/sentry.conf.py upgrade
sentry --config=/data/server/sentry/etc/sentry.conf.py createsuperuser
</code></pre>

<p><em>初始化supervisor配置</em></p>

<pre><code>echo_supervisord_conf &gt; /data/server/sentry/etc/supervisord.conf
</code></pre>

<p><em>配置Sentry</em></p>

<p>示例配置请参见 <a href="https://gist.github.com/jqlblue/8018185">https://gist.github.com/jqlblue/8018185</a></p>

<p>修改<code>/data/server/sentry/etc/supervisord.conf</code>，添加：</p>

<pre><code>[program:web]
command=/data/server/python-envs/sentry/bin/sentry --config=/data/server/sentry/etc/sentry.conf.py start
process_name=%(program_name)s_%(process_num)02d
numprocs=3
numprocs_start=0
startsecs=5
startretries=3
stopsignal=QUIT
stopwaitsecs=10
stopasgroup=true
killasgroup=true
environment=SENTRY_CONF="/data/server/sentry/etc/sentry.conf.py"
directory=/data/server/python-envs/sentry/

[program:sentry_udp]
command=/data/server/python-envs/sentry/bin/sentry --config=/data/server/sentry/etc/sentry.conf.py start udp
process_name=sentry_udp_server
numprocs=1
numprocs_start=0
startsecs=5
startretries=3
stopsignal=QUIT
stopwaitsecs=10
stopasgroup=true
killasgroup=true
environment=SENTRY_CONF="/data/server/sentry/etc/sentry.conf.py"
directory=/data/server/python-envs/sentry/

[program:celeryd]
command=/data/server/python-envs/sentry/bin/sentry celery worker -c 6 -P processes -l WARNING -n worker-%(process_num)02d.worker
process_name=%(program_name)s_%(process_num)02d
numprocs=1
numprocs_start=0
startsecs=1
startretries=3
stopsignal=TERM
stopwaitsecs=10
stopasgroup=false
killasgroup=true
environment=SENTRY_CONF="/data/server/sentry/etc/sentry.conf.py"
directory=/data/server/python-envs/sentry/
</code></pre>

<p><em>管理Sentry server</em></p>

<ul>
<li>启动superviord</li>
</ul>


<p>执行如下命令，同时，<code>celery</code>，<code>sentry web</code>，<code>sentry udp server</code>也将随之启动</p>

<pre><code>supervisord -c /data/server/sentry/etc/supervisord.conf
</code></pre>

<ul>
<li>停止sentry相关server</li>
</ul>


<p>执行如下命令</p>

<pre><code>supervisorctl -c /data/server/sentry/etc/supervisord.conf stop all
</code></pre>

<ul>
<li>停止superviord</li>
</ul>


<p>执行如下命令，同时，已启动的<code>centry</code>相关server也将停止</p>

<pre><code>supervisorctl -c /data/server/sentry/etc/supervisord.conf stop all
</code></pre>

<p><code>supervisor</code>更多使用方法请参见 <a href="http://supervisord.org/">http://supervisord.org/</a></p>

<p><code>nginx</code>配置请参见 <a href="https://gist.github.com/jqlblue/8019629">https://gist.github.com/jqlblue/8019629</a></p>

<h4>Sentry client</h4>

<p>可以通过在程序中<code>registerExceptionHandler</code>和<code>registerErrorHandler</code>将相关信息即时发送至server端。</p>

<p>相关sdk项目地址 <a href="https://github.com/getsentry/raven-php">https://github.com/getsentry/raven-php</a></p>

<p>实例化<code>Raven_Client</code>时使用的<code>DSN</code>中的<code>public:secret</code>可以在使用管理员登录后台后，在<code>项目</code>&ndash;<code>设置</code>下面查看到。示例地址：<a href="http://sentry_host/team_name/project_name/docs/php/">http://sentry_host/team_name/project_name/docs/php/</a></p>

<p>我们采用通过增量读取php error log，使用crontab将错误信息上报。</p>

<p>基于sentry php sdk修改之后的代码地址：<a href="https://gist.github.com/jqlblue/8019312">https://gist.github.com/jqlblue/8019312</a></p>

<p>安装依赖</p>

<pre><code>yum install -y logcheck.noarch
</code></pre>

<p><code>logcheck</code>中的<code>logtail2</code>用于增量读取日志，<code>flock</code>用于防止定时任务堆积。</p>

<blockquote><p>另外，需要安装php的sockets扩展</p></blockquote>

<p>添加定时任务</p>

<pre><code>* * * * * /usr/bin/flock -xn /tmp/sentry_client.lock /opt/php-5.5.4/bin/php /path/client.php --project=project_name 2&gt;&amp;1 &gt; /dev/null
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[an introduction to systemtap]]></title>
    <link href="http://jqlblue.github.io/2013/08/18/an-introduction-to-systemtap/"/>
    <updated>2013-08-18T10:07:00+08:00</updated>
    <id>http://jqlblue.github.io/2013/08/18/an-introduction-to-systemtap</id>
    <content type="html"><![CDATA[<p>就像它的名字system（系统）tap（窃听），systemtap提供了底层的支持，以简化系统在运行时的信息收集（包括用户态和内核态的信息）。通过对收集到的信息进行分析，可以帮忙我们识别潜在的性能原因和功能问题。</p>

<!-- more -->


<pre><code>SystemTap is a tool for the Linux Operating System
that allows developers and system administrators to deeply investigate
the behavior of the kernel and even user space applications
in order to discover error conditions, performance issues,
or just to understand how the system works, similarly to DTrace.

systemtap不会直接告诉你程序哪里出了问题。但是在你对代码熟悉的情况下，可以用一成的功力使出七八成的效果
</code></pre>

<p>以往在收集这些信息时，我们需要添加检测点，重新编译，安装，重启使之生效。
挺没意思的。。。</p>

<p>使用systemtap就不需要了，我们只要编写相关脚本，并让systemtap的命令
行接口stap（systemtap script translator/driver）进行调用就可以收集到用
户空间和内核空间的相关信息。</p>

<p>通过编写SystemTap脚本，我们就可以很容易地收集甚至篡改系统数据，这是普
通的linux系统工具所做不到的。</p>

<h3>相关背景知识</h3>

<p>在Solaris系统上，有一个大名鼎鼎的动态跟踪工具
<a href="http://en.wikipedia.org/wiki/DTrace">Dtrace</a>，这一个相当棒的工具（从
2001年10月开始开发，在2005年1月首次发布），曾
荣获《华尔街杂志》
<a href="https://blogs.oracle.com/swan/date/20070307">2006技术创新大奖中的金奖</a>
，和ZFS文件系统一样，DTrace一直都因版权问题而无法移植到Linux上，但
Oracle（SUN公司被Oracle收购）在2012年2月宣布发布DTrace for Linux beta
版，即将Solaris操作系统的动态跟踪工具移植到他们的Unbreakable
Enterprise Kernel(2.6.39)内，也就是说Linux人员终于也可以使用DTrace了。</p>

<p>在2005年1月开始，开源社区为linux操作系统开发了基于GPL许可的systemtap。</p>

<p>目前一般的Linux发行版，比如Fedora、OpenSuse、CentOS等，已经包含有systemtap的完整支持了。</p>

<h3>与其他trace工具比较</h3>

<ul>
<li>Dtrace：
dtrace不用多说了，systemtap的开发，就是用来替代dtrace的，但是他们还
是有以下几个明确的差异：

<ol>
<li>Dtrace不允许你任意地注入c代码，即在运行时修改系统数据，通过-g选项</li>
<li>Dtrace脚本是以虚拟机字节码的形式在内核中进行解释，而systemtap脚本
则是以本地二进制代码的形式被进行加载</li>
</ol>
</li>
<li>strace：
strace工作于用户态，只能用于处理系统调用</li>
<li>ltrace：
ltrace工作于用户态，只能用于处理用户态的函数</li>
<li>gdb：
gdb也工作于用户态，它的目标是进行交互式的调试</li>
</ul>


<p>更多信息请参见：<a href="http://sourceware.org/systemtap/wiki/SystemtapDtraceComparison">SystemtapDtraceComparison</a></p>

<p>而systemtap作为一个通用工具，通过追踪（tracing），可以了解：</p>

<pre><code>在一段时间内，某进程执行了哪些系统调用以及次数
一个函数执行了多长时间
进程函数调用栈并使用相关工具生成火焰图 (Flame Graph)
甚至可以使用systemtap脚本进行任意发挥
</code></pre>

<p>reference:
<a href="http://sourceware.org/systemtap/langref/SystemTap_overview.html#SECTION00021000000000000000">http://sourceware.org/systemtap/langref/SystemTap_overview.html#SECTION00021000000000000000</a>
<a href="http://raisama.net/talks/fisl10/kernel-hacking/stap.pdf">http://raisama.net/talks/fisl10/kernel-hacking/stap.pdf</a>
<a href="http://cheeselee.fedorapeople.org/systemtap-robin-20130817.pdf">http://cheeselee.fedorapeople.org/systemtap-robin-20130817.pdf</a>
<a href="http://agentzh.org/misc/slides/yapc-na-2013-flame-graphs.pdf">http://agentzh.org/misc/slides/yapc-na-2013-flame-graphs.pdf</a>
<a href="http://www.linuxfoundation.jp/jp_uploads/seminar20090225/obata.pdf">http://www.linuxfoundation.jp/jp_uploads/seminar20090225/obata.pdf</a>
<a href="http://dtrace.org/blogs/brendan/2011/10/15/using-systemtap/">http://dtrace.org/blogs/brendan/2011/10/15/using-systemtap/</a>
<a href="http://lenky.info/2013/02/04/systemtap%E5%88%9D%E8%AF%95%E7%94%A8/">http://lenky.info/2013/02/04/systemtap%E5%88%9D%E8%AF%95%E7%94%A8/</a></p>
]]></content>
  </entry>
  
</feed>
