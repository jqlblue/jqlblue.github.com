<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devops | Debug Hacks]]></title>
  <link href="http://jqlblue.github.io/categories/devops/atom.xml" rel="self"/>
  <link href="http://jqlblue.github.io/"/>
  <updated>2017-01-01T22:59:06+08:00</updated>
  <id>http://jqlblue.github.io/</id>
  <author>
    <name><![CDATA[jqlblue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mac终端穿墙技术汇总]]></title>
    <link href="http://jqlblue.github.io/2016/11/17/mac-terminal-cross-gfw/"/>
    <updated>2016-11-17T18:32:39+08:00</updated>
    <id>http://jqlblue.github.io/2016/11/17/mac-terminal-cross-gfw</id>
    <content type="html"><![CDATA[<p>作为一个互联网从业人员，要想在天朝愉快地工作，生活，目前必须正视墙（gfw）的存在。
本文涉及的翻墙方法，主要针对mac系统。但大部分内容，同样适用于window和linux。也可以自行寻找相关替代品。</p>

<!--more -->


<h1>土豪的方法</h1>

<p>如果你是一个使用mac系统的土豪，那么，访问这个网站 <a href="http://nssurge.com/">http://nssurge.com/</a> 就够了。</p>

<h1>others</h1>

<p>实际上，这才是本文的重点。</p>

<h2>准备工作</h2>

<p>我们需要先搭建一个ss（Shadowsocks）服务器，或者买个账号（<a href="https://shadowsocks.com/%EF%BC%89%E3%80%82">https://shadowsocks.com/%EF%BC%89%E3%80%82</a></p>

<h3>搭建ss server</h3>

<ul>
<li>买个海外的云主机，各大云的香港或者海外节点，应该都能满足需求。</li>
<li>安装 ss server
在云主机的命令行下，执行如下命令
<code>
  pip install shadowsocks
</code>
或者
<code>
  git clone https://github.com/shadowsocks/shadowsocks.git
  cd shadowsocks
  python setup.py
</code></li>
<li><p>配置
创建配置文件，如<code>/etc/shadowsocks.json</code>，示例内容如下
<code>
{
  "server":"my_server_ip",
  "server_port":8388,
  "local_port":1080,
  "password":"barfoo!",
  "timeout":600,
  "method":"table",
  "auth": true
}
</code></p>

<blockquote><p>配置文件是json格式，注意最后一行没有<code>,</code></p></blockquote></li>
<li><p>启动ss server
<code>ssserver -c /etc/shadowsocks.json -d start</code></p></li>
<li>停止ss server
<code>
ssserver -c /etc/shadowsocks.json -d stop
</code></li>
</ul>


<h3>安装ss 客户端</h3>

<p>推荐 <a href="https://github.com/shadowsocks/ShadowsocksX-NG">ShadowsocksX-NG</a>，因为 <a href="https://github.com/shadowsocks/shadowsocks-iOS/releases">ShadowsocksX</a>已无法正常更新pac文件。</p>

<p>至此，使用浏览器的话，就可以自由地在互联网上遨游了。当然，你会发现更好用的翻墙技术。</p>

<h2>终端(terminal)翻墙</h2>

<h3>亲测可用的方案</h3>

<p>下载软件 <a href="https://www.proxifier.com/download.htm">proxifier</a>，仅支持windows和mac，收费软件。</p>

<p>如果是学生的话，可以给我留言，我共享个注册码给你。其他人建立购买，在这物价横飞的时代，几百块，分分钟就花没了。</p>

<p>shadowsocks代理属于socks5代理，通俗的理解，socks5只是局部代理。使用Proxifier把shadowsocks代理转全局代理，类vpn。所以，该方案实际上不局限于终端翻墙。</p>

<h3>其他方案</h3>

<p><a href="https://eliyar.biz/proxy-for-mac-terminal/">proxychains-ng</a>
<a href="https://mba811.gitbooks.io/web-study/content/fq/fq3.html">tsocks</a></p>

<h1>reference</h1>

<p>[^1] <a href="https://shadowsocks.org/">https://shadowsocks.org/</a></p>

<p>[^2] <a href="https://github.com/shadowsocks">https://github.com/shadowsocks</a></p>

<p>[^3] <a href="https://shadowsocks.com/">https://shadowsocks.com/</a></p>

<p>[^4] <a href="https://www.dou-bi.co/ss-jc7/">https://www.dou-bi.co/ss-jc7/</a></p>

<p>[^5] <a href="http://www.voidcn.com/blog/shenshouer/article/p-6254512.html">http://www.voidcn.com/blog/shenshouer/article/p-6254512.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用charles在移动设备上捕获https数据包]]></title>
    <link href="http://jqlblue.github.io/2016/07/01/charles-https/"/>
    <updated>2016-07-01T00:38:16+08:00</updated>
    <id>http://jqlblue.github.io/2016/07/01/charles-https</id>
    <content type="html"><![CDATA[<p>对于互联网从业人员而言，掌握抓包，是必备技能。</p>

<!--more-->


<p><code>Charles</code>是一个http代理，工作模式如下图：</p>

<p><img src="/images/mobile/http_proxy.png" title="&lsquo;抓包&rsquo;" ></p>

<p>但是默认只能抓http协议的数据包，要捕获https的数据包，需要进行相关配置。</p>

<p>下文以<code>IOS</code>移动设备为例，讲述配置步骤（<code>android</code>设备类似）：</p>

<ul>
<li>在移动设备安装ssl证书</li>
</ul>


<p>Charles ssl证书的下载地址如下：</p>

<p><a href="http://www.charlesproxy.com/getssl">http://www.charlesproxy.com/getssl</a></p>

<p>在移动设备的浏览器中打开上述<code>Url</code>，即可进行安装。</p>

<ul>
<li>安装http代理<code>Charles</code></li>
</ul>


<p>软件下载地址如下：
<a href="http://www.charlesproxy.com/latest-release/download.do">http://www.charlesproxy.com/latest-release/download.do</a></p>

<ul>
<li>启用http代理</li>
</ul>


<p>打开<code>Charles</code>软件，默认会启动一个监听本地8888端口的http代理， 也可以在<code>Charles</code>的设置中修改相关端口。</p>

<ul>
<li>配置<code>Charles</code>支持https</li>
</ul>


<p>在<code>Charles</code>中打开：</p>

<pre><code>Proxy -&gt; SSL Proxying Settings
</code></pre>

<p>勾选</p>

<pre><code>Enable SSL Proxying
</code></pre>

<p>然后在下方的<code>Locations</code>中点击</p>

<pre><code>Add
</code></pre>

<p>添加需要抓https接口的域名。</p>

<p>例：</p>

<p><code>
Host:www.baidu.com
Port:443
</code></p>

<ul>
<li>在移动设备上修改代理</li>
</ul>


<p><img src="/images/mobile/ios_http_proxy.png" title="&lsquo;ios设置代理&rsquo;" ></p>

<p>其中，<code>服务器</code>是安装了<code>Charles</code>软件的电脑的<code>IP</code>，端口是<code>Charles</code> http代理开启的端口。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用graphite和cabot搭建监控服务]]></title>
    <link href="http://jqlblue.github.io/2014/10/01/use-graphite-and-alter-build-monitor-system/"/>
    <updated>2014-10-01T09:43:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/10/01/use-graphite-and-alter-build-monitor-system</id>
    <content type="html"><![CDATA[<p>说起监控，我们一般会首先想到<code>zabbix</code>，<code>nagios</code>，<code>ganglia</code>等等。但是对于非<code>ops</code>开发人员而言，这些东西，多多少少让人感到陌生。所以本文将从一个<code>服务端开发人员</code>的视角，介绍如何通过<code>graphite</code>，<code>cabot</code>，加一个<code>shell</code>定时脚本，搭建监控报警服务。</p>

<!-- more -->


<h1>python环境安装</h1>

<p>虽然linux系统上一般都有python环境，但是默认的python版本较低。而且<code>yum</code>等系统工具，都依赖于默认的python。所以推荐的做法是再安装一个python，并使用<code>virtualenv</code>等工具，分项目进行环境管理，并与系统默认的python环境进行隔离。</p>

<p>以python2.7.3为例，介绍python环境的安装。</p>

<h2>安装步骤</h2>

<p>```
sudo yum install bzip2-devel.x86_64
sudo yum install sqlite-devel.x86_64
sudo yum install readline-devel.x86_64
sudo yum install openssl-devel.x86_64</p>

<p>wget <a href="http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2">http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2</a>
tar jxvf Python-2.7.3.tar.bz2
cd Python-2.7.3
./configure &mdash;prefix=/usr/local/python2.7.3
make &amp;&amp; sudo make install</p>

<p>cd ..
wget <a href="https://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz">https://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz</a> &mdash;no-check-certificate
tar zxvf distribute-0.6.49.tar.gz
cd distribute-0.6.49
sudo /usr/local/python2.7.3/bin/python setup.py install
sudo /usr/local/python2.7.3/bin/easy_install pbr</p>

<p>cd ..
wget <a href="https://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.10.1.tar.gz">https://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.10.1.tar.gz</a> &mdash;no-check-certificate
tar zxvf virtualenv-1.10.1.tar.gz
cd virtualenv-1.10.1
sudo /usr/local/python2.7.3/bin/python setup.py install
sudo /usr/local/python2.7.3/bin/easy_install virtualenvwrapper
```</p>

<blockquote><p>如果遇到 [FATAL] Failed to create text with cairo, this probably means cairo cant find any fonts. Install some system fonts and try again。可以尝试安装bitmap font。</p></blockquote>

<p><code>
sudo yum install bitmap.x86_64
sudo yum install bitmap-fonts-compat.noarch
</code></p>

<h2>相关配置</h2>

<ul>
<li>创建管理python环境的用户</li>
</ul>


<p>为了便于环境的统一管理，创建一个普通用户进行新创建python环境的管理和相关python扩展的安装。同时，向数字公司的<code>addops</code>们致敬。
<code>
useradd appops
</code></p>

<ul>
<li>创建python环境安装目录</li>
</ul>


<p><code>
sudo mkdir -p /data/server/python-envs
sudo chown -R appops.appops /data/server
</code></p>

<ul>
<li>配置新安装的python2.7.3环境</li>
</ul>


<p><code>
sudo su appops -c 'vim ~/.bashrc'
</code>
添加如下内容
<code>
export WORKON_HOME=/data/server/python-envs
export VIRTUALENVWRAPPER_PYTHON=/usr/local/python2.7.3/bin/python
export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/python2.7.3/bin/virtualenv
source /usr/local/python2.7.3/bin/virtualenvwrapper.sh
</code></p>

<h1>搭建graphite监控服务</h1>

<h2>安装步骤</h2>

<ul>
<li><p>创建安装目录
<code>
sudo mkdir /opt/graphite
sudo chown -R appops.appops /opt/graphite
</code></p></li>
<li><p>创建python虚拟环境
<code>
sudo su appops
source ~/.bashrc
mkvirtualenv graphite
</code></p></li>
<li><p>graphite安装
<code>
pip install whisper
pip install carbon
pip install graphite-web
pip install django==1.5
pip install django-tagging
pip install uwsgi
pip install MySQL-python
pip install daemonize
</code></p></li>
</ul>


<p>graphite使用<code>cairo</code>进行绘图，由于系统自带的cairo版本较低（需要cairo1.10以上），使用pip安装cairo会出错，所以采用编译安装。
<code>
wget http://cairographics.org/releases/pycairo-1.8.8.tar.gz
tar zxvf pycairo-1.8.8.tar.gz
python -c "import sys; print sys.prefix"
cd pycairo-1.8.8
./configure --prefix=/data/server/python-envs/graphite
make
make install
</code></p>

<ul>
<li>目录说明
<code>
  bin -- 数据收集相关工具
  conf -- 数据存储相关配置文件
      carbon.conf -- 数据收集carbon进程涉及的配置
      dashboard.conf -- Dashboard UI相关配置
      graphite.wsgi -- wsgi相关配置
      storage-schemas.conf -- Schema definitions for Whisper files
      whitelist.conf -- 定义允许存储的metrics白名单
      graphTemplates.conf -- 图形化展示数据时使用的模板
  examples -- 示例脚本
  lib -- carbon和twisted库
  storage -- 数据文件存储目录
  webapp -- 数据前端展示涉及程序
</code>

<h2>配置Graphite-web</h2></li>
<li>初始化配置文件
<code>
cd /opt/graphite/webapp/graphite
cp local_settings.py.example local_settings.py
cp /opt/graphite/conf/graphite.wsgi.example /opt/graphite/conf/graphite.wsgi
cp /opt/graphite/conf/graphTemplates.conf.example /opt/graphite/conf/graphTemplates.conf
cp /opt/graphite/conf/dashboard.conf.example /opt/graphite/conf/dashboard.conf
</code></li>
</ul>


<p>修改或者增加如下配置：
<code>
TIME_ZONE
DEBUG
SECRET_KEY
DATABASES
</code>
示例配置文件<a href="https://gist.github.com/jqlblue/88f8a9b14bbe4bae3666">local_settings.py</a></p>

<ul>
<li><p>初始化数据库
<code>
python manage.py syncdb
</code></p></li>
<li><p>启动graphite-web
<code>
uwsgi --http localhost:8085 --master --processes 1 --home /data/server/python-envs/graphite --pythonpath /opt/graphite/webapp/graphite --wsgi-file=/opt/graphite/conf/graphite.wsgi --enable-threads --thunder-lock
</code>
<img src="/images/graphite/web.jpg" title="graphite web" ></p></li>
</ul>


<h2>配置数据收集服务</h2>

<p><code>
cp /opt/graphite/conf/carbon.conf.example /opt/graphite/conf/carbon.conf
cp /opt/graphite/conf/storage-schemas.conf.example /opt/graphite/conf/storage-schemas.conf
cp /opt/graphite/conf/whitelist.conf.example /opt/graphite/conf/whitelist.conf
</code>
编辑<code>/opt/graphite/lib/carbon/util.py</code>，将</p>

<pre><code>from twisted.scripts._twistd_unix import daemonize
</code></pre>

<p>替换成</p>

<pre><code>import daemonize
</code></pre>

<p>否则启动cabon时会遇到<code>ImportError: cannot import name daemonize</code>。</p>

<ul>
<li><p>配置存储白名单
<code>
vim /opt/graphite/conf/whitelist.conf
</code>
添加</p>

<p>  ^test..<em>
  ^server..</em></p></li>
</ul>


<p>即只存储以<code>test.</code>和<code>server.</code>开头的metrics。</p>

<ul>
<li>配置存储Schemas
<code>
vim /opt/graphite/conf/storage-schemas.conf
</code>
添加</li>
</ul>


<p>```
[server]
pattern = ^server..*
retentions = 60s:1d,5m:7d,15m:3y</p>

<p>[default]
pattern = ^test..*
retentions = 60s:1d,5m:7d
```</p>

<p>上面的配置，会对于<code>test.</code>开头的metrics，以60秒为精度存储一天，以5分钟为精度存储7天。即查询一天内的数据时，可以精确到1分钟，查询7天内的数据时，只能精确到5分钟。</p>

<ul>
<li>启动cabon
<code>
python /opt/graphite/bin/carbon-cache.py --config=/opt/graphite/conf/carbon.conf --debug start
</code></li>
</ul>


<h1>收集监控数据</h1>

<p>etsy开源了一个叫<a href="https://github.com/etsy/statsd">statsd</a>的daemon，可用于将监控数据收集到graphite，但那玩意是nodejs写的。</p>

<p>为了保持方案的简单，采用<code>crontab</code>的方式，利用<a href="https://gist.github.com/jqlblue/c7473473f8a7357167b8">shell脚本</a>将要收集的数据通过udp协议直接发送至graphite。</p>

<p>```</p>

<h1>!/bin/sh</h1>

<p>HOST=$(hostname | awk -F'.&lsquo; &rsquo;{print $1}&lsquo;)
IDC=&ldquo;local&rdquo;</p>

<p>SYSTEM_LOAD=$(awk &lsquo;{print $1}&rsquo; /proc/loadavg)
SYSTEM_MEMORY_FREE=$(free -m | grep &lsquo;buffers/cache&rsquo; | awk &lsquo;{print $NF}&rsquo;)
SYSTEM_SWAP_USE=$(free -m | grep &lsquo;Swap&rsquo; | awk &lsquo;{print $(NF-1)}&rsquo;)
SYSTEM_DISK_USED=$(df -h | grep &lsquo;/&rsquo; | awk &lsquo;BEGIN{<em>max=0}{len=length($5);i=substr($5,0,len-1);if(</em>max&lt;i){<em>max=i}}END{print </em>max}&rsquo;)</p>

<p>TIMESTAMP=$(date +%s)</p>

<h3>send to garphite through udp port 2003</h3>

<p>echo -n &ldquo;server.$IDC.$HOST.system.load $SYSTEM_LOAD $TIMESTAMP&rdquo; > /dev/udp/127.0.0.1/2003
echo -n &ldquo;server.$IDC.$HOST.system.memory_free $SYSTEM_MEMORY_FREE $TIMESTAMP&rdquo; > /dev/udp/127.0.0.1/2003
echo -n &ldquo;server.$IDC.$HOST.system.swap_used $SYSTEM_SWAP_USED $TIMESTAMP&rdquo; > /dev/udp/127.0.0.1/2003
echo -n &ldquo;server.$IDC.$HOST.system.disk_used $SYSTEM_DISK_USED $TIMESTAMP&rdquo; > /dev/udp/127.0.0.1/2003
```</p>

<p><img src="/images/graphite/data-view.jpg" title="graphite monitor data view" ></p>

<p><em>监控数据收集和展示流图</em></p>

<p><img src="/images/graphite/data-flow.jpg" title="graphite monitor data flow" ></p>

<h1>搭建cabot报警服务</h1>

<p><code>cabot</code>是一个轻量级的监控报警服务。其报警可以基于：</p>

<pre><code>graphite收集的监控数据
url的响应内容和状态码
jenkins编译任务的状态
</code></pre>

<ul>
<li>安装依赖</li>
</ul>


<p><code>
sudo gem sources --remove http://rubygems.org/
sudo gem sources -a http://ruby.taobao.org/
sudo gem install foreman
</code></p>

<blockquote><p>因为foreman要求ruby版本需要在1.9.3以上，如果系统自带ruby版本过低，可以通过rvm安装ruby，再安装foreman。</p></blockquote>

<p><code>
sudo yum install npm
sudo npm install -g coffee-script less@1.3 --registry http://registry.npmjs.org/
</code></p>

<ul>
<li>初始化目录</li>
</ul>


<p><code>
sudo su appops
mkdir /data/server/alter
cd /data/server/alter
mkvirtualenv cabot
</code></p>

<ul>
<li>安装cabot</li>
</ul>


<p><code>
git clone https://github.com/arachnys/cabot.git
cd cabot
cp conf/development.env.example conf/development.env
</code></p>

<p>修改<a href="https://gist.github.com/jqlblue/165d50a949cd4aae2191">setup.py</a>，添加</p>

<pre><code>'MySQL-python==1.2.5',
</code></pre>

<p><code>
python setup.py install
/bin/sh ./setup_dev.sh
</code></p>

<ul>
<li>配置cabot</li>
</ul>


<p>使用foreman启动cabot时，会先读取<code>.foreman</code></p>

<pre><code># vi: set ft=yaml :

procfile: Procfile.dev
env: conf/development.env
</code></pre>

<p><code>Procfile.dev</code>内容如下：</p>

<pre><code>web:       python manage.py runserver 0.0.0.0:$PORT
celery:    celery -A cabot worker --loglevel=DEBUG -B -c 8 -Ofair
</code></pre>

<p>其中定义了启动cabot-web和celery任务队列时使用的命令，针对不同的环境，可以酌情修改<code>.foreman</code>和对应的<code>procfile</code>及<code>env</code>。</p>

<p>对于邮件报警，需要修改<a href="https://gist.github.com/jqlblue/a6329a7649be16e92df4">conf/development.env</a>中的如下内容：
<code>
DATABASE_URL -- 数据库配置
TIME_ZONE -- 时区
ADMIN_EMAIL
CABOT_FROM_EMAIL
CELERY_BROKER_URL -- celery任务队列配置
SES_HOST -- smtp host
SES_USER -- 发送邮件的用户
SES_PASS -- 发送邮件用户的密码
SES_PORT -- smtp port
</code></p>

<ul>
<li>启动cabot
<code>
nohup foreman start 2&gt;&amp;1 &gt; /dev/null &amp;
</code></li>
</ul>


<p><img src="/images/graphite/cabot_service.jpg" title="cabot service" ></p>

<p><img src="/images/graphite/cabot_service_check.jpg" title="cabot service check" ></p>

<p><img src="/images/graphite/cabot_service_check_detail.jpg" title="cabot service check detail" ></p>

<p>reference：</p>

<p>[^1] <a href="http://graphite.readthedocs.org/en/latest/overview.html">http://graphite.readthedocs.org/en/latest/overview.html</a></p>

<p>[^2] <a href="http://cabotapp.com/qs/quickstart.html">http://cabotapp.com/qs/quickstart.html</a></p>

<p>[^3] <a href="https://gist.github.com/jirutka/8636572">https://gist.github.com/jirutka/8636572</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在linux服务器之间同步用户账号]]></title>
    <link href="http://jqlblue.github.io/2014/08/02/synchronization-user-account-on-linux/"/>
    <updated>2014-08-02T17:26:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/08/02/synchronization-user-account-on-linux</id>
    <content type="html"><![CDATA[<p>最近负责运帷的同事离职了，原先由运帷可以一手搞定的事情，分摊到了几个研发同事的身上。但是多人公用一个账号，实在感觉不爽。</p>

<!-- more -->


<p>由于公司没有几台服务器上，所以可以逐一登录服务器创建新账号。但是对于一个码农而言，这不科学，它违背了<code>DRY</code>原则。</p>

<p>当然，也可以配置一个ldap服务器，修改linux用户登录使用ldap验证。但这让我有一种从火窟跳到冰窖的感觉。先不说是否能搞定配置的事情，引入的这个ldap，又会变成另外一个坑。</p>

<p>昨天听一个同事时，我们来上班，要对得起自己的良心。所以我不能让上班时间在纠结中度过，用土方法解决问题先。</p>

<h2>同步步骤</h2>

<p>因为目前有一台服务器是登录的跳板机，所以只需要在跳板机上创建好新账号，然后把用户账号同步到其他机器上就好。</p>

<blockquote><p>如果没有跳板机，也可以随便选一台服务器（A），在A服务器上创建账号，并同步到其他机器上。</p></blockquote>

<ul>
<li><p>在跳板机上创建用户账号</p></li>
<li><p>在要同步的服务器上创建账号，并将该用户在跳板机上如下文件中对于的条目追加到要同步到机器上</p></li>
</ul>


<p><code>/etc/passwd</code>， <code>/etc/group</code>, <code>/etc/shadow</code></p>

<p>以跳板机ip：<code>192.168.1.1</code>，要同步的服务器：<code>192.168.1.8</code>，新增用户名：<code>jqlblue</code>为例，登录跳板机执行：</p>

<pre><code>$ useradd jqlblue
$ ssh -l root -p 22 192.168.1.8 "useradd jqlblue"
$ grep jqlblue: /etc/group | xargs -I {} ssh -l root -p 22 192.168.1.8 "echo {} &gt;&gt; /etc/group"
$ grep jqlblue: /etc/passwd | xargs -I {} ssh -l root -p 22 192.168.1.8 "echo {} &gt;&gt; /etc/passwd"
$ grep jqlblue: /etc/shadow | xargs -I {} ssh -l root -p 22 192.168.1.8 "echo {} &gt;&gt; /etc/shadow"
</code></pre>

<p>上述操作，编写成脚本即可。当需要新增或者修改用户时，只需在跳板机上进行操作，同步问题，由脚本来完成。</p>

<p><em>上述脚本要在生产环境使用，需要注意如下问题：</em></p>

<pre><code>1 新增用户时，uid或者gid重复的问题
2 修改用户密码或者组信息后，产生多条记录的问题
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再话tcpcopy的胞弟gryphon]]></title>
    <link href="http://jqlblue.github.io/2014/05/28/tcpcopy-gryphon-introduction/"/>
    <updated>2014-05-28T15:57:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/05/28/tcpcopy-gryphon-introduction</id>
    <content type="html"><![CDATA[<p>gryphon是由网易研发，能够模拟千万级别并发用户进行压力测试的一个软件，可用于网络消息推送服务方面的压力测试和传统web服务的压力测试。目前由网易的 <a href="http://weibo.com/tcpcopy">王斌</a>进行维护。更多介绍可参见<a href="https://github.com/wangbin579/gryphon">A powerful tool to simulate millions of concurrent users for loading testing</a></p>

<!-- more -->


<p>gryphon的安装和使用方法分为<code>传统架构方式</code>和<code>高级架构方式</code>。</p>

<h1>相关角色说明</h1>

<ul>
<li>gryphon客户端（/usr/local/bin/gryphon）</li>
<li>intercept拦截进程（/usr/local/bin/intercept）</li>
</ul>


<p>测试时，gryphon客户端读取录制的pcap文件（可以通过tcpdump产生），通过<code>Raw Socket</code>修改请求并发送到测试机。因为这些请求的来源ip可能是模拟的，为了连接的正常关闭，需要拦截测试机的响应包。</p>

<pre><code>在传统架构下：
1 netfilter-iptables在协议栈将数据包交给内核中的ip_queue模块
2 intercept在用户态通过netlink socket接收内核传来的数据报文
3 将处理后的报文以及对报文的处理意见（ACCEPT，DROP等）传递给内核协议栈
</code></pre>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>communication/tc_socket.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">tc_raw_socket_out_init</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="n">n</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * On Linux when setting the protocol as IPPROTO_RAW,</span>
</span><span class='line'><span class="cm"> * then by default the kernel sets the IP_HDRINCL option and</span>
</span><span class='line'><span class="cm"> * thus does not prepend its own IP header.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">fd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_RAW</span><span class="p">,</span> <span class="n">IPPROTO_RAW</span><span class="p">);</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>communication/tc_interception.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">tc_nl_event_process</span><span class="p">(</span><span class="n">tc_event_t</span> <span class="o">*</span><span class="n">rev</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="kt">char</span>            <span class="n">buffer</span><span class="p">[</span><span class="mi">65536</span><span class="p">];</span>
</span><span class='line'><span class="k">register</span> <span class="kt">int</span>    <span class="n">i</span><span class="p">,</span> <span class="n">pass_through_flag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">unsigned</span> <span class="kt">long</span>   <span class="n">packet_id</span><span class="p">;</span>
</span><span class='line'><span class="n">tc_ip_header_t</span> <span class="o">*</span><span class="n">ip_hdr</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">tc_nl_socket_recv</span><span class="p">(</span><span class="n">rev</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fd</span><span class="p">,</span> <span class="n">buffer</span><span class="p">,</span> <span class="mi">65536</span><span class="p">)</span> <span class="o">==</span> <span class="n">TC_ERROR</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">TC_ERROR</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ip_hdr</span> <span class="o">=</span> <span class="n">tc_nl_ip_header</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'><span class="n">packet_id</span> <span class="o">=</span> <span class="n">tc_nl_packet_id</span><span class="p">(</span><span class="n">buffer</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">ip_hdr</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* check if it is the valid user to pass through firewall */</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">srv_settings</span><span class="p">.</span><span class="n">passed_ips</span><span class="p">.</span><span class="n">num</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">srv_settings</span><span class="p">.</span><span class="n">passed_ips</span><span class="p">.</span><span class="n">ips</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="n">ip_hdr</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">daddr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">pass_through_flag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>            <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tot_resp_packs</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">pass_through_flag</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* pass through the firewall */</span>
</span><span class='line'>        <span class="n">dispose_netlink_packet</span><span class="p">(</span><span class="n">rev</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fd</span><span class="p">,</span> <span class="n">NF_ACCEPT</span><span class="p">,</span> <span class="n">packet_id</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">tot_copy_resp_packs</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>        <span class="n">router_update</span><span class="p">(</span><span class="n">srv_settings</span><span class="p">.</span><span class="n">old</span><span class="p">,</span> <span class="n">ip_hdr</span><span class="p">);</span>
</span><span class='line'>        <span class="cm">/* drop the packet */</span>
</span><span class='line'>        <span class="n">dispose_netlink_packet</span><span class="p">(</span><span class="n">rev</span><span class="o">-&amp;</span><span class="n">gt</span><span class="p">;</span><span class="n">fd</span><span class="p">,</span> <span class="n">NF_DROP</span><span class="p">,</span> <span class="n">packet_id</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="n">TC_OK</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<pre><code>在高级架构下，是通过在测试机上配置静态路由规则，将响应路由到辅助服务器进行处理。
</code></pre>

<p><img src="/images/gryphon/raw_socket.jpg" title="raw socket" ></p>

<h1>传统架构下安装并使用</h1>

<p>在传统架构下，<code>intercept拦截进程</code>需要运行在测试机上，用于拦截测试机的响应包。</p>

<h2>安装与使用</h2>

<h3>在测试机安装intercept拦截进程</h3>

<pre><code>git clone git://github.com/wangbin579/tcpcopy.git
cd tcpcopy
sh autogen.sh
./configure --prefix=/usr/local/tcocopy --enable-single
make
sudo make install
</code></pre>

<h3>安装gryphon客户端</h3>

<pre><code>git clone git://github.com/wangbin579/gryphon.git
cd gryphon
sh autogen.sh
./configure --prefix=/usr/local/gryphon --enable-single
make
sudo make install
</code></pre>

<h3>使用方法</h3>

<p>以<code>intercept拦截进程</code>安装在测试机<strong>10.16.15.118</strong>，应用端口是<strong>80</strong>，<code>gryphon客户端</code>安装在<strong>10.16.15.117</strong>为例，说明gryphon在传统架构下的基本使用方法。</p>

<ul>
<li>tcpdump抓包录制pcap文件</li>
</ul>


<p>可以在线上服务器抓包录制，并拷贝到<code>gryphon客户端</code>所在的服务器<strong>10.16.15.117</strong></p>

<pre><code>tcpdump -i eth0 port 80 -s 0 -w xxx.pcap
</code></pre>

<ul>
<li>拦截响应包</li>
</ul>


<p>在测试机<strong>10.16.15.118</strong>上操作</p>

<pre><code>modprobe ip_queue
iptables -I OUTPUT -p tcp --sport 80 -j QUEUE
/usr/local/tcpcopy/bin/intercept
</code></pre>

<blockquote><p>如果内核版本3.5，可以使用nfqueue</p></blockquote>

<ul>
<li>发送测试请求</li>
</ul>


<p>在<code>gryphon客户端</code>所在服务器<strong>10.16.15.117</strong>上操作</p>

<pre><code>/usr/local/gryphon/bin/gryphon -x 80-10.16.15.118:80 -f ./xxx.pcap -s 10.16.15.118 -u 1000 -a 2 -c 10.17.15.*
</code></pre>

<p>上述命令，从xxx.pcap抓包文件中提取出访问80端口的用户会话过程，模拟1000个用户，将请求复制到测试机<strong>10.16.15.118</strong>的<strong>80</strong>端口中去。其中用户ip地址的范围是10.17.15.*。</p>

<blockquote><p>-a参数用于加快数据包的发送速度。-a 2代表将数据包之间的发送间隔缩短一半，相当于加速2倍。也可和－i配合，如 －a 10 －i 2048</p></blockquote>

<p>gryphon拦截进程中各个基本参数的释义如下：</p>

<pre><code>gryphon -x historyServerPort-targetServerIP:targetServerPort -f &lt;pcapfile,&gt; -s &lt;intercept address&gt; -u &lt;user num&gt; -c &lt;ip range,&gt;
</code></pre>

<h2>调试步骤</h2>

<p><code>gryphon客户端</code>和<code>intercept拦截进程</code>运行时，会在当前工作目录生成<code>error_gryphon.log</code>，<code>error_intercept.log</code>日志文件，里面有相关运行信息。当测试过程不能正常工作时，可优先查看相关日志。</p>

<p>其次就是在测试机或者<code>gryphon客户端</code>所在的服务器上进行抓包。确保<code>gryphon客户端</code>发出请求，并且没有收到测试机的响应包，如：
<img src="/images/gryphon/gryphon_tcpdump.png" title="gryphon tcpdump" ></p>

<h1>高级架构下安装并使用</h1>

<p>在高级架构下，<code>intercept拦截进程</code>需要运行在辅助服务上，用于拦截测试机的响应包。</p>

<h2>安装与使用</h2>

<h3>在测试机安装intercept拦截进程</h3>

<pre><code>git clone git://github.com/wangbin579/tcpcopy.git
cd tcpcopy
sh autogen.sh
./configure --prefix=/usr/local/adv-tcpcopy --enable-single  --enable-pcap --enable-advanced
make
sudo make install
</code></pre>

<h3>安装gryphon客户端</h3>

<pre><code>git clone git://github.com/wangbin579/gryphon.git
cd gryphon
sh autogen.sh
./configure --prefix=/usr/local/adv-gryphon --enable-single --enable-advanced
make
sudo make install
</code></pre>

<h3>使用方法</h3>

<p>以<code>intercept拦截进程</code>安装在辅助服务器<strong>10.16.15.116</strong>，<code>gryphon客户端</code>安装在<strong>10.16.15.117</strong>，测试机<strong>10.16.15.118</strong>的应用端口是<strong>80</strong>为例，说明gryphon在高级架构下的使用方法。</p>

<ul>
<li>tcpdump抓包录制pcap文件</li>
</ul>


<p>可以在线上服务器抓包录制，并拷贝到<code>gryphon客户端</code>所在的服务器<strong>10.16.15.117</strong></p>

<pre><code>tcpdump -i eth0 port 80 -s 0 -w xxx.pcap
</code></pre>

<ul>
<li>拦截响应包</li>
</ul>


<p>在测试机<strong>10.16.15.118</strong>上设置静态路由，将响应包路由到辅助服务器<strong>10.16.15.116</strong></p>

<pre><code>route add -net 10.17.15.0 netmask 255.255.255.0 gw 10.16.15.116
</code></pre>

<p>查看是否设置成功</p>

<pre><code>$ route
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
10.17.15.0      10.16.15.116    255.255.255.0   UG    0      0        0 eth0
10.16.14.0      *               255.255.254.0   U     0      0        0 eth0
169.254.0.0     *               255.255.0.0     U     0      0        0 eth0
default         10.16.14.1      0.0.0.0         UG    0      0        0 eth0
</code></pre>

<p>如果设置错了，可以删除并重新添加</p>

<pre><code>route del -net 10.17.15.0 netmask 255.255.255.0
</code></pre>

<p>在辅助服务器<strong>10.16.15.116</strong>上启动intercept拦截进程</p>

<pre><code>/usr/local/adv-tcpcopy/bin/intercept -F 'tcp and src port 80'
</code></pre>

<ul>
<li>发送测试请求</li>
</ul>


<p>在<code>gryphon客户端</code>所在服务器<strong>10.16.15.117</strong>上操作</p>

<pre><code>/usr/local/adv-gryphon/bin/gryphon -x 80-10.16.15.118:80 -f ./xxx.pcap -s 10.16.15.116 -u 1000 -c 10.17.15.*
</code></pre>

<p><strong> Reference </strong></p>

<p>[^1] <a href="http://www.ibm.com/developerworks/cn/linux/l-ntflt/index.html">http://www.ibm.com/developerworks/cn/linux/l-ntflt/index.html</a></p>

<p>[^2] <a href="http://www.ibm.com/developerworks/cn/linux/l-netlink/index.html">http://www.ibm.com/developerworks/cn/linux/l-netlink/index.html</a></p>

<p>[^3] <a href="http://www.tenouk.com/Module42a.html">http://www.tenouk.com/Module42a.html</a></p>

<p>[^4] <a href="http://blog.csdn.net/u010807313/article/details/9236581">http://blog.csdn.net/u010807313/article/details/9236581</a></p>
]]></content>
  </entry>
  
</feed>
