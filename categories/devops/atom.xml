<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: devops | Debug Hacks]]></title>
  <link href="http://jqlblue.github.io/categories/devops/atom.xml" rel="self"/>
  <link href="http://jqlblue.github.io/"/>
  <updated>2019-02-21T13:25:03+08:00</updated>
  <id>http://jqlblue.github.io/</id>
  <author>
    <name><![CDATA[jqlblue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[深入理解双因子认证]]></title>
    <link href="http://jqlblue.github.io/2017/01/05/2fa-a-programmers-perspective/"/>
    <updated>2017-01-05T12:03:00+08:00</updated>
    <id>http://jqlblue.github.io/2017/01/05/2fa-a-programmers-perspective</id>
    <content type="html"><![CDATA[<p>去年年初，让ops在服务器上开启了基于google-authenticator的双因子认证。最近花了点时间进行深入了解，记录如下。</p>

<!-- more -->


<h1>双因子认证的相关概念</h1>

<p>双因子认证（Two-factor authentication，也叫2FA），是一种通过组合两种不同的验证方式进行用户身份验证的机制。Google在2011年3月份，宣布在线上使用双因子认证，MSN和Yahoo紧随其后。</p>

<p>双因子认证，除了需要验证用户名密码外，还要结合另外一种实物设备，如Rsa令牌，或者手机。</p>

<p>如果我们把传统的用户名密码验证称为单因子认证（1FA），那么对比双因子认证（2FA），他们的区别如下：</p>

<blockquote><p>1FA &ndash; What you know (e.g. a password, a pin)</p>

<p>2FA &ndash; What you have (e.g. a phone, a hardware token)</p>

<p>3FA &ndash; What you are (e.g. your fingerprints, you retina)</p></blockquote>

<p>双因子认证的产品大致可以分成两类：</p>

<ul>
<li>可以产生token的硬件设备</li>
<li>智能手机的app</li>
</ul>


<p>手机短信验证码，登录微信公众号时的扫码确认都可以称为双因子认证。</p>

<p>双因子认证，还会结合一个只有你有的硬件设备。只要这个专属的硬件设备不丢失（察觉这个设备丢失，比用户名密码泄露，会容易很多），就可以大大地提升账号的安全性。</p>

<h1>双因子认证的实现</h1>

<p>双因子认证的流程如下：
{% img /images/2fa/flow.png Two-factor authentication flow %}</p>

<p>认证过程中涉及的token，一般会使用一次性密码(<a href="https://en.wikipedia.org/wiki/One-time_password">One-time password</a>)，相关实现有：</p>

<ul>
<li>HOTP: 基于次数的一次性密码（<a href="https://tools.ietf.org/html/rfc4226">HMAC-Based One-Time Password</a>）</li>
<li>TOTP: 基于时间的一次性密码（<a href="https://tools.ietf.org/html/rfc6238">Time-Based One-Time Password</a>）</li>
</ul>


<p><code>HOTP</code>和<code>TOTP</code>的实现都基于<a href="https://tools.ietf.org/html/rfc2104">HMAC-SHA-1</a>算法。</p>

<p><code>HOTP</code>的生成算法如下</p>

<pre><code>HOTP(K,C) = Truncate(HMAC-SHA-1(K,C))
</code></pre>

<p>其中：</p>

<ul>
<li><code>C</code>是一个8-byte的自增变量。对于客户端，每生成一次性密码，其值加1。对于服务端，每次成功认证客户端产生的一次性密码，其值加1。在<code>HOTP</code>生成（客户端）和验证（服务端）过程中，C的值必须同步。</li>
<li><code>K</code>是客户端和服务端使用的共享密钥，每个客户端的<code>K</code>应该都是唯一的。</li>
</ul>


<p>生成步骤如下：</p>

<pre><code>Step 1: 使用HMAC-SHA-1算法，利用C和K，生成一个长度为20-byte的40个十六进制字符，即：HS = HMAC-SHA-1(K,C)
Step 2: 根据前面产品的字符串`HS`，生成一个长度为4-byte的8个十六进制字符，即：Sbits = DT(HS)，DT是根据HS，动态产生Sbits的方法，后面的示例中会提到
Step 3: 根据前面的Sbits，计算一个HOTP的值，一般为6位数字。
</code></pre>

<blockquote><p>2 nibbles (2 hex characters) = 1-byte</p></blockquote>

<p><code>TOTP</code>可以当做是<code>HOTP</code>算法的一个变种，可以将<code>TOTP</code>的生成算法定义为：</p>

<pre><code>TOTP = HOTP(K, T)
</code></pre>

<p><code>K</code>同<code>HOTP</code>算法中<code>K</code>的定义，是客户端和服务端使用的共享密钥，<code>T</code>是一个整数，定义如下：</p>

<pre><code>T = floor((Current Unix time - T0) / X)
</code></pre>

<p>其中：</p>

<ul>
<li><code>T0</code>是起始的Unix Time，默认为0</li>
<li><code>X</code>是<code>T</code>增长的步长，默认为30</li>
</ul>


<p>即<code>T</code>是以30为步长，当前的Unix Time距初始的Unix Time<code>T0</code>增长的数量。</p>

<p>如果<code>T0</code>=0，<code>X</code>=30，那么当此刻的Unix time是59时，<code>T</code>=1，当此刻的Unix time为60时，<code>T</code>=2。<code>TOTP</code>算法生成的一次性密码，就会每30s变更一次。</p>

<h1>一次性密码的生成过程</h1>

<p>本文以HMAC-SHA-1算法生成的字符串<code>HS</code>的值是<code>0215a7d8c15b492e21116482b6d34fc4e1a9f6ba</code>为例，介绍一次性密码的生成过程。</p>

<p>如果使用<code>TOTP</code>算法进行双因子认证，要让用户在30s内输入40个十六进制的字符，这是一件很难想象的事情。所以我们需要想个办法，将<code>HS</code>转换地更加便于输入，而又不失安全性。这就是前面提到的DT（Dynamic Truncation）的处理过程。</p>

<p>为了更清晰地展示生成过程，用下图表示<code>HS</code>：</p>

<p>{% img /images/2fa/hotp_step1.png Two-factor authentication step1 %}</p>

<p>前面的图中包含40个字符，每个字符都占4-bits（有16个可能的值0-15），被分成了20组单独的字符串。</p>

<p>我们先去找<code>HS</code>的低4位（最后一个字符），作为截取字符串的起始位置。在我们的例子里，最后一个字符是<code>a</code>：</p>

<p>{% img /images/2fa/hotp_step2.png Two-factor authentication step2 %}</p>

<p>将十六进制的字符<code>a</code>转成十进制数是<code>10</code>。</p>

<p>我们将第1组字符串的偏移量用<code>0</code>表示，以此类推，如下：</p>

<p>{% img /images/2fa/hotp_step3.png Two-factor authentication step3 %}</p>

<p>然后，从字符串<code>HS</code>的第<code>10</code>个偏移量开始，截取<code>4</code>组字符串（或者是接下来的31-bits）。</p>

<blockquote><p>这样截取的最大偏移量是15+4=19，刚好没有越界</p></blockquote>

<p>因此，我们通过DT（Dynamic Truncation）处理，将<code>HS</code>转换后得到的字符串是<code>6482b6d3</code>：</p>

<p>{% img /images/2fa/hotp_step4.png Two-factor authentication step4 %}</p>

<p>将十六进制的<code>6482b6d3</code>转成十进制数是<code>1686288083</code>。</p>

<p>因为我们需要一个6位的数字，所以和<code>1000000</code>进行取模运算：</p>

<pre><code>1686288083 modulo 1000000
</code></pre>

<p>最后的结果是：</p>

<pre><code>288083
</code></pre>

<h1>使用google-authenticator，开启服务器双因子认证</h1>

<p>首先，去你喜欢的android应用市场，或者apple的appStore去安装：“Google Authenticator（google身份验证器）”。</p>

<p>然后登录要开启双因子认证登录的服务器，进行下面的操作。</p>

<p>安装依赖</p>

<pre><code>yum -y install gcc gcc-c++ make wget pam-devel
</code></pre>

<p>安装Google Authenticator</p>

<pre><code>wget http://google-authenticator.googlecode.com/files/libpam-google-authenticator-1.0-source.tar.bz2
tar jxvf libpam-google-authenticator-1.0-source.tar.bz2
cd libpam-google-authenticator-1.0
make
sudo make install
</code></pre>

<p>配置SSH登录时调用google-authenticator模块</p>

<p>编辑文件<code>/etc/pam.d/sshd</code>，添加：</p>

<pre><code>auth       required     pam_google_authenticator.so
</code></pre>

<p>编辑文件<code>/etc/ssh/sshd_config</code>，在文件中查找<code>ChallengeResponseAuthentication</code>和<code>UsePAM</code>，修改为如下内容：</p>

<pre><code>ChallengeResponseAuthentication yes
UsePAM yes
</code></pre>

<p>重启ssh</p>

<pre><code>sudo service ssh restart
</code></pre>

<p>下面是配置Google Authenticator的相关步骤。</p>

<p>如果要为用户<code>zhangsan</code>添加ssh登录时的双因子认证，执行如下命令：
```</p>

<pre><code>su - zhangsan
google-authenticator
</code></pre>

<p>```</p>

<p>会出现一串问题，让你选<code>y</code>或者<code>n</code>。</p>

<pre><code>Do you want authentication tokens to be time-based (y/n) y
https://www.google.com/chart?chs=200x200&amp;chld=M|0&amp;cht=qr&amp;chl=otpauth://totp/zhangsan@ali%3Fsecret%3DWKHM6UVJNTPYSPTQ
Your new secret key is: WKHM6UVJNTPYSPTQ
Your verification code is 434260
Your emergency scratch codes are:
30287010
70585905
68748337
15176712
38041521
</code></pre>

<p>上面的这一步，会生成一个base32编码的共享密钥<code>WKHM6UVJNTPYSPTQ</code>，即前面的<code>K</code>，用于在客户端进行绑定（如果可以翻墙的话，实际上会看到一张二维码，使用Google Authenticator app扫码即可以完成绑定）。</p>

<p>共享密钥使用base32而非base64的原因如下：</p>

<ul>
<li>base32编码的字符串，包含了大写英文字母和数字2-7。不会因字体显示问题，把1，8，0和'I',&lsquo;B&rsquo;, &lsquo;O'混淆，更利于输入。</li>
<li>base32编码的字符串，出现在url中时，可以不用进行url编码处理（encode），便于直接使用生成二维码的web服务。</li>
</ul>


<p>同时，基于当前的Unix time，生成了一个动态验证码<code>434260</code>，可用于测试。并生成了5个应急备用验证码（上面的emergency scratch codes），可以在绑定设备丢失的情况下使用（每个应急码只能使用一次）。</p>

<p>剩下的问题，没有特殊癖好，可以都选<code>y</code>。</p>

<pre><code>Do you want me to update your "/home/zhangsan/.google_authenticator" file (y/n) y

Do you want to disallow multiple uses of the same authentication
token? This restricts you to one login about every 30s, but it increases
your chances to notice or even prevent man-in-the-middle attacks (y/n) y

By default, tokens are good for 30 seconds and in order to compensate for
possible time-skew between the client and the server, we allow an extra
token before and after the current time. If you experience problems with poor
time synchronization, you can increase the window from its default
size of 1:30min to about 4min. Do you want to do so (y/n) y

If the computer that you are logging into isn't hardened against brute-force
login attempts, you can enable rate-limiting for the authentication module.
By default, this limits attackers to no more than 3 login attempts every 30s.
Do you want to enable rate-limiting (y/n) y
</code></pre>

<p>之后，ssh登录服务器时，会看到类似这样的提示：</p>

<pre><code>verification code:
</code></pre>

<p>这时，打开手机上的google身份验证器App，输入对应的code，如下：</p>

<p>{% img /images/2fa/google-authenticator.png google 验证器 flow %}</p>

<p>reference：</p>

<p>[^1] <a href="https://pthree.org/2014/04/15/time-based-one-time-passwords-how-it-works/">https://pthree.org/2014/04/15/time-based-one-time-passwords-how-it-works/</a></p>

<p>[^2] <a href="https://garbagecollected.org/2014/09/14/how-google-authenticator-works/">https://garbagecollected.org/2014/09/14/how-google-authenticator-works/</a></p>

<p>[^3] <a href="https://www.blackmoreops.com/2014/06/26/securing-ssh-two-factor-authentication-using-google-authenticator/">https://www.blackmoreops.com/2014/06/26/securing-ssh-two-factor-authentication-using-google-authenticator/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac终端穿墙技术汇总]]></title>
    <link href="http://jqlblue.github.io/2016/11/17/mac-terminal-cross-gfw/"/>
    <updated>2016-11-17T18:32:39+08:00</updated>
    <id>http://jqlblue.github.io/2016/11/17/mac-terminal-cross-gfw</id>
    <content type="html"><![CDATA[<p>作为一个互联网从业人员，要想在天朝愉快地工作，生活，目前必须正视墙（gfw）的存在。
本文涉及的翻墙方法，主要针对mac系统。但大部分内容，同样适用于window和linux。也可以自行寻找相关替代品。</p>

<!--more -->


<h1>土豪的方法</h1>

<p>如果你是一个使用mac系统的土豪，那么，访问这个网站 <a href="http://nssurge.com/">http://nssurge.com/</a> 就够了。</p>

<h1>others</h1>

<p>实际上，这才是本文的重点。</p>

<h2>准备工作</h2>

<p>我们需要先搭建一个ss（Shadowsocks）服务器，或者买个账号（<a href="https://shadowsocks.com/%EF%BC%89%E3%80%82">https://shadowsocks.com/%EF%BC%89%E3%80%82</a></p>

<h3>搭建ss server</h3>

<ul>
<li>买个海外的云主机，各大云的香港或者海外节点，应该都能满足需求。</li>
<li>安装 ss server
在云主机的命令行下，执行如下命令
<code>
  pip install shadowsocks
</code>
或者
<code>
  git clone https://github.com/shadowsocks/shadowsocks.git
  cd shadowsocks
  python setup.py
</code></li>
<li><p>配置
创建配置文件，如<code>/etc/shadowsocks.json</code>，示例内容如下
<code>
{
  "server":"my_server_ip",
  "server_port":8388,
  "local_port":1080,
  "password":"barfoo!",
  "timeout":600,
  "method":"table",
  "auth": true
}
</code></p>

<blockquote><p>配置文件是json格式，注意最后一行没有<code>,</code></p></blockquote></li>
<li><p>启动ss server
<code>ssserver -c /etc/shadowsocks.json -d start</code></p></li>
<li>停止ss server
<code>
ssserver -c /etc/shadowsocks.json -d stop
</code></li>
</ul>


<h3>安装ss 客户端</h3>

<p>推荐 <a href="https://github.com/shadowsocks/ShadowsocksX-NG">ShadowsocksX-NG</a>，因为 <a href="https://github.com/shadowsocks/shadowsocks-iOS/releases">ShadowsocksX</a>已无法正常更新pac文件。</p>

<p>至此，使用浏览器的话，就可以自由地在互联网上遨游了。当然，你会发现更好用的翻墙技术。</p>

<h2>终端(terminal)翻墙</h2>

<h3>亲测可用的方案</h3>

<p>下载软件 <a href="https://www.proxifier.com/download.htm">proxifier</a>，仅支持windows和mac，收费软件。</p>

<p>如果是学生的话，可以给我留言，我共享个注册码给你。其他人建立购买，在这物价横飞的时代，几百块，分分钟就花没了。</p>

<p>shadowsocks代理属于socks5代理，通俗的理解，socks5只是局部代理。使用Proxifier把shadowsocks代理转全局代理，类vpn。所以，该方案实际上不局限于终端翻墙。</p>

<h3>其他方案</h3>

<p><a href="https://eliyar.biz/proxy-for-mac-terminal/">proxychains-ng</a>
<a href="https://mba811.gitbooks.io/web-study/content/fq/fq3.html">tsocks</a></p>

<h1>reference</h1>

<p>[^1] <a href="https://shadowsocks.org/">https://shadowsocks.org/</a></p>

<p>[^2] <a href="https://github.com/shadowsocks">https://github.com/shadowsocks</a></p>

<p>[^3] <a href="https://shadowsocks.com/">https://shadowsocks.com/</a></p>

<p>[^4] <a href="https://www.dou-bi.co/ss-jc7/">https://www.dou-bi.co/ss-jc7/</a></p>

<p>[^5] <a href="http://www.voidcn.com/blog/shenshouer/article/p-6254512.html">http://www.voidcn.com/blog/shenshouer/article/p-6254512.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用charles在移动设备上捕获https数据包]]></title>
    <link href="http://jqlblue.github.io/2016/07/01/charles-https/"/>
    <updated>2016-07-01T00:38:16+08:00</updated>
    <id>http://jqlblue.github.io/2016/07/01/charles-https</id>
    <content type="html"><![CDATA[<p>对于互联网从业人员而言，掌握抓包，是必备技能。</p>

<!--more-->


<p><code>Charles</code>是一个http代理，工作模式如下图：</p>

<p>{% img /images/mobile/http_proxy.png &lsquo;抓包&rsquo; %}</p>

<p>但是默认只能抓http协议的数据包，要捕获https的数据包，需要进行相关配置。</p>

<p>下文以<code>IOS</code>移动设备为例，讲述配置步骤（<code>android</code>设备类似）：</p>

<ul>
<li>在移动设备安装ssl证书</li>
</ul>


<p>Charles ssl证书的下载地址如下：</p>

<p><a href="http://www.charlesproxy.com/getssl">http://www.charlesproxy.com/getssl</a></p>

<p>在移动设备的浏览器中打开上述<code>Url</code>，即可进行安装。</p>

<ul>
<li>安装http代理<code>Charles</code></li>
</ul>


<p>软件下载地址如下：
<a href="http://www.charlesproxy.com/latest-release/download.do">http://www.charlesproxy.com/latest-release/download.do</a></p>

<ul>
<li>启用http代理</li>
</ul>


<p>打开<code>Charles</code>软件，默认会启动一个监听本地8888端口的http代理， 也可以在<code>Charles</code>的设置中修改相关端口。</p>

<ul>
<li>配置<code>Charles</code>支持https</li>
</ul>


<p>在<code>Charles</code>中打开：</p>

<pre><code>Proxy -&gt; SSL Proxying Settings
</code></pre>

<p>勾选</p>

<pre><code>Enable SSL Proxying
</code></pre>

<p>然后在下方的<code>Locations</code>中点击</p>

<pre><code>Add
</code></pre>

<p>添加需要抓https接口的域名。</p>

<p>例：</p>

<p><code>
Host:www.baidu.com
Port:443
</code></p>

<ul>
<li>在移动设备上修改代理</li>
</ul>


<p>{% img /images/mobile/ios_http_proxy.png &lsquo;ios设置代理&rsquo; %}</p>

<p>其中，<code>服务器</code>是安装了<code>Charles</code>软件的电脑的<code>IP</code>，端口是<code>Charles</code> http代理开启的端口。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用graphite和cabot搭建监控服务]]></title>
    <link href="http://jqlblue.github.io/2014/10/01/use-graphite-and-alter-build-monitor-system/"/>
    <updated>2014-10-01T09:43:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/10/01/use-graphite-and-alter-build-monitor-system</id>
    <content type="html"><![CDATA[<p>说起监控，我们一般会首先想到<code>zabbix</code>，<code>nagios</code>，<code>ganglia</code>等等。但是对于非<code>ops</code>开发人员而言，这些东西，多多少少让人感到陌生。所以本文将从一个<code>服务端开发人员</code>的视角，介绍如何通过<code>graphite</code>，<code>cabot</code>，加一个<code>shell</code>定时脚本，搭建监控报警服务。</p>

<!-- more -->


<h1>python环境安装</h1>

<p>虽然linux系统上一般都有python环境，但是默认的python版本较低。而且<code>yum</code>等系统工具，都依赖于默认的python。所以推荐的做法是再安装一个python，并使用<code>virtualenv</code>等工具，分项目进行环境管理，并与系统默认的python环境进行隔离。</p>

<p>以python2.7.3为例，介绍python环境的安装。</p>

<h2>安装步骤</h2>

<p>```
sudo yum install bzip2-devel.x86_64
sudo yum install sqlite-devel.x86_64
sudo yum install readline-devel.x86_64
sudo yum install openssl-devel.x86_64</p>

<p>wget <a href="http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2">http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2</a>
tar jxvf Python-2.7.3.tar.bz2
cd Python-2.7.3
./configure &mdash;prefix=/usr/local/python2.7.3
make &amp;&amp; sudo make install</p>

<p>cd ..
wget <a href="https://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz">https://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz</a> &mdash;no-check-certificate
tar zxvf distribute-0.6.49.tar.gz
cd distribute-0.6.49
sudo /usr/local/python2.7.3/bin/python setup.py install
sudo /usr/local/python2.7.3/bin/easy_install pbr</p>

<p>cd ..
wget <a href="https://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.10.1.tar.gz">https://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.10.1.tar.gz</a> &mdash;no-check-certificate
tar zxvf virtualenv-1.10.1.tar.gz
cd virtualenv-1.10.1
sudo /usr/local/python2.7.3/bin/python setup.py install
sudo /usr/local/python2.7.3/bin/easy_install virtualenvwrapper
```</p>

<blockquote><p>如果遇到 [FATAL] Failed to create text with cairo, this probably means cairo cant find any fonts. Install some system fonts and try again。可以尝试安装bitmap font。</p></blockquote>

<p><code>
sudo yum install bitmap.x86_64
sudo yum install bitmap-fonts-compat.noarch
</code></p>

<h2>相关配置</h2>

<ul>
<li>创建管理python环境的用户</li>
</ul>


<p>为了便于环境的统一管理，创建一个普通用户进行新创建python环境的管理和相关python扩展的安装。同时，向数字公司的<code>addops</code>们致敬。
<code>
useradd appops
</code></p>

<ul>
<li>创建python环境安装目录</li>
</ul>


<p><code>
sudo mkdir -p /data/server/python-envs
sudo chown -R appops.appops /data/server
</code></p>

<ul>
<li>配置新安装的python2.7.3环境</li>
</ul>


<p><code>
sudo su appops -c 'vim ~/.bashrc'
</code>
添加如下内容
<code>
export WORKON_HOME=/data/server/python-envs
export VIRTUALENVWRAPPER_PYTHON=/usr/local/python2.7.3/bin/python
export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/python2.7.3/bin/virtualenv
source /usr/local/python2.7.3/bin/virtualenvwrapper.sh
</code></p>

<h1>搭建graphite监控服务</h1>

<h2>安装步骤</h2>

<ul>
<li><p>创建安装目录
<code>
sudo mkdir /opt/graphite
sudo chown -R appops.appops /opt/graphite
</code></p></li>
<li><p>创建python虚拟环境
<code>
sudo su appops
source ~/.bashrc
mkvirtualenv graphite
</code></p></li>
<li><p>graphite安装
<code>
pip install whisper
pip install carbon
pip install graphite-web
pip install django==1.5
pip install django-tagging
pip install uwsgi
pip install MySQL-python
pip install daemonize
</code></p></li>
</ul>


<p>graphite使用<code>cairo</code>进行绘图，由于系统自带的cairo版本较低（需要cairo1.10以上），使用pip安装cairo会出错，所以采用编译安装。
<code>
wget http://cairographics.org/releases/pycairo-1.8.8.tar.gz
tar zxvf pycairo-1.8.8.tar.gz
python -c "import sys; print sys.prefix"
cd pycairo-1.8.8
./configure --prefix=/data/server/python-envs/graphite
make
make install
</code></p>

<ul>
<li>目录说明
<code>
  bin -- 数据收集相关工具
  conf -- 数据存储相关配置文件
      carbon.conf -- 数据收集carbon进程涉及的配置
      dashboard.conf -- Dashboard UI相关配置
      graphite.wsgi -- wsgi相关配置
      storage-schemas.conf -- Schema definitions for Whisper files
      whitelist.conf -- 定义允许存储的metrics白名单
      graphTemplates.conf -- 图形化展示数据时使用的模板
  examples -- 示例脚本
  lib -- carbon和twisted库
  storage -- 数据文件存储目录
  webapp -- 数据前端展示涉及程序
</code>

<h2>配置Graphite-web</h2></li>
<li>初始化配置文件
<code>
cd /opt/graphite/webapp/graphite
cp local_settings.py.example local_settings.py
cp /opt/graphite/conf/graphite.wsgi.example /opt/graphite/conf/graphite.wsgi
cp /opt/graphite/conf/graphTemplates.conf.example /opt/graphite/conf/graphTemplates.conf
cp /opt/graphite/conf/dashboard.conf.example /opt/graphite/conf/dashboard.conf
</code></li>
</ul>


<p>修改或者增加如下配置：
<code>
TIME_ZONE
DEBUG
SECRET_KEY
DATABASES
</code>
示例配置文件<a href="https://gist.github.com/jqlblue/88f8a9b14bbe4bae3666">local_settings.py</a></p>

<ul>
<li><p>初始化数据库
<code>
python manage.py syncdb
</code></p></li>
<li><p>启动graphite-web
<code>
uwsgi --http localhost:8085 --master --processes 1 --home /data/server/python-envs/graphite --pythonpath /opt/graphite/webapp/graphite --wsgi-file=/opt/graphite/conf/graphite.wsgi --enable-threads --thunder-lock
</code>
{% img /images/graphite/web.jpg graphite web%}</p></li>
</ul>


<h2>配置数据收集服务</h2>

<p><code>
cp /opt/graphite/conf/carbon.conf.example /opt/graphite/conf/carbon.conf
cp /opt/graphite/conf/storage-schemas.conf.example /opt/graphite/conf/storage-schemas.conf
cp /opt/graphite/conf/whitelist.conf.example /opt/graphite/conf/whitelist.conf
</code>
编辑<code>/opt/graphite/lib/carbon/util.py</code>，将</p>

<pre><code>from twisted.scripts._twistd_unix import daemonize
</code></pre>

<p>替换成</p>

<pre><code>import daemonize
</code></pre>

<p>否则启动cabon时会遇到<code>ImportError: cannot import name daemonize</code>。</p>

<ul>
<li><p>配置存储白名单
<code>
vim /opt/graphite/conf/whitelist.conf
</code>
添加</p>

<p>  ^test..<em>
  ^server..</em></p></li>
</ul>


<p>即只存储以<code>test.</code>和<code>server.</code>开头的metrics。</p>

<ul>
<li>配置存储Schemas
<code>
vim /opt/graphite/conf/storage-schemas.conf
</code>
添加</li>
</ul>


<p>```
[server]
pattern = ^server..*
retentions = 60s:1d,5m:7d,15m:3y</p>

<p>[default]
pattern = ^test..*
retentions = 60s:1d,5m:7d
```</p>

<p>上面的配置，会对于<code>test.</code>开头的metrics，以60秒为精度存储一天，以5分钟为精度存储7天。即查询一天内的数据时，可以精确到1分钟，查询7天内的数据时，只能精确到5分钟。</p>

<ul>
<li>启动cabon
<code>
python /opt/graphite/bin/carbon-cache.py --config=/opt/graphite/conf/carbon.conf --debug start
</code></li>
</ul>


<h1>收集监控数据</h1>

<p>etsy开源了一个叫<a href="https://github.com/etsy/statsd">statsd</a>的daemon，可用于将监控数据收集到graphite，但那玩意是nodejs写的。</p>

<p>为了保持方案的简单，采用<code>crontab</code>的方式，利用<a href="https://gist.github.com/jqlblue/c7473473f8a7357167b8">shell脚本</a>将要收集的数据通过udp协议直接发送至graphite。</p>

<p>```</p>

<h1>!/bin/sh</h1>

<p>HOST=$(hostname | awk -F'.&lsquo; &rsquo;{print $1}&lsquo;)
IDC=&ldquo;local&rdquo;</p>

<p>SYSTEM_LOAD=$(awk &lsquo;{print $1}&rsquo; /proc/loadavg)
SYSTEM_MEMORY_FREE=$(free -m | grep &lsquo;buffers/cache&rsquo; | awk &lsquo;{print $NF}&rsquo;)
SYSTEM_SWAP_USE=$(free -m | grep &lsquo;Swap&rsquo; | awk &lsquo;{print $(NF-1)}&rsquo;)
SYSTEM_DISK_USED=$(df -h | grep &lsquo;/&rsquo; | awk &lsquo;BEGIN{<em>max=0}{len=length($5);i=substr($5,0,len-1);if(</em>max&lt;i){<em>max=i}}END{print </em>max}&rsquo;)</p>

<p>TIMESTAMP=$(date +%s)</p>

<h3>send to garphite through udp port 2003</h3>

<p>echo -n &ldquo;server.$IDC.$HOST.system.load $SYSTEM_LOAD $TIMESTAMP&rdquo; > /dev/udp/127.0.0.1/2003
echo -n &ldquo;server.$IDC.$HOST.system.memory_free $SYSTEM_MEMORY_FREE $TIMESTAMP&rdquo; > /dev/udp/127.0.0.1/2003
echo -n &ldquo;server.$IDC.$HOST.system.swap_used $SYSTEM_SWAP_USED $TIMESTAMP&rdquo; > /dev/udp/127.0.0.1/2003
echo -n &ldquo;server.$IDC.$HOST.system.disk_used $SYSTEM_DISK_USED $TIMESTAMP&rdquo; > /dev/udp/127.0.0.1/2003
```</p>

<p>{% img /images/graphite/data-view.jpg graphite monitor data view %}</p>

<p><em>监控数据收集和展示流图</em></p>

<p>{% img /images/graphite/data-flow.jpg graphite monitor data flow %}</p>

<h1>搭建cabot报警服务</h1>

<p><code>cabot</code>是一个轻量级的监控报警服务。其报警可以基于：</p>

<pre><code>graphite收集的监控数据
url的响应内容和状态码
jenkins编译任务的状态
</code></pre>

<ul>
<li>安装依赖</li>
</ul>


<p><code>
sudo gem sources --remove http://rubygems.org/
sudo gem sources -a http://ruby.taobao.org/
sudo gem install foreman
</code></p>

<blockquote><p>因为foreman要求ruby版本需要在1.9.3以上，如果系统自带ruby版本过低，可以通过rvm安装ruby，再安装foreman。</p></blockquote>

<p><code>
sudo yum install npm
sudo npm install -g coffee-script less@1.3 --registry http://registry.npmjs.org/
</code></p>

<ul>
<li>初始化目录</li>
</ul>


<p><code>
sudo su appops
mkdir /data/server/alter
cd /data/server/alter
mkvirtualenv cabot
</code></p>

<ul>
<li>安装cabot</li>
</ul>


<p><code>
git clone https://github.com/arachnys/cabot.git
cd cabot
cp conf/development.env.example conf/development.env
</code></p>

<p>修改<a href="https://gist.github.com/jqlblue/165d50a949cd4aae2191">setup.py</a>，添加</p>

<pre><code>'MySQL-python==1.2.5',
</code></pre>

<p><code>
python setup.py install
/bin/sh ./setup_dev.sh
</code></p>

<ul>
<li>配置cabot</li>
</ul>


<p>使用foreman启动cabot时，会先读取<code>.foreman</code></p>

<pre><code># vi: set ft=yaml :

procfile: Procfile.dev
env: conf/development.env
</code></pre>

<p><code>Procfile.dev</code>内容如下：</p>

<pre><code>web:       python manage.py runserver 0.0.0.0:$PORT
celery:    celery -A cabot worker --loglevel=DEBUG -B -c 8 -Ofair
</code></pre>

<p>其中定义了启动cabot-web和celery任务队列时使用的命令，针对不同的环境，可以酌情修改<code>.foreman</code>和对应的<code>procfile</code>及<code>env</code>。</p>

<p>对于邮件报警，需要修改<a href="https://gist.github.com/jqlblue/a6329a7649be16e92df4">conf/development.env</a>中的如下内容：
<code>
DATABASE_URL -- 数据库配置
TIME_ZONE -- 时区
ADMIN_EMAIL
CABOT_FROM_EMAIL
CELERY_BROKER_URL -- celery任务队列配置
SES_HOST -- smtp host
SES_USER -- 发送邮件的用户
SES_PASS -- 发送邮件用户的密码
SES_PORT -- smtp port
</code></p>

<ul>
<li>启动cabot
<code>
nohup foreman start 2&gt;&amp;1 &gt; /dev/null &amp;
</code></li>
</ul>


<p>{% img /images/graphite/cabot_service.jpg cabot service %}</p>

<p>{% img /images/graphite/cabot_service_check.jpg cabot service check %}</p>

<p>{% img /images/graphite/cabot_service_check_detail.jpg cabot service check detail %}</p>

<p>reference：</p>

<p>[^1] <a href="http://graphite.readthedocs.org/en/latest/overview.html">http://graphite.readthedocs.org/en/latest/overview.html</a></p>

<p>[^2] <a href="http://cabotapp.com/qs/quickstart.html">http://cabotapp.com/qs/quickstart.html</a></p>

<p>[^3] <a href="https://gist.github.com/jirutka/8636572">https://gist.github.com/jirutka/8636572</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在linux服务器之间同步用户账号]]></title>
    <link href="http://jqlblue.github.io/2014/08/02/synchronization-user-account-on-linux/"/>
    <updated>2014-08-02T17:26:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/08/02/synchronization-user-account-on-linux</id>
    <content type="html"><![CDATA[<p>最近负责运帷的同事离职了，原先由运帷可以一手搞定的事情，分摊到了几个研发同事的身上。但是多人公用一个账号，实在感觉不爽。</p>

<!-- more -->


<p>由于公司没有几台服务器上，所以可以逐一登录服务器创建新账号。但是对于一个码农而言，这不科学，它违背了<code>DRY</code>原则。</p>

<p>当然，也可以配置一个ldap服务器，修改linux用户登录使用ldap验证。但这让我有一种从火窟跳到冰窖的感觉。先不说是否能搞定配置的事情，引入的这个ldap，又会变成另外一个坑。</p>

<p>昨天听一个同事时，我们来上班，要对得起自己的良心。所以我不能让上班时间在纠结中度过，用土方法解决问题先。</p>

<h2>同步步骤</h2>

<p>因为目前有一台服务器是登录的跳板机，所以只需要在跳板机上创建好新账号，然后把用户账号同步到其他机器上就好。</p>

<blockquote><p>如果没有跳板机，也可以随便选一台服务器（A），在A服务器上创建账号，并同步到其他机器上。</p></blockquote>

<ul>
<li><p>在跳板机上创建用户账号</p></li>
<li><p>在要同步的服务器上创建账号，并将该用户在跳板机上如下文件中对于的条目追加到要同步到机器上</p></li>
</ul>


<p><code>/etc/passwd</code>， <code>/etc/group</code>, <code>/etc/shadow</code></p>

<p>以跳板机ip：<code>192.168.1.1</code>，要同步的服务器：<code>192.168.1.8</code>，新增用户名：<code>jqlblue</code>为例，登录跳板机执行：</p>

<pre><code>$ useradd jqlblue
$ ssh -l root -p 22 192.168.1.8 "useradd jqlblue"
$ grep jqlblue: /etc/group | xargs -I {} ssh -l root -p 22 192.168.1.8 "echo {} &gt;&gt; /etc/group"
$ grep jqlblue: /etc/passwd | xargs -I {} ssh -l root -p 22 192.168.1.8 "echo {} &gt;&gt; /etc/passwd"
$ grep jqlblue: /etc/shadow | xargs -I {} ssh -l root -p 22 192.168.1.8 "echo {} &gt;&gt; /etc/shadow"
</code></pre>

<p>上述操作，编写成脚本即可。当需要新增或者修改用户时，只需在跳板机上进行操作，同步问题，由脚本来完成。</p>

<p><em>上述脚本要在生产环境使用，需要注意如下问题：</em></p>

<pre><code>1 新增用户时，uid或者gid重复的问题
2 修改用户密码或者组信息后，产生多条记录的问题
</code></pre>
]]></content>
  </entry>
  
</feed>
