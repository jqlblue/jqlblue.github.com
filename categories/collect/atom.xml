<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: collect | Debug Hacks]]></title>
  <link href="http://jqlblue.github.io/categories/collect/atom.xml" rel="self"/>
  <link href="http://jqlblue.github.io/"/>
  <updated>2017-01-10T23:12:53+08:00</updated>
  <id>http://jqlblue.github.io/</id>
  <author>
    <name><![CDATA[jqlblue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我的2015]]></title>
    <link href="http://jqlblue.github.io/2016/01/01/2015-of-mine/"/>
    <updated>2016-01-01T22:51:00+08:00</updated>
    <id>http://jqlblue.github.io/2016/01/01/2015-of-mine</id>
    <content type="html"><![CDATA[<p>我不是一个善于规划的人，当这新的一年已经到来的时候，我觉得自己做一些改变，以更好地让自己来面对这个阶段的人生，也让自己的生活有所不同。</p>

<!-- more -->


<p>为了让我的内容可以衬地上我的标题，我需要先从2014年说起。</p>

<p>2014年，我从数字离职，加入了一家创业公司。从居民楼搬到写字楼，和你们一起奋斗的日子，历历在目，感谢在有生之年，可以遇到你们。</p>

<p>{% img /images/2015-of-mine/zq.jpg 住趣 %}</p>

<h1>工作方面</h1>

<ul>
<li>2015年，我工作的重心，从之前的自coding，变成了团队建设。当然，写代码这门手艺不能丢。明年需要拿下react，rust，或者golang。</li>
<li>2015年，我的工作环境也从之前的fedora＋windows xp虚拟机，换成了new macbook＋4k显示器。</li>
</ul>


<h1>家庭生活方面</h1>

<ul>
<li>今年我的闺女满1岁了，我会尽我的能力，支撑她健康，开心，快乐，善良地成长。</li>
<li>现在的自己，渐渐地有了架子，对老婆的意见越来越多了。但是，我及时发现了这个问题。现在我老婆要动手的时候，我基本上可以做到变身成沙袋模式；每个月，都会给老爸老妈打几次电话。这应该离不开我闺女对我的影响。从小到大，我都很羡慕一个和睦的家庭。现在的我，要尽我所能，为我闺女营造一个和睦的家庭氛围。</li>
<li>今年，给我和我闺女办了护照（她妈妈已经办好护照了）。等合适的时候，想去台湾或者日本转转。</li>
<li>今年，成功办理了工作居住证。伤心的是，没有在新单位续上 :(</li>
</ul>


<h1>教育学习</h1>

<ul>
<li>终于赶在2015年结束之前，拿到了驾照。</li>
<li>在我的emo的支持下，参加了上海同泰在北京的EP培训，在上海参加了领袖素质1阶段的培训，在深圳参加了领袖素质2阶段的培训。</li>
</ul>


<h1>人际关系</h1>

<ul>
<li>托挺哥的福，又认识了一个棒棒哒的dba。</li>
<li>托老王的福，认识了一个前端大牛，只可惜还没怎么配合呢。</li>
<li>和it168的老同事门聚了聚。</li>
<li>和七七吃了顿饭。</li>
<li>在住趣和艾米，又认识了一波90后小鲜肉。</li>
<li>已经答应要吃饭的包括：老胡，玄悲，旭辉，家柱，冠华，小虎队的。。。</li>
</ul>


<h1>身体健康</h1>

<ul>
<li>今年在梵音办了40次的次卡，但是使用了不到10次。</li>
<li>今年买了囚徒健身，但是仅断断续续地练到了第二式。</li>
</ul>


<h1>心灵成长</h1>

<ul>
<li>这一年，我的emo，mily帮我打开了一扇窗，让我看到了自己的封闭，被动，以及除技术之外的其他东西。所以，我要做一个主动，激情，有活力的男人</li>
<li>这一年，我信守了我加入住趣时对自己的承诺，坚持到和老板卖完最后一张桌子。但是在加入住趣的1年多时间里面，我可以做更多。这是自己要加入下家公司时，需要去实践的事情。</li>
</ul>


<h1>休闲娱乐</h1>

<ul>
<li>今年，学到了除数七和成语接龙之外的第三个游戏。</li>
<li>今年虽然没有去电影院，但是热映电影中的50%，基本上都有在手机上看过。</li>
</ul>


<h1>金钱财务</h1>

<ul>
<li>今年没有年终奖了，明年好好努力。</li>
</ul>


<p>最后，祝你们一切都好！</p>

<p>马上要从天天艾米离开了，怀念一下那个让我有点感动的场景。</p>

<p>{% img /images/2015-of-mine/ime.png 365ime %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[奶爸攻略]]></title>
    <link href="http://jqlblue.github.io/2015/12/15/guide-of-kid-gang/"/>
    <updated>2015-12-15T22:51:00+08:00</updated>
    <id>http://jqlblue.github.io/2015/12/15/guide-of-kid-gang</id>
    <content type="html"><![CDATA[<p>有一天，当你早上出门时，有一个会小孩摇摇晃晃地走到门口，对你伸开怀抱；对你晚上推开家门时，他／她手里拿着玩具，无邪地开心对你笑，用稚嫩的声音叫你一声爸爸。</p>

<!-- more -->


<p>当这么一个小孩降临到这个世上，来到你身边时，也会因为生病让你揪心，哭闹让你烦躁。</p>

<p>作为一个不称职的奶爸，汇总了小孩成长过程中的一些点滴，希望对初为人父的你有所帮助。</p>

<h1>新生儿所需物品清单</h1>

<ul>
<li>小剪刀</li>
</ul>


<blockquote><p>小孩皮肤稚嫩，指甲长了，容易把自己抓伤。</p></blockquote>

<p>{% img /images/kid-gang/jiandao.png 小剪刀 %}</p>

<ul>
<li>屁屁油</li>
</ul>


<blockquote><p>我们家小孩经常红屁屁，机缘巧合中发现了下面这个，强烈推荐。</p></blockquote>

<p>{% img /images/kid-gang/pipiyou.png 屁屁油 %}</p>

<ul>
<li>温度计</li>
</ul>


<blockquote><p>初生儿怕热，屋里挂个温度计，经常看看，不要让屋里温度过高。</p></blockquote>

<p>{% img /images/kid-gang/wenduji.png 温度计 %}</p>

<ul>
<li>小夜灯</li>
</ul>


<blockquote><p>方便晚上给小孩喂奶，换尿布。</p></blockquote>

<p>{% img /images/kid-gang/xiaoyedeng.png 小夜灯 %}</p>

<ul>
<li>爽身粉</li>
</ul>


<blockquote><p>小孩新生代谢旺盛，需要保持腋窝等部位的干燥。</p></blockquote>

<p>{% img /images/kid-gang/songhuafeng.png 爽身粉 %}</p>

<ul>
<li>婴肤霜</li>
</ul>


<blockquote><p>基本上每个小孩都要长湿疹，下面这个婴肤霜不错。</p></blockquote>

<p>{% img /images/kid-gang/yingfushuang.png 婴肤霜 %}</p>

<h1>尿不湿的选择</h1>

<blockquote><p>选择尿不湿的不二法门就是：没有最好，只有更适合。</p></blockquote>

<p>我们家小孩使用过的尿不湿品牌如下：</p>

<p>{% img /images/kid-gang/niaobushi1.png 尿不湿 %}</p>

<p>{% img /images/kid-gang/niaobushi2.png 尿不湿 %}</p>

<p>{% img /images/kid-gang/niaobushi3.png 尿不湿 %}</p>

<blockquote><p>如果小孩红屁屁比较严重，可以换成尿布试试。</p></blockquote>

<p>{% img /images/kid-gang/niaobu.png 尿布 %}</p>

<h1>FAQ</h1>

<ul>
<li>母乳喂养or not</li>
</ul>


<p>这个社区医院的大夫都会讲。</p>

<p>我们家小孩是母乳喂养，半岁之前，基本上没生病。</p>

<blockquote><p>母乳喂养期间，妈妈要多喝汤，不要太重口，保持好心情。</p></blockquote>

<ul>
<li>小孩出疹子怎么办</li>
</ul>


<p>出疹子，好像是一岁之前的大部分小孩都要经历的，在出疹子之前，会先持续高烧。烧退了就出疹子（身上长小红疙瘩），一般都会自行消退。</p>

<p>发烧期间，是很揪心的，要美林和物理降温齐上。</p>

<ul>
<li>小孩打嗝怎么办</li>
</ul>


<p>小孩的消化系统不健全，所以经常会见他／她专注地打嗝。</p>

<p>一般情况下，喝点水或者喝点奶就压下去了。</p>

<p>要嗝地太厉害，一般方法不管用时，可以把他／她弄哭，大哭一场之后就好。</p>

<blockquote><p>这个方法有点残忍，但是很凑效。</p></blockquote>

<ul>
<li>发烧和呕吐注意事项</li>
</ul>


<p>{% img /images/kid-gang/fare.jpg 发烧 %}</p>

<p>{% img /images/kid-gang/out.jpg 呕吐 %}</p>

<ul>
<li>其他需要注意的事项</li>
</ul>


<p>当个小孩不容易，作为老爸，尽量多抽时间陪陪小孩。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[互联网创业公司是否需要后端工程师]]></title>
    <link href="http://jqlblue.github.io/2015/03/30/does-startup-company-need-backend-development-engineer/"/>
    <updated>2015-03-30T18:05:00+08:00</updated>
    <id>http://jqlblue.github.io/2015/03/30/does-startup-company-need-backend-development-engineer</id>
    <content type="html"><![CDATA[<p>随着LeanCloud等<code>baas</code>云服务的兴起，对于一个互联网创业公司而言，是否还需要专门的后端工程师？</p>

<!-- more -->


<p>一个典型的web app的架构如下：</p>

<p>{% img /images/baas/app_struct.png web app典型架构 %}</p>

<p>客户端或者浏览器调用后端服务，进行数据的写入和读取。让用户通过互联网，完成信息的交换。</p>

<p>以一个b-s结构的web服务为例，其前后端基本架构大致如下：</p>

<p>{% img /images/baas/simple_web_struct.png web 服务的前后端基本架构 %}</p>

<p>前端主要负责用户界面的布局和交互处理，后端包括：</p>

<pre><code>1. 后端业务逻辑处理
2. 与前端用户界面进行相关交互
</code></pre>

<p>而一个要运行在生产环节下的后端服务架构，应该大致是下面这个样子：</p>

<p>{% img /images/baas/web_struct.png web web服务后端架构 %}</p>

<p>后端服务并不是直接对数据库进行写入和查询操作，每一次到达后端服务的请求，都附带着自身的业务逻辑。</p>

<p>虽然我们可以剥离某些与业务不是强关联的模块，增加一层公共服务。但是由于每个公司商业模式和运营需求的限制，业务逻辑的<code>领域</code>特性，会一直存在。</p>

<p>而现在的<code>baas</code>等服务，主要提供的是数据存储、实时消息、统计分析以及扩展组件等基础公共服务。有了这些服务，的确满足业务需求的情况下，降低后端服务的开发成本。</p>

<p>互联网的核心价值是：</p>

<pre><code>平等，共享，透明，高度化的信息对称
快速和善变，强烈的交互式客户体验
</code></pre>

<p><code>信息</code>（数据）和<code>交互体验</code>（前端ui）都很重要。</p>

<p>当然，随着<code>baas</code>服务的发展，对于业务逻辑不是很复杂的互联网应用，的确可以完全使用<code>baas</code>服务替代现有的后端服务。但是这样就会把后端逻辑变成一个黑盒。出了问题只能等待baas服务提供商解决。</p>

<p>对于创业公司而言，在选择类似的服务时，需要根据自身的业务形态和人员配备等，在前期的人员投入，后期的维护成本以及业务的最终形态，系统的扩展性，数据的安全性等方面，进行权衡。</p>

<p>而身处创业公司的后端工程师，也需要积极了解行业动态，如果使用<code>baas</code>服务能满足业务需求的，也就没有必要再去重复开发。</p>

<blockquote><p>baas（Backend as a Service）</p></blockquote>

<p>即软件即服务，如APICloud，LeanCloud。</p>

<blockquote><p>paas（Platform as a Service）</p></blockquote>

<p>即平台即服务，如google的gae，sina的sae。</p>

<blockquote><p>laas（Infrastructure as a Service）</p></blockquote>

<p>即基础设施即服务，如亚马逊的aws，阿里云，腾讯云，linode。</p>

<blockquote><p>saas（Software as a Service）</p></blockquote>

<p>即软件即服务，如云盘。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[那个套模版的，放开你的F5]]></title>
    <link href="http://jqlblue.github.io/2015/02/28/release-f5-for-template-engineer/"/>
    <updated>2015-02-28T18:29:00+08:00</updated>
    <id>http://jqlblue.github.io/2015/02/28/release-f5-for-template-engineer</id>
    <content type="html"><![CDATA[<p>老江说过：“科学技术是第一生产力”。技术的魅力在于通过改善相关流程或者提供相关工具，对人们的生活进行改善，make live esaier。</p>

<!-- more -->


<p><em>对于自喻为模版工程师的同行们，套模版的流程大抵是：</em></p>

<pre><code>写代码，保存

打开浏览器，按F5刷新页面，检查相关前端效果
</code></pre>

<p>我记得<a href="http://weibo.com/yjf10">轩脉刃</a>曾经写过一个统计鼠标按键的小工具。如果对模版工程师工作时键盘的按键进行统计，那么F5的使用率肯定不容忽视。</p>

<p>倘若能在代码保存后就自动刷新浏览器，那不仅能解放模版工程师的F5按键，也能提升他们的开发效率。突然感觉非常美妙。</p>

<p>我记得有人说过，这个世界上不缺乏原创的idea，缺的只是一双能发现它的眼睛。</p>

<p>正如<code>livereload</code>所说的－“The Web Developer Wonderland”。</p>

<p>使用<code>livereload</code>，<em>通过如下几个步骤</em>，就可以做到当我们保存代码后，自动刷新浏览器中相关页面内容。</p>

<blockquote><p>安装livereload浏览器扩展</p></blockquote>

<p>相关浏览器扩展的下载地址如下：</p>

<p><a href="http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions">browser extensions</a></p>

<blockquote><p>安装livereload server端</p></blockquote>

<p>安装python环境，然后在终端执行</p>

<pre><code>pip install livereload
</code></pre>

<p>或者</p>

<pre><code>easy_install livereload
</code></pre>

<blockquote><p>启动livereload server端</p></blockquote>

<p>假设我的代码目录在<code>/home/galendy/code/demo</code>，在终端执行</p>

<pre><code>livereload /home/galendy/code/demo
</code></pre>

<blockquote><p>点击浏览器扩展</p></blockquote>

<p><code>livereload</code>的基本原理是：</p>

<pre><code>livereload server端会启动本地的socket服务（默认开放本地的35729端口），当监听的目录下的文件内容有变化时，向该socket写入数据

livereload浏览器扩展会连接本地的35729端口，当有新消息到来时，会在浏览器中插入一段js代码，刷新当前页面
</code></pre>

<p>实际上，前端工程师还会使用<code>livereload</code>完成css，js等文件的合并和压缩。想要了解更多，请参考：</p>

<p><a href="http://livereload.com/">livereload</a></p>

<p><a href="http://livereload.readthedocs.org/en/latest/">python livereload</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[互联网信息分类方法]]></title>
    <link href="http://jqlblue.github.io/2015/01/25/categorize-web-information/"/>
    <updated>2015-01-25T19:12:00+08:00</updated>
    <id>http://jqlblue.github.io/2015/01/25/categorize-web-information</id>
    <content type="html"><![CDATA[<p>目前，虽然搜索已经代替分类目录（google颠覆yahoo模式）成为人们获取信息的主要途径，但是没有好的信息分类，再好的搜索也是白搭。只有信息足够格式化，标准化，搜索才有效。即分类提升展示逻辑，搜索输出内容结果。</p>

<!--more-->


<h1>如何判定分类的好坏</h1>

<p>一个好的分类方法需要做到如下几点：</p>

<ul>
<li>能够涵盖集合中的所有元素</li>
<li>类和类之间不能重叠</li>
<li>能够比较容易地为每一个元素找到其对应的分类</li>
</ul>


<h1>常见的分类方法</h1>

<h2>分类之前的准备工作</h2>

<p>在对信息进行分类之前，可以先做如下几件事：</p>

<h5>1. 明确如下问题</h5>

<p>信息如何产生？如何组织关联？通过什么渠道传播？</p>

<h5>2. 观察别人</h5>

<p>可以去一家真正的商店看看，或者参观一座图书馆，还可以拜访竞争对手的商店。</p>

<h5>3. 研究竞争对手</h5>

<p>访问竞争对手的网站。他们是怎样组织信息的？要对多种组织方案加以比较。存在哪些相似之外？又有哪些区别？要尽量明确竞争对手为什么做出那样的选择。这是失误还是明智之举？你甚至可以对他们的网站做可用性测试，从而发现其组织方案中哪些方面奏效，哪些部分没有意义。</p>

<h2>常见的分类方法</h2>

<h5>1. 主题分类法</h5>

<p>主题分类法的特征是选择某一个主题作为一阶类目，在一阶类目下又可分若干二阶类目，二阶类目下再分若干三阶类目，形成一个大的树形结构。同阶的类目按照字顺排序。</p>

<p>由于网络资源数不胜数，所以一般会选取14-24个热点事物作为一阶分类，分类的阶数为3到6级。</p>

<p>其优点是可以将事物相关的内容全部集中在一起。如汽车大类下可包含汽车制造，交易，保养，维修，赛车等等子类目。但是容量较小，对网络资源的覆盖率有限。</p>

<h5>2. 分面分类法</h5>

<p>分面分类法是根据实物都具有多维度的特征而建立的。可以将信息分成定义明确、互斥的区域。常见的是按字母顺序、按年表、按地理位置等分类。也可按照如下类型进行分类：</p>

<ul>
<li>按主题；设计时需要定义好内容的范围，注意涵盖面的广度</li>
<li>按任务；将内容和应用程序组织成流程、功能或工作的集合。最常见的是电商网站</li>
<li>按用户；如果用户群可以界定的比较清楚，可以提供很好的个性化服务，但模糊性依然存在，对系统“猜测”的要求很高</li>
<li>按隐喻；多用于游戏</li>
<li>混用以上类型</li>
</ul>


<h5>3. 卡片分类法</h5>

<p>卡片分类就是把类似的东西放在一起。</p>

<ul>
<li>把你收集的各种信息整理出来写在卡片上。(如果没有，可以用一堆CD或者照片代替，可以是任何东西，只要数量足够多，可以零乱散落在地板上)</li>
<li>把所有卡片从盒子里倒在地板上。</li>
<li>把所有卡片从盒子里倒在地板上。</li>
<li>现在开始分组。如果你看到某些东西与另外一些东西相像，就把它们放在一起。</li>
<li>最后，当分组完毕时，再拿一些背面有胶的便条标出每一个堆的名称，分类完毕。</li>
</ul>


<h5>4. 公众分类法</h5>

<p>所谓"公众分类法"，就是由公众来为信息贴加标签（tagging），被使用最多的标签就最能说明这条信息的特点。</p>

<p>使用标签分类，非常的便捷，而且易于组合，但是也存在一些问题：</p>

<ul>
<li>不同的用户对相同的标签，往往有不同的理解，比如在"工具"标签下，可能会发现彼此完全没有关系的内容。</li>
<li>同义词问题。用户可能使用同义词作为标签，比如"tv/television"，"Holland/Netherlands/Dutch"，"超级女生/超女"。英语中，还存在复数问题。</li>
<li>词的多义性问题。比如"china"这个标签，到底指中国，还是指瓷器。</li>
<li>用户的标签五花八门，可能会产生大量"噪音"，加重系统负担，降低分类的准确性。</li>
</ul>


<p>所以，最好的解决方法应该是，自上而下的目录分类法与标签式的公众分类法相结合，然后对能够用作标签的词汇进行控制（controlled vocabulary），不能什么词都用来当标签。</p>

<h1>实施建议</h1>

<ul>
<li>尝试按照主题分类和分面分类发进行分类</li>
<li>试试卡片分类</li>
<li>使用2的标准去判定分类是否合理</li>
<li>如果单纯的分类无法解决问题，考虑下打标签（公众分类法）</li>
</ul>


<p>reference：</p>

<p>[^1] <a href="http://zhanglichuan.me/resolve-ia">http://zhanglichuan.me/resolve-ia</a></p>

<p>[^2] <a href="http://www.ruanyifeng.com/blog/2007/01/categories.html">http://www.ruanyifeng.com/blog/2007/01/categories.html</a></p>

<p>[^3] <a href="http://www.uegeek.com/reading/web_ia_note">http://www.uegeek.com/reading/web_ia_note</a></p>
]]></content>
  </entry>
  
</feed>
