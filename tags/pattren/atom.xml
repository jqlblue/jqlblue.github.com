<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: pattren | Debug Hacks]]></title>
  <link href="http://jqlblue.github.io/tags/pattren/atom.xml" rel="self"/>
  <link href="http://jqlblue.github.io/"/>
  <updated>2017-01-10T23:38:13+08:00</updated>
  <id>http://jqlblue.github.io/</id>
  <author>
    <name><![CDATA[jqlblue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[php中的单例模式面面观]]></title>
    <link href="http://jqlblue.github.io/2014/04/26/singleton-pattern-in-php/"/>
    <updated>2014-04-26T20:47:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/04/26/singleton-pattern-in-php</id>
    <content type="html"><![CDATA[<p>最近在面试时发现好多人都喜欢在简历中添加“熟悉各种设计模式”那一项。但也不乏对于最为简单的单例，也仅限于书本上的一点认知，所以扯一扯php中单例模式的几种使用场景。</p>

<!-- more -->


<h1>何为单例模式</h1>

<p>单例模式属于创建型的应用模式，可以确保某一个类只有一个实例。这在获取数据库，缓存服务器的连接句柄，以及获取配置信息方面非常方便。</p>

<p>使用单例模式，可以减少在一次web请求中多次连接数据库或者解析配置文件等操作对系统资源的消耗，也可以避免大量的new操作。</p>

<p>其UML结构图如下：</p>

<p>{% img /images/pattern/singleton-uml.png singleton-uml %}</p>

<p>在php中实现单例模式需要注意：</p>

<ul>
<li>需要一个静态变量保存实例</li>
<li>需要提供一个公共的静态方法，用于返回需要获取的实例</li>
<li>需要防止外部程序通过new和clone等操作产生相关实例，从而失去单例模式的意义</li>
</ul>


<h1>代码实现解析</h1>

<p>一个单例模式的php实现大致如下:
{% codeblock lang:php %}
class Singleton
{</p>

<pre><code>private static $_instance = null;

private function __construct()
{
}

public function __clone()
{
    trigger_error("clone method is not allowed.", E_USER_ERROR);
}

public static function getInstance()
{
    if (self::$_instance === null) {
        self::$_instance = new self();
    }

    return self::$_instance;
}
</code></pre>

<p>}
{% endcodeblock %}
上述代码通过<code>静态成员变量</code>保存创建的实例，通过将构造函数设置为私有的，并使用魔术方法<code>__clone</code>&ldquo;重载"clone方法以避免通过外部程序获取相关实例。</p>

<p>由于php中的静态变量包括：<code>静态全局变量</code>，<code>静态局部变量</code>，<code>静态成员变量</code>，所以也可以通过<code>静态局部变量</code>来保存创建的实例。但是在子类中获取创建的实例时，会遇到一些问题。示例如下：</p>

<h2>使用静态局部变量</h2>

<p>{% codeblock singleton-static.php lang:php %}
class Singleton
{</p>

<pre><code>private $_handle = null;

private function __construct()
{
    $this-&gt;_handle = new StdClass();
}

public function __clone()
{
    trigger_error("clone method is not allowed.", E_USER_ERROR);
}

public static function getInstance()
{
    static $_instance = null;

    if ($_instance === null) {
        $_instance = new self();
    }

    return $_instance;
}

public function getObj()
{
    return $this-&gt;_handle;
}
</code></pre>

<p>}</p>

<p>class UserModel extends Singleton
{</p>

<pre><code>public static function getUser()
{
    var_dump(self::getInstance()-&gt;getObj());
    //logic no care
}
</code></pre>

<p>}</p>

<p>class GroupModel extends Singleton
{</p>

<pre><code>public static function getGroup()
{
    var_dump(self::getInstance()-&gt;getObj());
    //logic no care
}
</code></pre>

<p>}</p>

<p>UserModel::getUser();
GroupModel::getGroup();
{% endcodeblock %}</p>

<pre><code>$ php /.singleton-static.php
object(Singleton)#2 (0) {
}
object(Singleton)#4 (0) {
}
</code></pre>

<blockquote><p>此例没有获取到唯一实例，因为局部静态变量，也就是在函数中定义的静态变量。其信息是存储在zend vm为每个函数分配的一个私有符号表中。</p></blockquote>

<p>php中当继承发生时，会进行函数的合并。UserModel中调用的，实际上是合并在UserModel中的getInstance，GroupModel中调用的，也是合并在GroupModel中的getInstance方法。</p>

<p>因为是在两个不同方法的私有符号表中获取数据，所以取到的不是同一个实例。</p>

<blockquote><p>可以将self换成parent试试</p></blockquote>

<h2>使用静态成员变量</h2>

<p>{% codeblock singleton-static-member.php lang:php %}
class Singleton
{</p>

<pre><code>private $_handle = null;

private static $_instance = null;

private function __construct()
{
    $this-&gt;_handle = new StdClass();
}

public function __clone()
{
    trigger_error("clone method is not allowed.", E_USER_ERROR);
}

public static function getInstance()
{
    if (self::$_instance === null) {
        self::$_instance = new self();
    }
    return self::$_instance;
}

public function getObj()
{
    return $this-&gt;_handle;
}
</code></pre>

<p>}</p>

<p>class UserModel extends Singleton
{</p>

<pre><code>public static function getUser()
{
    var_dump(self::getInstance()-&gt;getObj());
    //logic no care
}
</code></pre>

<p>}</p>

<p>class GroupModel extends Singleton
{</p>

<pre><code>public static function getGroup()
{
    var_dump(self::getInstance()-&gt;getObj());
    //logic no care
}
</code></pre>

<p>}
UserModel::getUser();
GroupModel::getGroup();
{% endcodeblock %}</p>

<pre><code>$ php /.singleton-static-member.php
object(Singleton)#2 (0) {
}
object(Singleton)#2 (0) {
}
</code></pre>

<blockquote><p>此时获取到了唯一实例，因为静态成员变量的信息是存储在类结构的 default_static_members 字段，为所有实例所共用。</p></blockquote>

<h1>编写一个单例的基类</h1>

<p>有时我们的项目中有个缓存类，还有数据库类，还有个文件操作类。想让这三个类都是单例的话，我们需要实现三个单例，这有点繁琐。于是我们可以创建一个单例的基类，要实现单例的类继承这个基类即可。直接上代码：</p>

<p>{% codeblock lang:php %}
&lt;?php
class Singleton
{</p>

<pre><code>private static $_instances = array();

protected function __construct()
{
}

final public function __clone()
{
    trigger_error("clone method is not allowed.", E_USER_ERROR);
}

final public static function getInstance()
{
    $c = get_called_class();

    if(!isset(self::$_instances[$c])) {
        self::$_instances[$c] = new $c;
    }

    return self::$_instances[$c];
}
</code></pre>

<p>}</p>

<p>class Cache Extends Singleton
{</p>

<pre><code>private $_handle = null;

protected function __construct()
{
    $this-&gt;_connect();
}

private function _connect()
{
    $this-&gt;_handle = new StdClass();
}

public function getHandle()
{
    return $this-&gt;_handle;
}
</code></pre>

<p>}</p>

<p>class Db Extends Singleton
{</p>

<pre><code>private $_handle = null;

protected function __construct()
{
    $this-&gt;_connect();
}

private function _connect()
{
    $this-&gt;_handle = new StdClass();
}

public function getHandle()
{
    return $this-&gt;_handle;
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>reference：</p>

<p>[^1] <a href="http://www.php-internals.com/book/?p=chapt05/05-04-class-inherit-abstract">http://www.php-internals.com/book/?p=chapt05/05-04-class-inherit-abstract</a></p>

<p>[^2] <a href="http://zh.wikipedia.org/zh/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">http://zh.wikipedia.org/zh/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F</a></p>

<p>[^3] <a href="http://www.phptherightway.com/pages/Design-Patterns.html">http://www.phptherightway.com/pages/Design-Patterns.html</a></p>

<p>[^4] <a href="http://rancoud.com/read-phps-opcode/">http://rancoud.com/read-phps-opcode/</a></p>
]]></content>
  </entry>
  
</feed>
