<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: flutter | Debug Hacks]]></title>
  <link href="http://jqlblue.github.io/tags/flutter/atom.xml" rel="self"/>
  <link href="http://jqlblue.github.io/"/>
  <updated>2020-03-02T11:26:13+00:00</updated>
  <id>http://jqlblue.github.io/</id>
  <author>
    <name><![CDATA[jqlblue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[flutter入坑指南]]></title>
    <link href="http://jqlblue.github.io/2020/02/28/guide-of-start-using-flutter/"/>
    <updated>2020-02-28T03:20:00+00:00</updated>
    <id>http://jqlblue.github.io/2020/02/28/guide-of-start-using-flutter</id>
    <content type="html"><![CDATA[<p>flutter是google推出的一个开源的ui框架(UI software development kit)，开发者可以使用flutter，通过dart语言来开发跨平台，高保真，高性能的<code>App</code>，目前已经支持的平台有： <code>Android</code>, <code>IOS</code>, <code>Windows</code>, <code>Mac</code>, <code>Linux</code>, <code>Google Fuchsia[5]</code>和 <code>Web</code>。</p>

<!-- more -->


<p>flutter的第一个版本(Alpha (v0.0.6))是在2017年5月份发布的。2018年12月4号，google发布了flutter1.0，支持android和ios平台。</p>

<p>ui框架，是一个比较抽象的概念。但是说到移动端跨平台的ui框架，我们可能会联想到<code>Hybrid</code>,<code>React-Native</code>等。所以我们以移动端为例，先尝试解释下ui框架。</p>

<p>如果将移动端的系统架构进行分层，大概如下。
<img src="/images/flutter/mobile_struct.png" title="mobile os architecture android os ios os struct" ></p>

<p>其中，对ios系统的每层架构进行细分，如下图
<img src="/images/flutter/mibile_ios_struct_1.png" title="mobile os architecture ios os layer architecture" ></p>

<p>对android系统的每层架构进行细分，如下图
<img src="/images/flutter/mobile_android_struct.png" title="mobile os architecture android os layer architecture" ></p>

<p>我们在android系统上开发出的apk，或者在ios系统上开发的ipa，主要涉及和平台特有的SDK，以及本地服务（蓝牙，摄像头，传感地，地理位置），与系统的交互如下图：
<img src="/images/flutter/mobile_native_struct.png" title="mobile os architecture android ios native oem sdk" ></p>

<p>如果要开发一款<code>App</code>，分别支持android平台和ios平台的。这样的话，就需要分别基于android和ios平台上特有的SDK进行开发。一款产品，需要维护两套代码。由于两个平台存在着不同的特性，很难在两个平台上对齐相同的交互体验。</p>

<p>所以后来出现了<code>Hybrid</code>，即混合开发的方案。可以基于IOS平台上的UIWebView和android平台上的WebView，使用HTML，CSS和Javascript进行开发，借助第三方的<code>Hybrid</code>框架，基本可以做到一套代码，多端运行。由于要使用本地的浏览器（UIWebView或WebView）进行渲染，还要使用第三方<code>Hybrid</code>框架提供的BRIDGE，与本地服务进行通信，所以性能会比较差。
<img src="/images/flutter/mobile_hybrid_struct.png" title="mobile os architecture android ios Hybrid" ></p>

<p>在后来就出现了<code>React-Native</code>等跨平台的方案，可以通过js-bridge与OEM组件，以及本地服务进行通信，较<code>Hybrid</code>的方案，可以带来更好的用户体验。
<img src="/images/flutter/mobile_cross_platform_struct.png" title="mobile os architecture android ios Cross-Platform REACT NATIVE" ></p>

<p>到这里，我们再次回归到本文的重点，flutter的方案，如下图：
<img src="/images/flutter/mobile_flutter_struct.png" title="mobile os architecture android ios flutter" ></p>

<p>flutter并不会直接编译成ios或者android应用程序。基于flutter开发的应用程序，包括两部分：</p>

<pre><code>Dart业务代码
Flutter引擎代码
</code></pre>

<p>业务代码会经过frontend_server，gen_snapshot，xcrun，ninja编译工具，转换为具体相应系统架构（arm/arm64等）的二进制指令。相关编译产物如下：
<img src="/images/flutter/mobile_flutter_struct_4.png" title="flutter编译产物" ></p>

<p>以android平台为例，基于flutter开发的应用程序的启动流程如下：
<img src="/images/flutter/mobile_flutter_struct_5.png" title="flutter应用程序启动流程" ></p>

<pre><code>Flutter Application会通过onCreate完成初始化配置，加载引擎libflutter.so，注册JNI方法

然后调用Flutter Activity的onCreate，通过FlutterJNI的AttachJNI()方法来初始化引擎Engine，Dart虚拟机，Isolate，taskRunner等对象。

再经过层层处理最终调用main.dart中main()方法，执行runApp(Widget app)来处理整个Dart业务代码。
</code></pre>

<p>由于flutter使用自渲染引擎，不使用WebView和平台的原生控件，所以不仅保证了多个平台上ui的一致性，也保证高性能。flutter的技术架构如下
<img src="/images/flutter/mobile_flutter_struct_2.png" title="flutter应用程序技术架构" ></p>

<p>通过Dart Framework层来统一Flutter C++引擎和Web引擎，最终就可以运行在Android，iOS，Browser上。</p>

<p>要开始使用flutter的话，非常方便。在flutter官网，可以选择不同平台，根据官网的指南进行安装，非常easy。</p>

<pre><code>https://flutter.dev/docs/get-started/install
</code></pre>

<p>reference：</p>

<p>[^1] <a href="https://book.flutterchina.club/chapter1/flutter_intro.html">https://book.flutterchina.club/chapter1/flutter_intro.html</a></p>

<p>[^2] <a href="https://flutter.dev/">https://flutter.dev/</a></p>

<p>[^3] <a href="http://gityuan.com/flutter/">http://gityuan.com/flutter/</a></p>

<p>[^4] <a href="https://www.intellectsoft.net/blog/mobile-app-architecture/">https://www.intellectsoft.net/blog/mobile-app-architecture/</a></p>

<p>[^5] <a href="https://tech.meituan.com/2018/08/09/waimai-flutter-practice.html">https://tech.meituan.com/2018/08/09/waimai-flutter-practice.html</a></p>
]]></content>
  </entry>
  
</feed>
