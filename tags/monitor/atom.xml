<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: monitor | Debug Hacks]]></title>
  <link href="http://jqlblue.github.io/tags/monitor/atom.xml" rel="self"/>
  <link href="http://jqlblue.github.io/"/>
  <updated>2019-02-21T13:25:03+08:00</updated>
  <id>http://jqlblue.github.io/</id>
  <author>
    <name><![CDATA[jqlblue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用graphite和cabot搭建监控服务]]></title>
    <link href="http://jqlblue.github.io/2014/10/01/use-graphite-and-alter-build-monitor-system/"/>
    <updated>2014-10-01T09:43:00+08:00</updated>
    <id>http://jqlblue.github.io/2014/10/01/use-graphite-and-alter-build-monitor-system</id>
    <content type="html"><![CDATA[<p>说起监控，我们一般会首先想到<code>zabbix</code>，<code>nagios</code>，<code>ganglia</code>等等。但是对于非<code>ops</code>开发人员而言，这些东西，多多少少让人感到陌生。所以本文将从一个<code>服务端开发人员</code>的视角，介绍如何通过<code>graphite</code>，<code>cabot</code>，加一个<code>shell</code>定时脚本，搭建监控报警服务。</p>

<!-- more -->


<h1>python环境安装</h1>

<p>虽然linux系统上一般都有python环境，但是默认的python版本较低。而且<code>yum</code>等系统工具，都依赖于默认的python。所以推荐的做法是再安装一个python，并使用<code>virtualenv</code>等工具，分项目进行环境管理，并与系统默认的python环境进行隔离。</p>

<p>以python2.7.3为例，介绍python环境的安装。</p>

<h2>安装步骤</h2>

<p>```
sudo yum install bzip2-devel.x86_64
sudo yum install sqlite-devel.x86_64
sudo yum install readline-devel.x86_64
sudo yum install openssl-devel.x86_64</p>

<p>wget <a href="http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2">http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2</a>
tar jxvf Python-2.7.3.tar.bz2
cd Python-2.7.3
./configure &mdash;prefix=/usr/local/python2.7.3
make &amp;&amp; sudo make install</p>

<p>cd ..
wget <a href="https://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz">https://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz</a> &mdash;no-check-certificate
tar zxvf distribute-0.6.49.tar.gz
cd distribute-0.6.49
sudo /usr/local/python2.7.3/bin/python setup.py install
sudo /usr/local/python2.7.3/bin/easy_install pbr</p>

<p>cd ..
wget <a href="https://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.10.1.tar.gz">https://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.10.1.tar.gz</a> &mdash;no-check-certificate
tar zxvf virtualenv-1.10.1.tar.gz
cd virtualenv-1.10.1
sudo /usr/local/python2.7.3/bin/python setup.py install
sudo /usr/local/python2.7.3/bin/easy_install virtualenvwrapper
```</p>

<blockquote><p>如果遇到 [FATAL] Failed to create text with cairo, this probably means cairo cant find any fonts. Install some system fonts and try again。可以尝试安装bitmap font。</p></blockquote>

<p><code>
sudo yum install bitmap.x86_64
sudo yum install bitmap-fonts-compat.noarch
</code></p>

<h2>相关配置</h2>

<ul>
<li>创建管理python环境的用户</li>
</ul>


<p>为了便于环境的统一管理，创建一个普通用户进行新创建python环境的管理和相关python扩展的安装。同时，向数字公司的<code>addops</code>们致敬。
<code>
useradd appops
</code></p>

<ul>
<li>创建python环境安装目录</li>
</ul>


<p><code>
sudo mkdir -p /data/server/python-envs
sudo chown -R appops.appops /data/server
</code></p>

<ul>
<li>配置新安装的python2.7.3环境</li>
</ul>


<p><code>
sudo su appops -c 'vim ~/.bashrc'
</code>
添加如下内容
<code>
export WORKON_HOME=/data/server/python-envs
export VIRTUALENVWRAPPER_PYTHON=/usr/local/python2.7.3/bin/python
export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/python2.7.3/bin/virtualenv
source /usr/local/python2.7.3/bin/virtualenvwrapper.sh
</code></p>

<h1>搭建graphite监控服务</h1>

<h2>安装步骤</h2>

<ul>
<li><p>创建安装目录
<code>
sudo mkdir /opt/graphite
sudo chown -R appops.appops /opt/graphite
</code></p></li>
<li><p>创建python虚拟环境
<code>
sudo su appops
source ~/.bashrc
mkvirtualenv graphite
</code></p></li>
<li><p>graphite安装
<code>
pip install whisper
pip install carbon
pip install graphite-web
pip install django==1.5
pip install django-tagging
pip install uwsgi
pip install MySQL-python
pip install daemonize
</code></p></li>
</ul>


<p>graphite使用<code>cairo</code>进行绘图，由于系统自带的cairo版本较低（需要cairo1.10以上），使用pip安装cairo会出错，所以采用编译安装。
<code>
wget http://cairographics.org/releases/pycairo-1.8.8.tar.gz
tar zxvf pycairo-1.8.8.tar.gz
python -c "import sys; print sys.prefix"
cd pycairo-1.8.8
./configure --prefix=/data/server/python-envs/graphite
make
make install
</code></p>

<ul>
<li>目录说明
<code>
  bin -- 数据收集相关工具
  conf -- 数据存储相关配置文件
      carbon.conf -- 数据收集carbon进程涉及的配置
      dashboard.conf -- Dashboard UI相关配置
      graphite.wsgi -- wsgi相关配置
      storage-schemas.conf -- Schema definitions for Whisper files
      whitelist.conf -- 定义允许存储的metrics白名单
      graphTemplates.conf -- 图形化展示数据时使用的模板
  examples -- 示例脚本
  lib -- carbon和twisted库
  storage -- 数据文件存储目录
  webapp -- 数据前端展示涉及程序
</code>

<h2>配置Graphite-web</h2></li>
<li>初始化配置文件
<code>
cd /opt/graphite/webapp/graphite
cp local_settings.py.example local_settings.py
cp /opt/graphite/conf/graphite.wsgi.example /opt/graphite/conf/graphite.wsgi
cp /opt/graphite/conf/graphTemplates.conf.example /opt/graphite/conf/graphTemplates.conf
cp /opt/graphite/conf/dashboard.conf.example /opt/graphite/conf/dashboard.conf
</code></li>
</ul>


<p>修改或者增加如下配置：
<code>
TIME_ZONE
DEBUG
SECRET_KEY
DATABASES
</code>
示例配置文件<a href="https://gist.github.com/jqlblue/88f8a9b14bbe4bae3666">local_settings.py</a></p>

<ul>
<li><p>初始化数据库
<code>
python manage.py syncdb
</code></p></li>
<li><p>启动graphite-web
<code>
uwsgi --http localhost:8085 --master --processes 1 --home /data/server/python-envs/graphite --pythonpath /opt/graphite/webapp/graphite --wsgi-file=/opt/graphite/conf/graphite.wsgi --enable-threads --thunder-lock
</code>
{% img /images/graphite/web.jpg graphite web%}</p></li>
</ul>


<h2>配置数据收集服务</h2>

<p><code>
cp /opt/graphite/conf/carbon.conf.example /opt/graphite/conf/carbon.conf
cp /opt/graphite/conf/storage-schemas.conf.example /opt/graphite/conf/storage-schemas.conf
cp /opt/graphite/conf/whitelist.conf.example /opt/graphite/conf/whitelist.conf
</code>
编辑<code>/opt/graphite/lib/carbon/util.py</code>，将</p>

<pre><code>from twisted.scripts._twistd_unix import daemonize
</code></pre>

<p>替换成</p>

<pre><code>import daemonize
</code></pre>

<p>否则启动cabon时会遇到<code>ImportError: cannot import name daemonize</code>。</p>

<ul>
<li><p>配置存储白名单
<code>
vim /opt/graphite/conf/whitelist.conf
</code>
添加</p>

<p>  ^test..<em>
  ^server..</em></p></li>
</ul>


<p>即只存储以<code>test.</code>和<code>server.</code>开头的metrics。</p>

<ul>
<li>配置存储Schemas
<code>
vim /opt/graphite/conf/storage-schemas.conf
</code>
添加</li>
</ul>


<p>```
[server]
pattern = ^server..*
retentions = 60s:1d,5m:7d,15m:3y</p>

<p>[default]
pattern = ^test..*
retentions = 60s:1d,5m:7d
```</p>

<p>上面的配置，会对于<code>test.</code>开头的metrics，以60秒为精度存储一天，以5分钟为精度存储7天。即查询一天内的数据时，可以精确到1分钟，查询7天内的数据时，只能精确到5分钟。</p>

<ul>
<li>启动cabon
<code>
python /opt/graphite/bin/carbon-cache.py --config=/opt/graphite/conf/carbon.conf --debug start
</code></li>
</ul>


<h1>收集监控数据</h1>

<p>etsy开源了一个叫<a href="https://github.com/etsy/statsd">statsd</a>的daemon，可用于将监控数据收集到graphite，但那玩意是nodejs写的。</p>

<p>为了保持方案的简单，采用<code>crontab</code>的方式，利用<a href="https://gist.github.com/jqlblue/c7473473f8a7357167b8">shell脚本</a>将要收集的数据通过udp协议直接发送至graphite。</p>

<p>```</p>

<h1>!/bin/sh</h1>

<p>HOST=$(hostname | awk -F'.&lsquo; &rsquo;{print $1}&lsquo;)
IDC=&ldquo;local&rdquo;</p>

<p>SYSTEM_LOAD=$(awk &lsquo;{print $1}&rsquo; /proc/loadavg)
SYSTEM_MEMORY_FREE=$(free -m | grep &lsquo;buffers/cache&rsquo; | awk &lsquo;{print $NF}&rsquo;)
SYSTEM_SWAP_USE=$(free -m | grep &lsquo;Swap&rsquo; | awk &lsquo;{print $(NF-1)}&rsquo;)
SYSTEM_DISK_USED=$(df -h | grep &lsquo;/&rsquo; | awk &lsquo;BEGIN{<em>max=0}{len=length($5);i=substr($5,0,len-1);if(</em>max&lt;i){<em>max=i}}END{print </em>max}&rsquo;)</p>

<p>TIMESTAMP=$(date +%s)</p>

<h3>send to garphite through udp port 2003</h3>

<p>echo -n &ldquo;server.$IDC.$HOST.system.load $SYSTEM_LOAD $TIMESTAMP&rdquo; > /dev/udp/127.0.0.1/2003
echo -n &ldquo;server.$IDC.$HOST.system.memory_free $SYSTEM_MEMORY_FREE $TIMESTAMP&rdquo; > /dev/udp/127.0.0.1/2003
echo -n &ldquo;server.$IDC.$HOST.system.swap_used $SYSTEM_SWAP_USED $TIMESTAMP&rdquo; > /dev/udp/127.0.0.1/2003
echo -n &ldquo;server.$IDC.$HOST.system.disk_used $SYSTEM_DISK_USED $TIMESTAMP&rdquo; > /dev/udp/127.0.0.1/2003
```</p>

<p>{% img /images/graphite/data-view.jpg graphite monitor data view %}</p>

<p><em>监控数据收集和展示流图</em></p>

<p>{% img /images/graphite/data-flow.jpg graphite monitor data flow %}</p>

<h1>搭建cabot报警服务</h1>

<p><code>cabot</code>是一个轻量级的监控报警服务。其报警可以基于：</p>

<pre><code>graphite收集的监控数据
url的响应内容和状态码
jenkins编译任务的状态
</code></pre>

<ul>
<li>安装依赖</li>
</ul>


<p><code>
sudo gem sources --remove http://rubygems.org/
sudo gem sources -a http://ruby.taobao.org/
sudo gem install foreman
</code></p>

<blockquote><p>因为foreman要求ruby版本需要在1.9.3以上，如果系统自带ruby版本过低，可以通过rvm安装ruby，再安装foreman。</p></blockquote>

<p><code>
sudo yum install npm
sudo npm install -g coffee-script less@1.3 --registry http://registry.npmjs.org/
</code></p>

<ul>
<li>初始化目录</li>
</ul>


<p><code>
sudo su appops
mkdir /data/server/alter
cd /data/server/alter
mkvirtualenv cabot
</code></p>

<ul>
<li>安装cabot</li>
</ul>


<p><code>
git clone https://github.com/arachnys/cabot.git
cd cabot
cp conf/development.env.example conf/development.env
</code></p>

<p>修改<a href="https://gist.github.com/jqlblue/165d50a949cd4aae2191">setup.py</a>，添加</p>

<pre><code>'MySQL-python==1.2.5',
</code></pre>

<p><code>
python setup.py install
/bin/sh ./setup_dev.sh
</code></p>

<ul>
<li>配置cabot</li>
</ul>


<p>使用foreman启动cabot时，会先读取<code>.foreman</code></p>

<pre><code># vi: set ft=yaml :

procfile: Procfile.dev
env: conf/development.env
</code></pre>

<p><code>Procfile.dev</code>内容如下：</p>

<pre><code>web:       python manage.py runserver 0.0.0.0:$PORT
celery:    celery -A cabot worker --loglevel=DEBUG -B -c 8 -Ofair
</code></pre>

<p>其中定义了启动cabot-web和celery任务队列时使用的命令，针对不同的环境，可以酌情修改<code>.foreman</code>和对应的<code>procfile</code>及<code>env</code>。</p>

<p>对于邮件报警，需要修改<a href="https://gist.github.com/jqlblue/a6329a7649be16e92df4">conf/development.env</a>中的如下内容：
<code>
DATABASE_URL -- 数据库配置
TIME_ZONE -- 时区
ADMIN_EMAIL
CABOT_FROM_EMAIL
CELERY_BROKER_URL -- celery任务队列配置
SES_HOST -- smtp host
SES_USER -- 发送邮件的用户
SES_PASS -- 发送邮件用户的密码
SES_PORT -- smtp port
</code></p>

<ul>
<li>启动cabot
<code>
nohup foreman start 2&gt;&amp;1 &gt; /dev/null &amp;
</code></li>
</ul>


<p>{% img /images/graphite/cabot_service.jpg cabot service %}</p>

<p>{% img /images/graphite/cabot_service_check.jpg cabot service check %}</p>

<p>{% img /images/graphite/cabot_service_check_detail.jpg cabot service check detail %}</p>

<p>reference：</p>

<p>[^1] <a href="http://graphite.readthedocs.org/en/latest/overview.html">http://graphite.readthedocs.org/en/latest/overview.html</a></p>

<p>[^2] <a href="http://cabotapp.com/qs/quickstart.html">http://cabotapp.com/qs/quickstart.html</a></p>

<p>[^3] <a href="https://gist.github.com/jirutka/8636572">https://gist.github.com/jirutka/8636572</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在生产环境部署sentry进行错误收集和提醒]]></title>
    <link href="http://jqlblue.github.io/2013/12/18/deploy-sentry-in-product/"/>
    <updated>2013-12-18T11:10:00+08:00</updated>
    <id>http://jqlblue.github.io/2013/12/18/deploy-sentry-in-product</id>
    <content type="html"><![CDATA[<p>Sentry正如其名，是一个实时的日志聚合平台，可以通过捕获程序事件（<code>Error</code>，<code>Exception</code>），或者主动上报的方式将错误信息等进行收集汇总和提醒，以帮助我们及时发现项目中的问题。</p>

<!-- more -->


<p>Sentry Server端是使用python语言开发的，目前有如下平台的客户端sdk：</p>

<p><code>Python</code>，<code>PHP</code>，<code>Ruby</code>，<code>Javascript</code>，<code>Java</code>，<code>Nodejs</code>，<code>IOS</code></p>

<p>项目地址：<a href="https://github.com/getsentry/sentry">https://github.com/getsentry/sentry</a></p>

<p>本文以收集<code>PHP</code>错误为例。</p>

<h3>安装步骤</h3>

<p>Sentry的文档清晰且完善，包括<code>安装</code>，<code>配置</code>，<code>调优</code>以及<code>客户端调用</code>，正式使用之前，建议看看，以加深理解。地址：<a href="http://sentry.readthedocs.org/en/latest/">http://sentry.readthedocs.org/en/latest/</a></p>

<h4>python环境安装</h4>

<p>Sentry需要python2.5以上，本文以<code>python2.7.3</code>为例，使用<code>virtualenv</code>进行环境隔离，使用<code>pip</code>安装需要的包
{% codeblock python2.7.3-install.sh lang:bash %}
cd ~
yum install -y bzip2-devel.x86_64
yum install -y sqlite-devel.x86_64
yum install -y readline-devel.x86_64
wget <a href="http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2">http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2</a>
tar jxvf Python-2.7.3.tar.bz2
cd Python-2.7.3
./configure &mdash;prefix=/usr/local/python2.7.3
make
sudo make install</p>

<p>wget <a href="https://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz">https://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz</a> &mdash;no-check-certificate
tar zxvf distribute-0.6.49.tar.gz
cd distribute-0.6.49
sudo /usr/local/python2.7.3/bin/python setup.py install
sudo /usr/local/python2.7.3/bin/easy_install virtualenv
sudo /usr/local/python2.7.3/bin/easy_install -i <a href="http://e.pypi.python.org/simple">http://e.pypi.python.org/simple</a> virtualenvwrapper
{% endcodeblock %}
至此，就完成了python2.7.3和pip，以及virtualenv的安装，使用如下命令进行测试</p>

<pre><code>/usr/local/python2.7.3/bin/python
</code></pre>

<h4>安装Sentry server</h4>

<p>初始化安装目录</p>

<pre><code>mkdir -p /data/server/python-envs
</code></pre>

<p>添加相关环境变量</p>

<pre><code>vim ~/.bashrc
</code></pre>

<p>添加：</p>

<pre><code>export WORKON_HOME=/data/server/python-envs
export VIRTUALENVWRAPPER_PYTHON=/usr/local/python2.7.3/bin/python
export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/python2.7.3/bin/virtualenv
source /usr/local/python2.7.3/bin/virtualenvwrapper.sh
</code></pre>

<p>使环境变量生效</p>

<pre><code>source ~/.bashrc
</code></pre>

<p>安装Sentry server</p>

<pre><code>mkvirtualenv sentry
pip install sentry
pip install sentry[mysql]
pip install sentry[mysql] --upgrade
</code></pre>

<p>修改<code>~/.bashrc</code>，添加如下代码，以便登录后自动切换到相关python环境</p>

<pre><code>source /data/server/python-envs/sentry/bin/activate
</code></pre>

<h3>快速配置</h3>

<p>或许你还没有做好决定，只是想尽快体验下Sentry，在完成上面的安装之后，通过下面三个步骤即可满足你的愿望：</p>

<p>1 初始化配置</p>

<pre><code>sentry init ~/sentry.conf.py
</code></pre>

<p>2 修改配置</p>

<p>修改初始配置中的如下两项就行</p>

<p><code>SENTRY_WEB_HOST</code>，<code>SENTRY_URL_PREFIX</code>，如：</p>

<pre><code>SENTRY_URL_PREFIX = 'http://10.16.15.1:9000'
SENTRY_WEB_HOST = '10.16.15.1'
</code></pre>

<p>3 创建超级管理员帐号，启动server</p>

<pre><code>sentry --config=~/sentry.conf.py upgrade
sentry --config=~/sentry.conf.py createsuperuser
sentry --config=~/sentry.conf.py start
</code></pre>

<p>然后就可以通过url <a href="http://server_host:port">http://server_host:port</a> ，使用创建的帐号登录系统后台，进行项目，帐号等管理，和已收集日志的查看等等</p>

<h3>配置在生产环境中使用</h3>

<h4>Sentry server</h4>

<p><em>我们在生产环境下的使用状况：</em></p>

<ul>
<li><p>使用<code>mysql</code>作为后端数据存储</p></li>
<li><p>使用<code>celery</code>任务队列（<code>broker</code>使用<code>redis</code>），处理数据入库，发送邮件提醒等工作</p></li>
<li><p>同时，使用<code>redis</code>作为<code>Update Buffers</code>，用于将频繁出现的相同事件合并，这在高并发时会相当有用</p></li>
<li><p>使用<code>memcache</code>作为前端<code>Cache</code>，管理后台通过轮询的访问获取是否有新的事件提醒，使用<code>memcache</code>，可以减轻直接查询数据库的压力</p></li>
<li><p>使用<code>Udp</code>协议发送并接收相关事件</p></li>
<li><p>使用<code>Nginx</code>反向代理前端http请求，并使用<code>HttpLimitReqModule</code>限制请求的发送速率</p></li>
<li><p>使用<code>supervisor</code>管理<code>celery</code>和<code>sentry</code>server</p></li>
</ul>


<p><em>相关安装步骤：</em></p>

<pre><code>pip install redis hiredis nydus
pip install redis hiredis nydus --upgrade
pip install python-memcached
pip install gevent
pip install eventlet
pip install supervisor
</code></pre>

<p><em>初始化配置</em></p>

<pre><code>mkdir -p /data/server/sentry/etc
sentry init /data/server/sentry/etc/sentry.conf.py
</code></pre>

<p><em>创建超级管理员帐号</em></p>

<pre><code>sentry --config=/data/server/sentry/etc/sentry.conf.py upgrade
sentry --config=/data/server/sentry/etc/sentry.conf.py createsuperuser
</code></pre>

<p><em>初始化supervisor配置</em></p>

<pre><code>echo_supervisord_conf &gt; /data/server/sentry/etc/supervisord.conf
</code></pre>

<p><em>配置Sentry</em></p>

<p>示例配置请参见 <a href="https://gist.github.com/jqlblue/8018185">https://gist.github.com/jqlblue/8018185</a></p>

<p>修改<code>/data/server/sentry/etc/supervisord.conf</code>，添加：</p>

<pre><code>[program:web]
command=/data/server/python-envs/sentry/bin/sentry --config=/data/server/sentry/etc/sentry.conf.py start
process_name=%(program_name)s_%(process_num)02d
numprocs=3
numprocs_start=0
startsecs=5
startretries=3
stopsignal=QUIT
stopwaitsecs=10
stopasgroup=true
killasgroup=true
environment=SENTRY_CONF="/data/server/sentry/etc/sentry.conf.py"
directory=/data/server/python-envs/sentry/

[program:sentry_udp]
command=/data/server/python-envs/sentry/bin/sentry --config=/data/server/sentry/etc/sentry.conf.py start udp
process_name=sentry_udp_server
numprocs=1
numprocs_start=0
startsecs=5
startretries=3
stopsignal=QUIT
stopwaitsecs=10
stopasgroup=true
killasgroup=true
environment=SENTRY_CONF="/data/server/sentry/etc/sentry.conf.py"
directory=/data/server/python-envs/sentry/

[program:celeryd]
command=/data/server/python-envs/sentry/bin/sentry celery worker -c 6 -P processes -l WARNING -n worker-%(process_num)02d.worker
process_name=%(program_name)s_%(process_num)02d
numprocs=1
numprocs_start=0
startsecs=1
startretries=3
stopsignal=TERM
stopwaitsecs=10
stopasgroup=false
killasgroup=true
environment=SENTRY_CONF="/data/server/sentry/etc/sentry.conf.py"
directory=/data/server/python-envs/sentry/
</code></pre>

<p><em>管理Sentry server</em></p>

<ul>
<li>启动superviord</li>
</ul>


<p>执行如下命令，同时，<code>celery</code>，<code>sentry web</code>，<code>sentry udp server</code>也将随之启动</p>

<pre><code>supervisord -c /data/server/sentry/etc/supervisord.conf
</code></pre>

<ul>
<li>停止sentry相关server</li>
</ul>


<p>执行如下命令</p>

<pre><code>supervisorctl -c /data/server/sentry/etc/supervisord.conf stop all
</code></pre>

<ul>
<li>停止superviord</li>
</ul>


<p>执行如下命令，同时，已启动的<code>centry</code>相关server也将停止</p>

<pre><code>supervisorctl -c /data/server/sentry/etc/supervisord.conf stop all
</code></pre>

<p><code>supervisor</code>更多使用方法请参见 <a href="http://supervisord.org/">http://supervisord.org/</a></p>

<p><code>nginx</code>配置请参见 <a href="https://gist.github.com/jqlblue/8019629">https://gist.github.com/jqlblue/8019629</a></p>

<h4>Sentry client</h4>

<p>可以通过在程序中<code>registerExceptionHandler</code>和<code>registerErrorHandler</code>将相关信息即时发送至server端。</p>

<p>相关sdk项目地址 <a href="https://github.com/getsentry/raven-php">https://github.com/getsentry/raven-php</a></p>

<p>实例化<code>Raven_Client</code>时使用的<code>DSN</code>中的<code>public:secret</code>可以在使用管理员登录后台后，在<code>项目</code>&ndash;<code>设置</code>下面查看到。示例地址：<a href="http://sentry_host/team_name/project_name/docs/php/">http://sentry_host/team_name/project_name/docs/php/</a></p>

<p>我们采用通过增量读取php error log，使用crontab将错误信息上报。</p>

<p>基于sentry php sdk修改之后的代码地址：<a href="https://gist.github.com/jqlblue/8019312">https://gist.github.com/jqlblue/8019312</a></p>

<p>安装依赖</p>

<pre><code>yum install -y logcheck.noarch
</code></pre>

<p><code>logcheck</code>中的<code>logtail2</code>用于增量读取日志，<code>flock</code>用于防止定时任务堆积。</p>

<blockquote><p>另外，需要安装php的sockets扩展</p></blockquote>

<p>添加定时任务</p>

<pre><code>* * * * * /usr/bin/flock -xn /tmp/sentry_client.lock /opt/php-5.5.4/bin/php /path/client.php --project=project_name 2&gt;&amp;1 &gt; /dev/null
</code></pre>
]]></content>
  </entry>
  
</feed>
