<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: collect web bass | Jqlblue's Blog]]></title>
  <link href="http://jqlblue.github.io/tags/collect-web-bass/atom.xml" rel="self"/>
  <link href="http://jqlblue.github.io/"/>
  <updated>2015-08-24T23:03:40+08:00</updated>
  <id>http://jqlblue.github.io/</id>
  <author>
    <name><![CDATA[jqlblue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[互联网创业公司是否需要后端工程师]]></title>
    <link href="http://jqlblue.github.io/2015/03/30/does-startup-company-need-backend-development-engineer/"/>
    <updated>2015-03-30T18:05:00+08:00</updated>
    <id>http://jqlblue.github.io/2015/03/30/does-startup-company-need-backend-development-engineer</id>
    <content type="html"><![CDATA[<p>随着LeanCloud等<code>baas</code>云服务的兴起，对于一个互联网创业公司而言，是否还需要专门的后端工程师？</p>

<!-- more -->


<p>一个典型的web app的架构如下：</p>

<p>{% img /images/baas/app_struct.png web app典型架构 %}</p>

<p>客户端或者浏览器调用后端服务，进行数据的写入和读取。让用户通过互联网，完成信息的交换。</p>

<p>以一个b-s结构的web服务为例，其前后端基本架构大致如下：</p>

<p>{% img /images/baas/simple_web_struct.png web 服务的前后端基本架构 %}</p>

<p>前端主要负责用户界面的布局和交互处理，后端包括：</p>

<pre><code>1. 后端业务逻辑处理
2. 与前端用户界面进行相关交互
</code></pre>

<p>而一个要运行在生产环节下的后端服务架构，应该大致是下面这个样子：</p>

<p>{% img /images/baas/web_struct.png web web服务后端架构 %}</p>

<p>后端服务并不是直接对数据库进行写入和查询操作，每一次到达后端服务的请求，都附带着自身的业务逻辑。</p>

<p>虽然我们可以剥离某些与业务不是强关联的模块，增加一层公共服务。但是由于每个公司商业模式和运营需求的限制，业务逻辑的<code>领域</code>特性，会一直存在。</p>

<p>而现在的<code>baas</code>等服务，主要提供的是数据存储、实时消息、统计分析以及扩展组件等基础公共服务。有了这些服务，的确满足业务需求的情况下，降低后端服务的开发成本。</p>

<p>互联网的核心价值是：</p>

<pre><code>平等，共享，透明，高度化的信息对称
快速和善变，强烈的交互式客户体验
</code></pre>

<p><code>信息</code>（数据）和<code>交互体验</code>（前端ui）都很重要。</p>

<p>当然，随着<code>baas</code>服务的发展，对于业务逻辑不是很复杂的互联网应用，的确可以完全使用<code>baas</code>服务替代现有的后端服务。但是这样就会把后端逻辑变成一个黑盒。出了问题只能等待baas服务提供商解决。</p>

<p>对于创业公司而言，在选择类似的服务时，需要根据自身的业务形态和人员配备等，在前期的人员投入，后期的维护成本以及业务的最终形态，系统的扩展性，数据的安全性等方面，进行权衡。</p>

<p>而身处创业公司的后端工程师，也需要积极了解行业动态，如果使用<code>baas</code>服务能满足业务需求的，也就没有必要再去重复开发。</p>

<blockquote><p>baas（Backend as a Service）</p></blockquote>

<p>即软件即服务，如APICloud，LeanCloud。</p>

<blockquote><p>paas（Platform as a Service）</p></blockquote>

<p>即平台即服务，如google的gae，sina的sae。</p>

<blockquote><p>laas（Infrastructure as a Service）</p></blockquote>

<p>即基础设施即服务，如亚马逊的aws，阿里云，腾讯云，linode。</p>

<blockquote><p>saas（Software as a Service）</p></blockquote>

<p>即软件即服务，如云盘。</p>
]]></content>
  </entry>
  
</feed>
